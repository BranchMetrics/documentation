{"deflt":[{"title":"Creating links in your app","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#creating-links-in-your-app","body":"Links are the foundation to everything Branch offers. There are many different aspects to creating links but the most important are:\n  Embed key/value deep link metadata. We’ll make sure this gets delivered to the app with the clicking user\n  Label feature and channel for analytics on the dashboard\nHere’s how to create your own Branch Links.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"foo\": @\"bar\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Attaching Custom Data to Links","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#attaching-custom-data-to-links","body":"Branch links allow you to attach any information you want to links. Custom data can be information about an ad campaign, referring user, promotion, or content being shared. You use it to build a personalized referral system so users never see a generic onboarding screen again. You can take users straight to the content they wanted to see when they clicked the link in the first place.Imagine how URLs are used on the Internet… now you have the same power inside your native mobile apps.This data is stored on our backend and presented again when the user clicks on a link via the deepLinkHandler – it’s not simply appended to the end of the URL.   Tip: Aliasing Links\nBecause we don’t store data in the URL, you can create pretty links, like bnc.lt/bob. For information on custom aliases for links, see the section below, Alias – The Custom Ending.\nStore data about both the sharing user and the content shared in the data dictionary. Attaching information is as simple as including a dictionary at link creation time. If, for example, James is inviting friends to check out your app, you could do the following:\n\n[[Branch getInstance] getShortURLWithParams:@{  @\"referringUsername\": @\"James\",\n                                                @\"referringUserId\": @\"1234\",\n                                                @\"contentId\": @\"0987\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);    \n}];\n\nobjective-cswift   Tip: Identify your users!\nYou should identify your users so that you know who is sharing–and who is effectively driving the most installs and engagement.\n"},{"title":"Customizing and Tagging Links","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#customizing-and-tagging-links","body":""},{"title":"Specifying Channel","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#specifying-channel","body":"If you want a breakdown of your best performing channels–whether you measure best performing by most installs, most actual signups, or any other custom events you want to track–you should specify the channel. This can be done both for marketing links on the dashboard and for links created programmatically.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{ @\"foo\": @\"bar\" }\n                                 andChannel:@\"SMS\"\n                                 andFeature:nil\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswiftYou can safely pass in nil for any options you don’t wish to specify."},{"title":"Adding Tags","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#adding-tags","body":"Are you a tag person? You can add as many simply tags as you want to a link. Note that these are not key-value pairs – those belong in the custom data dictionary.No mysteries here:\n\n[[Branch getInstance] getShortURLWithParams:@{}\n                                    andTags:@[@\"any\", @\"other\", @\"tags\", @\"you\", @\"want\"]\n                                 andChannel:nil\n                                 andFeature:nil\n                                   andStage:nil\n                                   andAlias:nil\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Specifying Feature","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#specifying-feature","body":"The more analytics the better. If you want to track whether personalized invites, content shares or gift offers are driving more installs, you can optionally specify a feature tag.By default we provide some suggestions for filling in feature when creating a link. Those are:\n  share\n  referral\n  invite\n  deal\n  gift\nYou should feel free to specify any other “features” as you see fit.Again, the code is straightforward:\n\n[[Branch getInstance] getShortURLWithParams:@{}\n                                 andChannel:@\"SMS\"\n                                 andFeature:@\"invite\"\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"OG Tags - Looking Good on Social Media","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#og-tags---looking-good-on-social-media","body":"If you want to tailor how a link will appear on social media, you should make use of our support for Open Graph (OG) tags. You can customize the OG tags associated with the link by including key-value pairs in the params dictionary when creating a link. Note that these overwrite any defaults that you previously set on the Branch Dashboard.\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$og_title”\n      The title you’d like to appear for the link in social media\n    \n    \n      “$og_description”\n      The description you’d like to appear for the link in social media\n    \n    \n      “$og_image_url”\n      The URL for the image you’d like to appear for the link in social media\n    \n    \n      “$og_video”\n      The URL for the video\n    \n    \n      “$og_url”\n      The URL you’d like to appear\n    \n    \n      “$og_app_id”\n      Your OG app ID. Optional and rarely used.\n    \n  \n\n\n// Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard\nNSMutableDictionary *params = [NSMutableDictionary dictionary];\nparams[@\"$og_title\"] = @\"MyApp is disrupting apps\";\nparams[@\"og_description\"] = @\"Out of all the apps disrupting apps, MyApp is without a doubt a leader. Check us out.\";\n[[Branch getInstance] getShortURLWithParams:params andCallback:^(NSString *url, NSError *error) {\n   // Now we can do something with the URL...\n   NSLog(@\"url: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Alias - The Custom Ending","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#alias---the-custom-ending","body":"Do you want prettier links – perhaps customized to the user?Utilize the appropriate short/long URL method with the parameter alias to set a custom ending. We have left the other parameters blank intentionally. You may customize them as you see fit.\n\n[[Branch getInstance] getShortURLWithParams:nil\n                                 andChannel:nil\n                                 andFeature:nil\n                                   andStage:nil\n                                   andAlias:@\"custom_ending\"\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Custom Redirects","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#custom-redirects","body":""},{"title":"iOS App Store override - $ios_url","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#ios-app-store-override---iosurl","body":"When a user doesn’t have your app and clicks a link on iOS, by default the user is taken to the App Store or Custom URL that you specified on the Dashboard’s Link Settings page. If you want to specify a different destination on a per-link basis, include a value for the $ios_url.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$ios_url\": @\"http://myawesomesite.com/ios-app-landing-page\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url)\n}];\n\nobjective-cswift\n  "},{"title":"Android Play Store override - $android_url","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#android-play-store-override---androidurl","body":"When a user doesn’t have your app and clicks a link on Android, by default the user is taken to the Play Store or Custom URL that you specified on the Dashboard’s Link Settings page. If you want to specify a different destination on a per-link basis, include a value for the $android_url.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$android_url\": @\"http://myawesomesite.com/android-app-landing-page\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift\n"},{"title":"Desktop override - $desktop_url","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#desktop-override---desktopurl","body":"When a user clicks a Branch link from a desktop, by default the user is taken to a text-me-the-app page or whichever custom page you specify on the Dashboard’s Link Settings page. If you want to specify a different web page on a per-link basis, include a value for $desktop_url.This is especially useful if you want to serve up content on the web for users who don’t have your mobile app.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$desktop_url\": @\"http://myawesomesite.com/content/the-desired-content\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift\n"},{"title":"Always try to open the app - $always_deeplink","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#always-try-to-open-the-app---alwaysdeeplink","body":"In certain cases you may want to override the default Branch behavior, which uses cookies and communication with our backend to determine whether to open an app. Branch knows that a user has the app if that user has clicked a Branch link and opened the app. This means that the first time a user clicks a Branch link, even if the app is installed, we will direct the user to the App Store.To override this behavior, you can either select “Always try to open the app” on the Dashboard, or you can specify “$always_deeplink” : “true” on a per-link basis.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$always_deeplink\": @\"true\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift\n"},{"title":"Specify a custom deeplink path - $deeplink_path","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#specify-a-custom-deeplink-path---deeplinkpath","body":"The value of the deeplink path that you’d like us to append to your URI. For example, you could specify “$deeplink_path”: “radio/station/456” and we’ll open the app with the URI “yourapp://radio/station/456?link_click_id=branch-identifier”. This is primarily for supporting legacy deeplinking infrastructure.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$deeplink_path\": @\"radio/station/456\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Routing","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#routing","body":"Your app can deliver users a custom experience based on the Branch link they clicked on that directed them to the app.This means that you can:\n  customize the signup/login flow\n  take the user straight to a specific screen in your app\n  congratulate the user on getting credits for signing up via a friend’s link\n  … and so on.\nBranch is able to pass data through install. When the user first opens the app, Branch makes a fast asynchronous call to the server to see whether the user has clicked on a link, and if so, what data is associated with it. This means that you should design routing accordingly."},{"title":"Example Code","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#example-code","body":"Routing to content is highly app-specific, since mobile apps vary widely in how they are structured. That said, we want to give a concrete example of how you can use Branch links to route straight to content within your app.Inside of the deepLinkHandler, you will want to examine the params dictionary to determine whether the user clicked on a link to content. Regardless of whether your app involves pictures, videos, text or whatever novel content your app contains, you likely have an internal system of identifiers.Let’s assume your app revolves around pictures and each one is tagged with a picture Id. When a user shares a picture, simply attach a picture Id to the Branch link being created. If a user clicks a link to a specific picture, this Id will show up in the params dictionary in the deepLinkHandler.- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n  // initialize the session, setup a deep link handler\n  [[Branch getInstance] initSessionWithLaunchOptions:launchOptions\n                          andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n\n    // start setting up the view controller hierarchy\n    UINavigationController *navC = (UINavigationController *)self.window.rootViewController;\n    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];\n    UIViewController *nextVC;\n    // If the key 'pictureId' is present in the deep link dictionary\n    // then load the picture screen with the appropriate picture\n    NSString *pictureId = [params objectForKey:@\"pictureId\"];\n    if (pictureId) {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"PicVC\"];\n      [nextVC setNextPictureId:pictureId];\n    } else {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"MainVC\"];\n    }\n    [navC setViewControllers:@[nextVC] animated:YES];\n  }];\n\n  return YES;\n}For a concrete example of giving users a customized experience via Branch links, check out our Branchster Example."},{"title":"Additional Options","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#additional-options","body":""},{"title":"Adding Stage","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#adding-stage","body":"Stage is one of our lesser used options but is useful nonetheless. Useful for tracking at what stage in your app a link was created. Stage is fully determined by you and is specific to each app. Sample stages include:\n  pre_signup\n  mid_signup\n  post_signup\n  viewing_content\n  on_home_screen\nIf your app is a game, stage could require to the user’s current level.\n\n[[Branch getInstance] getShortURLWithParams:nil andTags:nil andChannel:nil andFeature:nil andStage:@\"4\" andAlias:nil andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Match Duration","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/#match-duration","body":"When we see a link click, we generate a fingerprint for users and store that fingerprint for a limited time – 2 hours by default. That browser fingerprint includes IP address, OS, OS version, etc. Then when that same user who clicked the link opens up an app with the Branch SDK, Branch creates a device fingerprint based on the same parameters and checks with the server to see if a matching browser fingerprint exists.It’s possible, albeit rare, for collisions to occur where two people on the same network have identical hardware, are running identical software, and click a link at the same time (and neithe of them have ever used an app with Branch before). One way to avoid these collisions is to shorten the time window that a browser fingerprint is stored on our servers waiting for a matching device fingerprint.You can adjust how long the browser fingerprint is stored in the browser by setting a duration when you click the link.\n\n[[Branch getInstance] getShortURLWithParams:@{}\n                                 andChannel:@\"SMS\"\n                                 andFeature:nil\n                                   andStage:nil\n                           andMatchDuration:(60*60*2)\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Tracking Events","id":"http://dev.branch.io/recipes/advanced_referral_incentives/#tracking-events","body":"Note: for analytics and custom events to be useful to you the developer, be sure to identify your users. To see how to identify your users, click here."},{"title":"Standard Events","id":"http://dev.branch.io/recipes/advanced_referral_incentives/#standard-events","body":"Branch automatically tracks opens, installs, referred sessions and web session start. You don’t need to write any special code–as soon as you start initializing sessions and clicking on Branch links, these events are recorded.You can easily see these events by navigating the Dashboard’s Export page and clicking on Events.These three events are tied to the initSession and handleOpenURL calls."},{"title":"Custom Events","id":"http://dev.branch.io/recipes/advanced_referral_incentives/#custom-events","body":"You can track any custom user actions you wish. This is useful for analytics. From these events you can construct conversion funnels on the Dashboard’s Summary page at the bottom. You can also be notified via a postback to your server every time that an event happens. Visit the Webhooks page for more information on receiving postbacks.Examples of what you may want to track:\n  sign up (especially if you have multiple steps)\n  purchases\n  content shares\n  referrals sent\n  any other engagement, etc.\nTo track custom events, you can make a simple call to the SDK.\n\n[[Branch getInstance] userCompletedAction:@\"customAction\"];\n\nobjective-cswiftYou can also include other information about the action, which is useful for rewarding user actions or receiving additional information via our webhooks. To include custom information, pass it up via the state dictionary:\n\n[[Branch getInstance] userCompletedAction:@\"purchase\" withState:@{@\"item\":@\"123-AB-456\"}];\n\nobjective-cswift"},{"title":"Rewards","id":"http://dev.branch.io/recipes/advanced_referral_incentives/#rewards","body":""},{"title":"Overview: Credits and Reward Rules","id":"http://dev.branch.io/recipes/advanced_referral_incentives/#overview-credits-and-reward-rules","body":"Branch allows you reward users with credits, track those credits, and redeem them when appropriate. It is a unit-less currency available to your users without you having to build a system from scratch.If you decide to track user credits through the Branch platform, then you must configure reward rules on the dashboard and tie them to events that occur in your app. Think of the system like this, your users are constantly completing a steady stream of actions in your app: install, signup, product_purchased. Using the Branch reward rules, you tie reward events to specific actions. Then, with every event that is saved in Branch, we check automatically if that event is eligible for credits based on the rules that you configured, then deposit the credits if so. It’s very powerful."},{"title":"Reward Rule Basics","id":"http://dev.branch.io/recipes/advanced_referral_incentives/#reward-rule-basics","body":"\n        \n      To award users for credits, you must set up a reward rule tied to a specific events.Reward rules can be based on standard Branch-defined events like install, open and referred session. They can also be based on custom events.To add a rule, go to the Dashboard Referrals page and click the Rules tab. Click the green “+ Add a new rule” button.These allow you to tailor:\n  Who gets a reward\n  How many credits the reward is\n  Which bucket the credits go to\n  Whether the reward occurs the first time or every time\n  Which event triggers the reward\nWhile the following screen is a bit busy, it illustrates where you adjust these five toggles.\n        \n      Let’s say you want to give 10 credits to each new user who signs up through a friend, and 5 credits to the friend who referred him or her. That can be done through a combination of (two rules.Rule 1: Rewarding the Referred User (10 Credits)\n        \n      \n  Who gets a reward: “Referred acting users”\n  How many credits the reward is: 10\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: the first time\n  Which event triggers the reward: install\nBe sure to press “Add rule”!Rule 2: Rewarding the Referring User (5 Credits)\n        \n      \n  Who gets a reward: “Referring users”\n  How many credits the reward is: 5\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: every time\n  Which event triggers the reward: install\nAfter adding this second rule, you should see the following:\n        \n      That’s it!Rewards are flexibleBranch’s credit system:\n  is based on either Branch-provided events (install, open, and referred session) or any custom events you track with a userCompletedAction call.\n  allows you to define as many “virtual wallets” per user as you want. These are called buckets and if no bucket is specified, the default bucket is debited/credited.\n  has built-in functions for rewarding, checking the balance, and redeeming credits.\n  enables you to specify rewards dynamically using Reward Rules on the dashboard.\n  comes with fraud protection built in.\n"},{"title":"Promo Codes","id":"http://dev.branch.io/recipes/advanced_referral_incentives/#promo-codes","body":"\n        \n      At Branch, we are quite opinionated about promo codes: they are an unnecessary hack. Promo codes are never the end goal–rewarding users for sharing and giving proper attribution for installs and signups is the end goal. Our links achieve these goals without requiring users to manually copy, paste and validate promo codes.That said, there are certain situations in which promo codes may be preferable to links, such as printed marketing collateral. (Even then we’d argue for short links–save users from searching through a long list of apps on the App Store / Play Store!) For this case, we provide promo codes. They are used solely to give users credits. They are not a substitute for install attribution, nor do they create the referring-referred relationship needed to trigger reward rules.If you want to share promo codes on printed marketing collateral, you can set them up on the Dashboard under Referrals > Reward Rules > “+ Add new rule” and choose “Promo Code”. Again, these can only be used to give credits to users–they do notYou can also find methods to create promo codes programmatically, but they are limited to one per user (i.e. one per identity). A simple search for the word “code” will locate the appropriate methods.Again, we don’t recommend using promo codes, but they can be useful in certain cases."},{"title":"IsReferrable","id":"http://dev.branch.io/recipes/advanced_referral_incentives/#isreferrable","body":"Branch’s default behavior is to track which users refer other users. Also by default, a “referral” event is only recorded if a user who clicked on a link has never opened the app before. The first time he or she clicks a shared Branch link and opens the app, it counts as a referral.This default behavior can be overridden by modifying the initSessionWithLaunchOptions:andRegisterDeepLinkHandler: method in application:didFinishLaunchingWithOptions:. Replace the method call with the following:\n\n[branch initSessionWithLaunchOptions:launchOptions isReferrable:@YES andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {     // previously initUserSessionWithCallback:withLaunchOptions:\n   if (!error) {\n       // This can now count as a referred session even if this isn't\n       // the first time a user has opened the app (aka an \"Install\").\n       // ... insert custom logic here ...\n   }\n}];\n\nobjective-cswiftYou can set isReferrable to @YES or @NO (Swift: true or false), and the behavior is as follows:\n  \n    @YES (Swift true): Now a connection can be established between a referring user and a referred user during any session, not just the very first time a user opens the app. This means that if a user signs up without clicking on a shared Branch link but later clicks on a link, the referring-referred connection is established. (In the example in part 3 below, if Bob’s friend Amy had already found and opened the app on her own but later came back to it because Bob sent her a link, Bob is the referring user and Amy is the referred user.) There can only be one referring user for any given user (e.g. as soon as Amy clicks a link from Bob, Bob is her referrer and no subsequent shared Branch links will change that). There are specific use cases where you may want this flexibility–feel free to reach out if you have questions.\n  \n  \n    @NO (Swift false): If isReferrable is set to @NO, your app will never track the relationship between referring users and referred users. While we’re not sure why you wouldn’t want such valuable information, it is certainly an option.\n  \nNote that the default behavior when isReferrable is not set is different from both @YES and @NO. It relates the current user to a referring user ONLY for the very first open (aka “Install”)."},{"title":"One time configuration","id":"http://dev.branch.io/recipes/advertising_facebook/#one-time-configuration","body":"In order for Branch to properly run a Facebook deeplinked ad campaign, you must first send Branch your app token. This is easy to get, and you can find the step by step instructions on how to do so below.\n  Log in to Facebook, navigate to developers.facebook.com/apps and choose your app. You’ll need the App ID and Client Secret.\n\n        \n      \n  On the Branch Dashboard, go to Settings > Link Settings and scroll down to ‘Authenticate for Facebook Install Ads’. Enter your App ID and Client Secret from Facebook.\n\n        \n      \n  Press ‘Authenticate’. That’s it!\n"},{"title":"Creating your Link","id":"http://dev.branch.io/recipes/advertising_facebook/#creating-your-link","body":""},{"title":"Add a marketing link","id":"http://dev.branch.io/recipes/advertising_facebook/#add-a-marketing-link","body":"When you create links on the dashboard, you have a subset of these overall labels available to you. Visit the Dashboard’s Marketing page. Then click + Add link to get started.\n        \n      "},{"title":"Analytics: Channel, Campaign, Etc","id":"http://dev.branch.io/recipes/advertising_facebook/#analytics-channel-campaign-etc","body":"optionalThe more information you enter, the better you’ll be able to segment data on the Dashboard and in exports. We recommend setting Channel and Campaign. Tags is free form."},{"title":"Deep Link Data (Advanced)","id":"http://dev.branch.io/recipes/advertising_facebook/#deep-link-data-advanced","body":"optionalHere is where you can specify the custom parameters to add to a link that will be deep linked into the app. You might want to put a coupon code or a page identifier here to route the user."},{"title":"Creating a Branch powered Facebook ad","id":"http://dev.branch.io/recipes/advertising_facebook/#creating-a-branch-powered-facebook-ad","body":"Here is the flow on how to create a Branch deep linked install ad!First, navigate to https://www.facebook.com/ads/create while logged in to your account that owns the Facebook app. If you don’t have a Facebook app yet, you’ll need to visit https://developers.facebook.com/apps/ and create a new Facebook app for your mobile app.Choose Get installs of your app. Then scroll down and select Facebook app that you wish to advertise.\n        \n      After you choose your audience and customize the display of the link, you can now specify the Deep Link in the following section.\n        \n      Paste the Branch link from the dashboard into the Deep Link field\n        \n      You’re all set to go!"},{"title":"View your data","id":"http://dev.branch.io/recipes/advertising_facebook/#view-your-data","body":"Now that you’ve set up your campaign and have everything all running, let’s analyze the data! There are many changes in the works to the Branch dashboard, but if you’d like to see something, please send us a request.First, visit the marketing tab to see the performance of the individual link. You can find your link listed in the table with a quick summary of the total clicks and installs. Unfortunately, Facebook prevents us from measurement the number of clicks on their ads, so this number is not accurate for Facebook ads.\n        \n      To view more details stats, click the small button that looks like a bar chart on the far right. The first important note is that these stats are limited to the date range at the top. You can expand the range if you’d like.The first chart is what we call the Click Flow. From a Facebook installs perspective, this will just report for you the number of installs and reopens from the link. Currently, clicks is not accurate through this ad format.\n        \n      The second chart is for measuring conversion funnels for this ad. If you setup a conversion funnel here, you can measure the total number of down funnel events that have occurred from this link in particular. It’s useful for calculating conversion rate by each ad.\n        \n      "},{"title":"Common issues with Facebook Authentication","id":"http://dev.branch.io/recipes/advertising_facebook/#common-issues-with-facebook-authentication","body":"If you are having trouble authenticating with Facebook, please check the following:Be sure you have the correct App ID and Client SecretBe sure you have the correct App ID and Client Secret. This is the number one source of issues.Client Secret embedded?If you have entered the correct App ID and Secret but are still getting issues, it may be related to how you are using your Secret. Visit the Settings > Advanced page and check that you don’t have the toggle enabled for “Is your App Secret embedded?” You will only have this option if you have enabled “Native or desktop app?” on this page.So if you have enabled “Native or desktop app”, then your advanced options should appear like the following:\n        \n      "},{"title":"Conclusion","id":"http://dev.branch.io/recipes/advertising_facebook/#conclusion","body":"It’s pretty simple! You need to configure the dashboard, generate links for your ads, and setup your app to track installs. You can optionally deep link straight to content based on the ad that the user clicked on!There is so much more you can do with Branch! You can:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Create a marketing link","id":"http://dev.branch.io/recipes/analytics_adjust/#create-a-marketing-link","body":"When you create links on the dashboard, you have a subset of these overall labels available to you. Visit the Dashboard’s Marketing page. Then click + Add link to get started.\n        \n      The following sections will walk through various options and their implications."},{"title":"Customize the redirects to point to measurement partner","id":"http://dev.branch.io/recipes/analytics_adjust/#customize-the-redirects-to-point-to-measurement-partner","body":"This allows you to direct the user to somewhere other than the App Store or Play Store if he does not have the app installed. This gives you flexibility as a marketer. You may decide for certain links that if they do not have the app, the user should be sent to www.yourwebsite.com/a_particular_campaign.In order to configure the links for this ad network integration, you’ll need to point the Branch links to the measurement partner. To do this, you’ll want to customize the endpoints for both Android and iOS. Let’s take the example where you were previously using Adjust with the following template:\n  iOS: https://app.adjust.io/8x54yn?campaign=iOS_search_campaign&adgroup={keyword}&creative={matchtype}&google_network={network}\n  Android: https://app.adjust.io/3D24xy?campaign=Android_search_campaign&adgroup={keyword}&creative={matchtype}&google_network={network}\nYou’d set the custom URL for Android to https://app.adjust.io/3D24xy and the custom URL for iOS to https://app.adjust.io/8x54yn. This would tell Branch where to send the user for the specific OS. Don’t worry about the additional query parameters (the stuff after ‘?’). We’ll carry that through Branch automatically.Note that these redirects only come into play if the user does not have the app installed."},{"title":"Customize deep link parameters","id":"http://dev.branch.io/recipes/analytics_adjust/#customize-deep-link-parameters","body":"optionalHere is where you can specify the custom parameters to add to a link that will be deep linked into the app. You might want to put a coupon code or a page identifier here to route the user.Additionally, if you want specify any additional deep link data. You would append it in this list of keys and values. For example, if you wanted to route a user to a particular piece of content, here is where you would specify this information."},{"title":"Provide link to advertiser","id":"http://dev.branch.io/recipes/analytics_adjust/#provide-link-to-advertiser","body":"Click save to generate the URL - it will appear in the list of links.Lastly, you need to deliver the proper link to the advertiser. To do this, you probably are used to sending the advertiser a link with the templated fields. For example, here is a typical link for Adjust:https://app.adjust.io/8x54yn?campaign=search_campaign&adgroup={keyword}&creative={matchtype}&google_network={network}To create the link for the advertiser, you simply need to replace the base URL (everything before the ‘?’), with the Branch provided link. So, keeping with the same example, you would change ‘https://app.adjust.io/8x54yn’ with ‘https://bnc.lt/l/125AdD-F’ to make the link like so:https://bnc.lt/l/125AdD-F?campaign=search_campaign&adgroup={keyword}&creative={matchtype}&google_network={network}This is the link to provide to the advertiser."},{"title":"How It Works","id":"http://dev.branch.io/recipes/analytics_ga/#how-it-works","body":"We use webhooks to set up a relationship where any event data gets sent to Google Analytics Measurement Protocol. In addition to event data, you can tack on any extra data you choose as appropriate based off the listed parameters found on this document.Because you can track events through Branch’s SDK, you can specify all event meta data as part of the event you send to Google Analytics in addition to the standard event data you send for a user ID."},{"title":"Set Up","id":"http://dev.branch.io/recipes/analytics_ga/#set-up","body":"Before we can start sending data to Google Analytics, we need 4 properties found on your account. The following properties are:\n  v - refers to version\n  tid - refers to your tracking or property ID\n  cid - refers to your anonymous client ID\n  t - refers to your hit type\n  ec - refers to your event category\n  ea - refers to your event action\nWith those six parameters in handy, you can begin to track events with the Branch SDK, and have them properly formatted to send to Google Analytics via our Webhook system.   Still need the GA SDK?Yes, it is required that you have a Google Analytics account with a mobile property created. You also need to integrate their SDK.\n"},{"title":"Save Event Inside App","id":"http://dev.branch.io/recipes/analytics_ga/#save-event-inside-app","body":"Before we can tell Google Analytics of an event, we need to save the event to the Branch system, with a minimum of the six details found in the previous step.NSDictionary *state = @{\n    @\"v\":@\"1\",\n    @\"tid\":@\"12345\",\n    @\"cid\":@\"67890\",\n    @\"t\":@\"event\",\n    @\"ec\":@\"commerce\",\n    @\"ea\": @\"purchase\",\n    @\"el\": @\"red_shoes\", /* event label */\n    @\"ea\": 300 /* event value */ };\n\n// event tracking via our SDK\n[[Branch getInstance] userCompletedAction:@\"purchase\" withState:state];\nOnce you have saved these events inside your application, Branch will track the counts of each time the event purchase occurred, with the exact user, and will retain meta data for each user-event.   IdentitiesSince Branch tracks identity, we recommend you keep the property “cid” the same as what you would use if you were calling setIdentity through the Branch SDK.\n"},{"title":"Configure Webhook","id":"http://dev.branch.io/recipes/analytics_ga/#configure-webhook","body":"Now that you’re saving events through Branch’s SDK, it’s time to deliver the data to Google Analytics."},{"title":"Endpoint Set Up","id":"http://dev.branch.io/recipes/analytics_ga/#endpoint-set-up","body":"Since we cannot set the body of the POST message yet, we require you to use a GET when sending data to Google Analytics.The base endpoint url is:\nhttp://www.google-analytics.com/collect\n\n\nGET /collect?payload_data\nYou will append payload data as needed as a query string after collect."},{"title":"Tempalates","id":"http://dev.branch.io/recipes/analytics_ga/#tempalates","body":"Because you will not know the values of the specified keys when inputting the url into the webhook box, you will need to use templates.Our full guide on templates are here, but provided is a sample url needed to send data to Google Analytics:\nhttp://www.google-analytics.com/collect?v=1&tid=12345&cid=/\\{\\{/ event.metadata.cid /\\}\\}/&t=event&ec=/\\{\\{/ event.metadata.ec /\\}\\}/&ea=/\\{\\{/ event.metadata.ea /\\}\\}/&el=/\\{\\{/ event.metadata.el /\\}\\}/&z=42\nYou will also need to remove the forward and backward slashes.   Why the Z parameter?Sometimes, GET requests can be cached. In order to ‘bust’ the cache, Google recommends appending a parameter, labeled Z, with a random number, so that every GET request is fresh. More information\n"},{"title":"Testing","id":"http://dev.branch.io/recipes/analytics_ga/#testing","body":"Finally, when it is all said and done, we recommend you send the requests to postbin first to ensure that every time a Branch event is hit, that the proper values are sent in the GET request. When that is taken care of, you can add the webhook with the proper URL and start sending events to Google Analytics!"},{"title":"How It Works","id":"http://dev.branch.io/recipes/analytics_localytics/#how-it-works","body":"Through webhooks, we can send all install data that Branch is responsible for. Building on top of Webhooks, we have built a custom integration to automatically send said data without any extra work on your side (besides integrating both SDKs). We just need some configuration information from your Localytics account, and we’ll take care of the rest.   How do we differntiate a Localytics install vs Branch?We rely on a Branch link being clicked which leads to an install. This sets an internal boolean that an install came from Branch, which then fires our webhook.\nBefore you can start sending data, we’ll walk you through a minimum of what is needed."},{"title":"Set Up Localytics","id":"http://dev.branch.io/recipes/analytics_localytics/#set-up-localytics","body":"This guide assumes you have an account with Localytics already. First, navigate to your account on Localytics, register your application, and grab the sdk.After integrating the SDK, we’ll need your Attribution ID to allow us to attribute. Navigate to the Attribution section, click the ... (overflow) button, and select Settings:Once there, you’ll need to add your Store ID (iTunes for iOS, Play Store for Android). Under the section Ad Tracking Setup, check the box labeled Third-party Attribution. This will enable an Attribution ID for you. Copy it, and have it handy for the next steps:   What does this mean?Once you have selected to allow 3rd party attribution, Localytics will attribute non Localytics installs to your dashboard. This information is delayed by 10 minutes.\nOnce you can verify the Localytics SDK is integrated, and you have your Attribution ID ready, we can start the Branch portion."},{"title":"Configure Dashboard","id":"http://dev.branch.io/recipes/analytics_localytics/#configure-dashboard","body":"Now that you have all the required information, you’ll need to navigate to our Webhooks tab. Click the Localytics button. You’ll need to select platform, and paste the Attribution ID from the previous step. This would look like the following:It’s important that you create a Localytics webhook for each mobile application you have, and select the appropriate mobile platform.That’s it! You have configured an integration between Branch and Localytics!"},{"title":"Testing","id":"http://dev.branch.io/recipes/analytics_localytics/#testing","body":"Now that your Branch account is configured to send data to Localytics, we’ll tell you the best strategy to test.Inside XCode’s iOS Simulator, you’ll want to simulate fresh installs by clicking Reset Content and Settings under File. Then, anytime you run your application after, it’ll simulate a new install. You’ll need to continually do this every time you want to test an attribution."},{"title":"To Test Branch Attribution","id":"http://dev.branch.io/recipes/analytics_localytics/#to-test-branch-attribution","body":"Grab a Branch link from your dashboard, paste it in mobile safari, and hit go. Once the click is registered, run (Command+R) your application. This will allow Branch’s SDK to match the “link-click” from earlier and confirm a Branch install just occurred (instead of another type of install).Navigate back to the Webhooks section of our dashboard, and click your Localytics webhook you’re testing. If it worked, you’ll notice a successful webhook sent, with a response code of 202. This is what it would look like:"},{"title":"To Test Regular Localytics Attribution","id":"http://dev.branch.io/recipes/analytics_localytics/#to-test-regular-localytics-attribution","body":"Since Branch wont be responsible for all installs, you would just need to hit Reset Content and Settings again, and re-run your app without any Branch link click. This will NOT fire a Localytics webhook, and will NOT attribute to Branch in your Localytics dashboard."},{"title":"Troubleshooting","id":"http://dev.branch.io/recipes/analytics_localytics/#troubleshooting","body":"We’ll address some commonly asked questions here.My Localytics webhook returned a 404The most common case is that you used the wrong key. You’ll need to use the Attribution Id, found under the Attribution Settings section of your Localytics dashboard. Navigate to the Set Up Localytics section for more information.My Localytics webhook returned a 404, but I have the correct IDIt takes 10 minutes to attribute after you enable the Attribution ID. This means your Attribution ID is correct, despite the 404. Localytics just hasn’t enabled 3rd party attribution as the 10 minutes haven’t passed. Wait 10 minutes, then try again.Branch shows a 202 but I don’t see it in LocalyticsThis is likely because 10 minutes haven’t passed yet. Since your Localytics account is configred to accept 3rd party attributions, they have a 10 minute time window to accept, and will only display data after the 10 minute window has passed."},{"title":"Getting Started","id":"http://dev.branch.io/recipes/analytics_mixpanel/#getting-started","body":"In case you leverage Mixpanel to track in-app events, or want to segment users from Branch installs and calculate LTV, or any other unique use case, we can support you through a couple of methodologies.We have two methods to synchronize data between services. The first is using Branch callbacks to make a call to Mixpanel. This is under methodology 1, Track Through SDK. The second is using Templated Webhooks to deliver data to your backend, which can then send that data to Mixpanel. This is under methodology 2, Track Through Webhooks.Methodology 1 is a simpler integration, but provides less flexibility. Methodology 2 is an advanced integration, but provides a bit more flexibility."},{"title":"Track Through SDK","id":"http://dev.branch.io/recipes/analytics_mixpanel/#track-through-sdk","body":"Pre-Reqs:\nSuccessful integration of both the Mixpanel and Branch SDKs\nMethods mapped out inside apps that want to event data sent to Mixpanel\nThe easiest way to send event data that comes in from Branch is to invoke the Mixpanel event tracking function inside any Branch callback.In this example, we’ll take an instance of an install responsible by Branch. We let you know if an install (or referred session if a user already had the app) was caused by Branch, by examining the referred parameter.[branch initSessionWithLaunchOptions:launchOptions andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n    if (!error) {\n    \tif ([params[@\"referred\"]]) {\n        \t// Add call here to let MP know a Branch-driven install occurred\n        \t[Mixpanel track:@\"install\" properties:params];\n        }\n    }\n}];\nMixpanel would then receive the Branch install event, and you would know Branch is responsible because referred would equal true inside the properties argument."},{"title":"Identity And Customer Segments / Profiles","id":"http://dev.branch.io/recipes/analytics_mixpanel/#identity-and-customer-segments--profiles","body":"Let’s say you want to take it a step further and track Branch specific installs and users inside your segments for Mixpanel. We have support for that as well. The way to leverage that would be with the following:\n  After a successful Branch session, set an identity.\n  Set an identity in Mixpanel\n  Track events.\nSince you set identity depending on your user authentication flow, we’d recommend taking care of that first. When that’s done, all you need to do is the following:[[Branch getInstance] userCompletedAction:@\"purchase\" withState:@{@\"item\":@\"123-AB-456\"}];\n[[Mixpanel sharedInstance] track:@\"purchase\" properties:@{@\"item\":@\"123-AB-456\"}];\n"},{"title":"Track Through Webhooks","id":"http://dev.branch.io/recipes/analytics_mixpanel/#track-through-webhooks","body":"Pre-Reqs:\nA server that accepts GET or POST commands\nMixpanel back-end SDK configured to upload data to Mixpanel account\nIn this methodology, you will need to configure the GET or POST with our webhooks. You will specify what parameter is passed through to your server in addition to the data we provide, which is found below:{\n\t\"event\": \"open\",\n\t\"metadata\": {\n\t\t\"ip\": \"73.222.120.96\",\n\t\t\"referred\": false\n\t},\n\t\"session_referring_link_data\": {\n\t\t\"app_id\": \"98444119008870744\",\n\t\t\"tag\": null,\n\t\t\"campaign\": null,\n\t\t\"channel\": null,\n\t\t\"feature\": \"marketing\",\n\t\t\"stage\": null,\n\t\t\"tags\": null,\n\t\"data\": {\n\t\t\"$marketing_title\": \"Testing Mixpanel K/V\",\n\t\t\"extra_data\": \"1234\"\n\t},\n\t\t\"state\": null,\n\t\t\"alias\": null,\n\t\t\"date\": \"2015-04-27T18:25:36.402Z\",\n\t\t\"href\": \"/l/4ix6DwE_4U\",\n\t\t\"branch_id\": \"121303087695532448\"\n\t},\n\t\"os\": \"Android\",\n\t\"os_version\": \"19\"\n}\nThis is the base body that we send over, but you will use [[Branch getInstance] trackEvent:”@exciting_event” withState:state]] to attach any state variables you need (state being a JSON Dictionary)."},{"title":"The Smart Banner","id":"http://dev.branch.io/recipes/app_download_banner/#the-smart-banner","body":"\n        \n         This just works!\nThis short snippet of code below is enough to add a web banner to both your desktop and mobile web pages! Of course, you’ll want to configure it, so check out both the Smart Banner Options and Link Options below.\nAdd the following code somewhere inside the <head> </head> tags on your website. Be sure to replace YOUR-BRANCH-KEY with your Branch Key inside the init() call. You can find your Branch Key on the Dashboard’s Settings page.<script type=\"text/javascript\">\n  (function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.8.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits creditHistory applyCode validateCode getCode redeem banner closeBanner\".split(\" \"),0);\n\n  branch.init('YOUR-BRANCH-KEY');\nbranch.banner({\n    icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n    title: 'Branch Demo App',\n    description: 'The Branch demo app!'\n}, {});\n\n</script>That’s all you need to add the smart banner to your website! The rest of this page covers advanced options.Closing the App Banner ProgrammaticallyThe App Banner includes a close button the user can click, but you may want to close the banner with a timeout, or via some other user interaction with your web app. In this case, closing the banner is very simple by calling Branch.closeBanner().js\nbranch.closeBanner();\nSmart Banner Options, Link OptionsThere are a lot of options here, but don’t be scared. Specifying them is optional, although you’ll probably want to do so to tailor it to your needs.branch.banner({\n    icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n    title: 'Branch Demo App',\n    description: 'The Branch demo app!',\n    openAppButtonText: 'Open',              // Text to show on button if the user has the app installed\n    downloadAppButtonText: 'Download',      // Text to show on button if the user does not have the app installed\n    sendLinkText: 'Send Link',              // Text to show on desktop button to allow users to text themselves the app\n    phonePreviewText: '+44 9999-9999',      // The default phone placeholder is a US format number, localize the placeholder number with a custom placeholder with this option\n    showiOS: true,                          // Should the banner be shown on iOS devices?\n    showAndroid: true,                      // Should the banner be shown on Android devices?\n    showDesktop: true,                      // Should the banner be shown on desktop devices?\n    iframe: true,                           // Show banner in an iframe, recomended to isolate Branch banner CSS\n    disableHide: false,                     // Should the user have the ability to hide the banner? (show's X on left side)\n    forgetHide: false,                      // Should we show the banner after the user closes it? Can be set to true, or an integer to show again after X days\n    position: 'top',                        // Sets the position of the banner, options are: 'top' or 'bottom', and the default is 'top'\n    mobileSticky: false,                    // Determines whether the mobile banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to false *this property only applies when the banner position is 'top'\n    desktopSticky: true,                    // Determines whether the desktop banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to true *this property only applies when the banner position is 'top'\n    customCSS: '.title { color: #F00; }',   // Add your own custom styles to the banner that load last, and are gauranteed to take precedence, even if you leave the banner in an iframe\n    make_new_link: false                    // Should the banner create a new link, even if a link already exists?\n}, {\n    tags: ['tag1', 'tag2'],\n    feature: 'dashboard',\n    stage: 'new user',\n    type: 1,\n    data: {\n        mydata: 'something',\n        foo: 'bar',\n        '$desktop_url': 'http://myappwebsite.com',\n        '$ios_url': 'http://myappwebsite.com/ios',\n        '$ipad_url': 'http://myappwebsite.com/ipad',\n        '$android_url': 'http://myappwebsite.com/android',\n        '$og_app_id': '12345',\n        '$og_title': 'My App',\n        '$og_description': 'My app\\'s description.',\n        '$og_image_url': 'http://myappwebsite.com/image.png'\n    }\n});   Deeplinking through Install\nThis data dictionary containing foo: 'bar' etc is where you put data that you want passed through install. This is discussed in the next section on Routing.\n"},{"title":"(Optional) Routing: passing information from the Banner","id":"http://dev.branch.io/recipes/app_download_banner/#optional-routing-passing-information-from-the-banner","body":"Now that you’ve added routing to your app, you can add information to the Smart Banner. If you’ve used the example Smart Banner code above, you simply need to insert any key-value pairs you’d like into the data dictionary.Using our example of routing above with the PicVC, you’d simply need to change the Web Banner code to the following:branch.banner(options, {\n    phone: '9999999999',\n    type: 1,\n    data: {\n        'pictureId': '12345',\n    }\n});Now when a user clicks on the Smart Banner on a mobile device, when they open your app they will be taken straight to a view controller to see picture with id “12345”. It’s that simple.Deep linking has countless possibilities and we’d be happy to brainstorm use cases for your specific app. Happy building!"},{"title":"Conclusion","id":"http://dev.branch.io/recipes/app_download_banner/#conclusion","body":"You’ve learned how to add a smart banner to your website with minimal configuration and some copying-and-pasting Javascript into your website. Perhaps the allure of passing data through install or deep linking to content caught your eye and you added the SDK to your iOS app. There’s a ton more that Branch can do. For example, you can:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Creating links programmatically to share content","id":"http://dev.branch.io/recipes/content_sharing/#creating-links-programmatically-to-share-content","body":"Links are the foundation to everything Branch offers. There are many different aspects to creating links but the most important are:\n  Embed key/value deep link metadata. We’ll make sure this gets delivered to the app with the clicking user\n  Label feature and channel for analytics on the dashboard\nHere’s how to create your own Branch Links.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"foo\": @\"bar\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift   Data is for Deeplinking\nYou use the data to link directly to content! Instead of “foo”: “bar”, you could pass in “pictureId”: “1234”, then when a user clicks on a link you can open the app straight to picture with Id 1234. Keep reading…\n"},{"title":"Routing to content within your iOS app","id":"http://dev.branch.io/recipes/content_sharing/#routing-to-content-within-your-ios-app","body":"Routing to content is highly app-specific, since mobile apps vary widely in how they are structured. That said, we want to give a concrete example of how you can use Branch links to route straight to content within your app.Inside of the deepLinkHandler, you will want to examine the params dictionary to determine whether the user clicked on a link to content. Regardless of whether your app involves pictures, videos, text or whatever novel content your app contains, you likely have an internal system of identifiers.Let’s assume your app revolves around pictures and each one is tagged with a picture Id. When a user shares a picture, simply attach a picture Id to the Branch link being created. If a user clicks a link to a specific picture, this Id will show up in the params dictionary in the deepLinkHandler.- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n  // initialize the session, setup a deep link handler\n  [[Branch getInstance] initSessionWithLaunchOptions:launchOptions\n                          andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n\n    // start setting up the view controller hierarchy\n    UINavigationController *navC = (UINavigationController *)self.window.rootViewController;\n    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];\n    UIViewController *nextVC;\n    // If the key 'pictureId' is present in the deep link dictionary\n    // then load the picture screen with the appropriate picture\n    NSString *pictureId = [params objectForKey:@\"pictureId\"];\n    if (pictureId) {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"PicVC\"];\n      [nextVC setNextPictureId:pictureId];\n    } else {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"MainVC\"];\n    }\n    [navC setViewControllers:@[nextVC] animated:YES];\n  }];\n\n  return YES;\n}"},{"title":"Sharing Methods (Optional)","id":"http://dev.branch.io/recipes/content_sharing/#sharing-methods-optional","body":""},{"title":"Sharing via SMS","id":"http://dev.branch.io/recipes/content_sharing/#sharing-via-sms","body":"To quickly share via SMS/iMessage, we’ve included some code that you can copy and paste into your own app. This is all the code you need to get users started on inviting other users!First, note that this is making an asynchronous call to Branch’s servers to generate the link and attach the information provided in the params dictionary. We highly recommend showing the user a spinner and disabling your “share” button while the link is being generated. You can either use UIActivityIndicatorView (native) or an external library like MBProgressHUD.At the top of your view controller’s implementation (.m) file, include the following:\n\n#import <MessageUI/MessageUI.h>\n#import <MessageUI/MFMailComposeViewController.h>\n\nobjective-cswiftThen be sure to indicate that your view controller conforms to MFMessageComposeViewControllerDelegate protocol. This is done by modifying the @interface line of your view controller’s implementation (.m) file.\n\n@interface MyAppViewController () <MFMessageComposeViewControllerDelegate>\n\nobjective-cswiftThe following code should go in some method triggered by the user (such as when the user taps on a button).\n\nNSDictionary *params = @{@\"referringUsername\": @\"Bob\",\n                         @\"referringUserId\": @\"1234\"};\n// ... insert code to start the spinner of your choice here ...\n[[Branch getInstance] getShortURLWithParams:params\n                                 andChannel:@\"SMS\"\n                                 andFeature:@\"Referral\"\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) {\n        // Check to make sure we can send messages on this device\n        if ([MFMessageComposeViewController canSendText]) {\n            MFMessageComposeViewController *messageComposer =\n                [[MFMessageComposeViewController alloc] init];\n            // Set the contents of the SMS/iMessage -- be sure to include the URL!\n            [messageComposer setBody:[NSString stringWithFormat:\n                @\"Check out MyApp -- use my link to get free  points: %@\", url]];\n            messageComposer.messageComposeDelegate = self;\n            [self presentViewController:messageComposer animated:YES completion:^{\n                // ... insert code to stop the spinner here\n            }];\n        } else {\n            // ... insert code to stop the spinner here\n            [[[UIAlertView alloc] initWithTitle:@\"Sorry\"\n                                        message:@\"Your device cannot send messages.\"\n                                       delegate:nil\n                              cancelButtonTitle:@\"Okay\"\n                              otherButtonTitles:nil] show];\n        }\n    }\n}];\n\nobjective-cswiftLastly, there is a required delegate method for the MessageComposeViewController. We provide an empty implementation, which you are free to customize.\n\n- (void)messageComposeViewController:(MFMessageComposeViewController *)controller\n                 didFinishWithResult:(MessageComposeResult)result {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\nobjective-cswiftThe above code allows you to quickly implement sharing via SMS. See the screenshot below!\n        \n      "},{"title":"Sharing via the Branch UIActivityItemProvider","id":"http://dev.branch.io/recipes/content_sharing/#sharing-via-the-branch-uiactivityitemprovider","body":"\n\n// Adding text\nNSString *shareString = @\"Super amazing thing I want to share!\";\n\n// Adding an image\nUIImage *amazingImage = [UIImage imageNamed:@\"Super-Amazing-Image.png\"];\n\n// Custom data\nNSMutableDictionary *params = [[NSMutableDictionary alloc] init];\n[params setObject:@\"Joe\" forKey:@\"user\"];\n[params setObject:@\"https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg\" forKey:@\"profile_pic\"];\n[params setObject:@\"Joe likes long walks on the beach...\" forKey:@\"description\"];\n[params setObject:@\"Joe's My App Referral\" forKey:@\"$og_title\"];\n[params setObject:@\"https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg\" forKey:@\"$og_image_url\"];\n[params setObject:@\"Join Joe in My App - it's awesome\" forKey:@\"$og_description\"];\n[params setObject:@\"http://myapp.com/desktop_splash\" forKey:@\"$desktop_url\"];\n\nNSArray *tags = @[@\"tag1\", @\"tag2\"];\nNSString *feature = @\"invite\";\nNSString *stage = @\"2\";\n\n// Adding a link -- Branch UIActivityItemProvider\nUIActivityItemProvider *itemProvider = [Branch getBranchActivityItemWithParams:params andFeature:feature andStage:stage andTags:tags];\n\n// Pass this in the NSArray of ActivityItems when initializing a UIActivityViewController\nUIActivityViewController *shareViewController = [[UIActivityViewController alloc] initWithActivityItems:@[shareString, amazingImage, itemProvider] applicationActivities:nil];\n\n// Present the share sheet!\n[self.navigationController presentViewController:shareViewController animated:YES completion:nil];\n\nobjective-cswift\n        \n      "},{"title":"Conclusion","id":"http://dev.branch.io/recipes/content_sharing/#conclusion","body":"Now that you’ve completed the basic integration, you can skip steps one (Configuring the Dashboard) and two (Configuring the Client) in the following guides. Next steps:\n  Link and install attribution – learn where every user is coming from\n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    Branch + Facebook – give users a custom experience based on the ad that brought them to your app!  (Skip Steps 1 and 3)\n  \n  Referrals with incentives – reward users based on the installs or engagement they generate\nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"“Always try to open the app”","id":"http://dev.branch.io/recipes/dashboard_pro_tips/#always-try-to-open-the-app","body":"By default, Branch will take users to the App Store if we do not know that the user has your app. So the first time a user clicks a link, we take him or her to the Store (or, on iOS, $ios_url).The reason we do this is to avoid an ugly error message if the URI scheme fires and fails. By tracking users we’ve seen before with a cookie, we can know whether or not they have your app installed.If you want to override the behavior and try the URI scheme first every time (with a fallback to the App Store after .5 seconds), you can turn on the option “Always try to open the app.” You can see it in the screenshot below or on the Link Settings page."},{"title":"Setting a custom link domain","id":"http://dev.branch.io/recipes/dashboard_pro_tips/#setting-a-custom-link-domain","body":"While you may enjoy Branch, it doesn’t mean you need to have bnc.lt as a part of every link you send out. If you want Branch links to use your custom subdomain, you need to follow a few simple steps.\n  You need to choose a subdomain, let get.myapp.co.\n  You need to point the CNAME record for this subdomain at us – bnc.lt is our link service.\n  After you’ve confirmed that the CNAME records have propagated throughout the internet, you need to set your custom subdomain on our Dashboard > Settings > Link Settings > Custom Link Domain. See the screenshot below.\nAfter you set this up, the custom subdomain you specify will be the basis of all Branch links created. As a side note, if a user types in your custom subdomain on its own (e.g. get.myapp.co), we will redirect to your Default URL as specified on the Link Settings page.Lastly, if you want to use your root-level domain (like myapp.com), you will need to make use of a service like CloudFlare. Check out the following two articles:\n  https://blog.cloudflare.com/zone-apex-naked-domain-root-domain-cname-supp/\n  https://support.cloudflare.com/hc/en-us/articles/200169056-CNAME-Flattening-RFC-compliant-support-for-CNAME-at-the-root\n   Changing subdomains is painful\nChanging between custom subdomains (e.g. from get.myapp.com to download.myapp.com) is painful and should be avoided at all costs. Some links will be migrated, others will stop working. We recommend you pick a subdomain you like and stick with it for the long haul!\n"},{"title":"Dashboard Summary","id":"http://dev.branch.io/recipes/dashboard_pro_tips/#dashboard-summary","body":"\n        \n      The Dashboard’s Summary page is quite powerful. You can see:\n  Total installs\n  Time plot and pie chart: Branch-driven installs by feature, campaign, channel and tags over time\n  Clicks, installs and opens by platform (desktop, Android, iOS), as well as by campaign, channel, etc.\n  Conversion funnels\n"},{"title":"Funnels","id":"http://dev.branch.io/recipes/dashboard_pro_tips/#funnels","body":"You can construct conversion funnels of both Branch-defined events and custom events. At the bottom of the Dashboard’s Summary page you can see Conversions.Simply select two or more events to see a conversion funnel. For example, if you track a custom event called purchase, you can track how many referred sessions led to purchases.This is how the funnel looks:\n        \n      "},{"title":"Influencers: Your Best Users","id":"http://dev.branch.io/recipes/dashboard_pro_tips/#influencers-your-best-users","body":"Branch allows you to easily see which users are driving the most actual installs – not just pressing the share button the most.To see this info, follow the required steps for configuring your iOS app, which can be found in our quick-start guide Integrating the SDK. After you have done this and users start to invite other users, you will see the Influencers page, which is part of the Referrals section.Here’s what your results should look like:\n\n        \n         Identify your users!\nYou must identify your users in order for the User ID column to be populated.\nThe Branch ID refers to the internal Branch ID associated with that user. It is set automatically in the SDK."},{"title":"Structuring a ‘dynamic’ Deeplink","id":"http://dev.branch.io/recipes/dynamic_link_creation/#structuring-a-dynamic-deeplink","body":"Again, this should be used for situations where the longer link is okay and you want to create links quickly without a POST to the API."},{"title":"Endpoint","id":"http://dev.branch.io/recipes/dynamic_link_creation/#endpoint","body":"GET https://bnc.lt/a/<branch_key>?AnyOptionalQueryParamsBelow\n"},{"title":"Example:","id":"http://dev.branch.io/recipes/dynamic_link_creation/#example","body":"\nhttps://bnc.lt/a/key_live_jbgnjxvlhSb6PGH23BhO4hiflcp3y7ky?data=ExampleBase64EncodedString&has_app=no&channel=facebook&stage=level4&feature=affiliate\n"},{"title":"Parameters","id":"http://dev.branch.io/recipes/dynamic_link_creation/#parameters","body":"\n  branch_key required\n  The Branch key of the originating app\nFunctionaldata  optional : Default is { }. Base 64 Encoded JSON dictionary of parameters to pass into the app. Default redirects can be overridden with $ios_url, $android_url and $desktop_url. The appearance in social media can be customized with the $og_title, $og_description and $og_image_url keys.has_app optional : Default is ‘no’. Possible values are ‘yes’ or ‘no’. If you specify ‘yes’, we’ll try to open up the app immediately instead of sending the clicker to the app store.duration optional : ADVANCED: In seconds. Only set this key if you want to override the match duration for deep link matching. This is the time that Branch allows a click to remain outstanding and be eligible to be matched with a new app session. This is default set to 7200 (2 hours)type optional : ADVANCED: Default is 0. Possible values are 0 or 1. A type of 0 means that the link will pass parameters through install any time that it is clicked and followed by an app session. A type of 1 is a security measure, which prevents the link from passing parameters into the app after the first successful deep link.Trackingtags optional (each max 64 characters) : An array of strings, which are custom tags in which to categorize the links by. Recommended syntax: ?tags=a&tags=b&tags=ccampaign optional (max 128 characters) : The campaign in which the link will be used. eg: “new_product_launch”, etc.feature optional (max 128 characters) : The feature in which the link will be used. eg: “invite”, “referral”, “share”, “gift”, etc.channel optional (max 128 characters) : The channel in which the link will be shared. eg: “facebook”, “text_message”.stage optional (max 128 characters) : A string value that represents the stage of the user in the app. eg: “level1”, “logged_in”, etc."},{"title":"Creating a Deep Linking URL via the HTTP API","id":"http://dev.branch.io/recipes/dynamic_link_creation/#creating-a-deep-linking-url-via-the-http-api","body":"The HTTP API allows you to make a POST request and get back a short URL. We include an example for reference, although you will need to specify your own Branch Key."},{"title":"Endpoint","id":"http://dev.branch.io/recipes/dynamic_link_creation/#endpoint-1","body":"POST /v1/url\nContent-Type: application/json\n"},{"title":"Example","id":"http://dev.branch.io/recipes/dynamic_link_creation/#example-1","body":"You can test this out from the command line. Feel free to swap in your own branch_key.curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\"branch_key\":\"key_live_jfdweptNITtAY5HVY3mBSojopgfGf8qQ\", \n\"campaign\":\"announcement\",\n\"feature\":\"invite\",\n\"channel\":\"email\",\n\"tags\":[\"4\"],\n\"data\":\"{\\\"name\\\":\\\"Alex\\\",\\\"email\\\":\\\"alex@branch.io\\\",\\\"$desktop_url\\\":\\\"https://branch.io\\\"}\"\n}' \\\nhttps://api.branch.io/v1/url"},{"title":"Parameters","id":"http://dev.branch.io/recipes/dynamic_link_creation/#parameters-1","body":"branch_key required : The Branch key of the originating app.Functionaldata optional : The dictionary to embed with the link. Accessed as session or install parameters from the SDK.Note\nYou can customize the Facebook OG tags of each URL if you want to dynamically share content by using the following optional keys in the data dictionary. Please use this Facebook tool to debug your OG tags!\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$og_title”\n      The title you’d like to appear for the link in social media\n    \n    \n      “$og_description”\n      The description you’d like to appear for the link in social media\n    \n    \n      “$og_image_url”\n      The URL for the image you’d like to appear for the link in social media\n    \n    \n      “$og_video”\n      The URL for the video\n    \n    \n      “$og_url”\n      The URL you’d like to appear\n    \n    \n      “$og_redirect”\n      If you want to bypass our OG tags and use your own, use this key with the URL that contains your site’s metadata.\n    \n  \nSimilar tags are available for Twitter Cards. Twitter also provides a link debugging tool to check that params come through as expected.Also, you can set custom redirection by inserting the following optional keys in the dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$desktop_url”\n      Where to send the user on a desktop or laptop. By default it is the Branch-hosted text-me service\n    \n    \n      “$android_url”\n      The replacement URL for the Play Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ios_url”\n      The replacement URL for the App Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ipad_url”\n      Same as above but for iPad Store\n    \n    \n      “$fire_url”\n      Same as above but for Amazon Fire Store\n    \n    \n      “$blackberry_url”\n      Same as above but for Blackberry Store\n    \n    \n      “$windows_phone_url”\n      Same as above but for Windows Store\n    \n    \n      “$after_click_url”\n      When a user returns to the browser after going to the app, take them to this URL. iOS only; Android coming soon\n    \n  \nYou have the ability to control the direct deep linking of each link as well:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$deeplink_path”\n      The value of the deep link path that you’d like us to append to your URI. For example, you could specify “$deeplink_path”: “radio/station/456” and we’ll open the app with the URI “yourapp://radio/station/456?link_click_id=branch-identifier”. This is primarily for supporting legacy deep linking infrastructure.\n    \n    \n      “$always_deeplink”\n      true or false. (default is not to deep link first) This key can be specified to have our linking service force try to open the app, even if we’re not sure the user has the app installed. If the app is not installed, we fall back to the respective app store or $platform_url key. By default, we only open the app if we’ve seen a user initiate a session in your app from a Branch link (has been cookied and deep linked by Branch).\n    \n  \nalias optional (max 128 characters) : Instead of our standard encoded short url, you can specify the alias of the link bnc.lt/alexaustin. Aliases are enforced to be unique per domain (bnc.lt, yourapp.com, etc). Be careful, link aliases are unique, immutable objects that cannot be deleted.   Aliased links are cached\nNOTE: If you POST to the this endpoint with the same alias, and a matching set of other POST parameters to an existing aliased link, the original will be returned to you. If it clashes and you don’t specify a match, will return a HTTP 409 error.\ntype optional : ADVANCED: Set type to 1, to make the URL a one-time use URL. It won’t deep link after 1 successful deep link.duration optional : ADVANCED: In seconds. Only set this key if you want to override the match duration for deep link matching. This is the time that Branch allows a click to remain outstanding and be eligible to be matched with a new app session. This is default set to 7200 (2 hours)Trackingidentity  optional (max 127 characters) : The identity used to identify the user. If the link is not tied to an identity, there’s no need to specify an identity.tags optional (each max 64 characters) : An array of strings, which are custom tags in which to categorize the links by. Recommended syntax: “tags”:[t1,t2,t3].campaign optional (max 128 characters) : The campaign in which the link will be used. eg: “new_product_launch”, etc.feature optional (max 128 characters) : The feature in which the link will be used. eg: “invite”, “referral”, “share”, “gift”, etc.channel optional (max 128 characters) : The channel in which the link will be shared. eg: “facebook”, “text_message”.stage optional (max 128 characters) : A string value that represents the stage of the user in the app. eg: “level1”, “logged_in”, etc."},{"title":"Returns","id":"http://dev.branch.io/recipes/dynamic_link_creation/#returns","body":"{\n    'url': 'http://bnc.lt/l/deeplink-randomID'\n}\n"},{"title":"Conclusion","id":"http://dev.branch.io/recipes/dynamic_link_creation/#conclusion","body":"We covered two methods of dynamically creating links. But there’s so much more you can do with Branch:\n  \n    Integrate the SDK – basic install tracking and deeplinking\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    App download banner – cross-platform, customizable web banner\n  \n  \n    Text-me-the-app page – your site, Branch’s free text-me-the-app service\n  \n"},{"title":"Introduction","id":"http://dev.branch.io/recipes/email_campaigns/#introduction","body":"Branch Links enable deep linking, install attribution, and in-depth analytics. While configuring your apps–whether Android, iOS or web–enables you to be much more powerful, basic links can be set up before writing a line of code.You can do this from the Branch Dashboard. We will first walk you through creating an app, then proceed to link creation."},{"title":"Basic Setup","id":"http://dev.branch.io/recipes/email_campaigns/#basic-setup","body":"Note, if you already completed these steps in the guide Your First Link, then you can skip down to the next section, Creating your Link."},{"title":"App Name","id":"http://dev.branch.io/recipes/email_campaigns/#app-name","body":"To get started, point your browser to https://dashboard.branch.io/"},{"title":"Web URL","id":"http://dev.branch.io/recipes/email_campaigns/#web-url","body":"\n        \n      This is where we will take users who click a Branch link if we don’t know where else to take them. For example, if you don’t have an Android app released yet, Android users will be taken to this link. Don’t forget to Save!To configure the Web URL on an existing app, you will need to navigate to the Settings > Link Settings page on the Dashboard. Scroll down to Default URL and enter your website.   Tip:\nYou can customize this fallback URL on a per-platform or even per-link basis. After completing setup, you may want to check out our section on Custom Redirects.\n"},{"title":"App Store or custom URL","id":"http://dev.branch.io/recipes/email_campaigns/#app-store-or-custom-url","body":"\n        \n      Part of the magic of Branch Links is that you can have different configurations for iOS, Android, Fire… – and it just works! In this section, you need to specify where the user can download your app.When setting up an iOS app, you need to locate your app in the App Store. Start typing the name of your app and it should show up in the box.You may be wondering–what if I can’t find my app, or it isn’t on the App Store yet? Good news: you can specify any location you want. For iOS apps, you can put in the URL provided by Apple on iTunesConnect (if you anticipate going live soon) or you can specify a custom URL to wherever the app is hosted remotely.   Note:\nThis field is required. If you are in the early stages of testing, you can enter a Custom URL (http://google.com works).  Then when you click a Branch link, instead of navigating to the App Store, it will go to this URL. Then you can simulate an install by running the app from Xcode.\nThat’s the end of the required setup for the Dashboard! The dashboard is incredibly powerful, so if you want to dive in deeper, definitely check out Configuring the Dashboard for the full setup."},{"title":"Creating your Link","id":"http://dev.branch.io/recipes/email_campaigns/#creating-your-link","body":""},{"title":"Add a marketing link","id":"http://dev.branch.io/recipes/email_campaigns/#add-a-marketing-link","body":"When you create links on the dashboard, you have a subset of these overall labels available to you. Visit the Dashboard’s Marketing page. Then click + Add link to get started.\n        \n      The following sections will walk through various options and their implications."},{"title":"Analytics: Channel, Campaign, Etc","id":"http://dev.branch.io/recipes/email_campaigns/#analytics-channel-campaign-etc","body":"optionalThe more information you enter, the better you’ll be able to segment data on the Dashboard and in exports. We recommend setting Channel and Campaign. Tags is free form.For information of the form [key]: [value] such as “product”: “shoes”, we recommend adding them below–see Deep Link Data (Optional)."},{"title":"Custom Link Label (Optional – highly recommended)","id":"http://dev.branch.io/recipes/email_campaigns/#custom-link-label-optional----highly-recommended","body":"optionalHere is where you can add a custom alias to the end of the link. For example, you can create links.myexample.com/download."},{"title":"Social Media (OG) Format","id":"http://dev.branch.io/recipes/email_campaigns/#social-media-og-format","body":"optionalYou can customize how the link will look on Twitter, Facebook, Pinterest and any other service with link previews. For more information on the optimal format for the title and description, see Facebook’s Sharing Best Practices."},{"title":"Deep Link Data (Optional)","id":"http://dev.branch.io/recipes/email_campaigns/#deep-link-data-optional","body":"optionalHere is where you can specify the custom parameters to add to a link that will be deep linked into the app. You might want to put a coupon code or a page identifier here to route the user.This powerful link will now track clicks across platforms. Users who have the app (perhaps you beta testers if you’re just launching!) will be linked straight to the app. Users who don’t have the app will be taken to the App Store to download your app. And any users who click this link on Desktop will be given the option to text themselves the app!\n"},{"title":"Conclusion and Advanced Options","id":"http://dev.branch.io/recipes/email_campaigns/#conclusion-and-advanced-options","body":"It’s that simple! You now have a link that will track clicks based on the channel, campaign and any other tags you create. It has a custom ending (as opposed to random characters). It’s properly formatted for social media.The Dashboard’s Summary page, specifically the “Click Flow” chart, now can show you meaningful results! Note all the filters in the screenshot below:\n        \n      To start collecting statistics regarding installs, opens, referred installs – and to add powerful, deferred deep links – check out any of our other guides. These allow you to:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"One time configuration","id":"http://dev.branch.io/recipes/facebook_appinvites/#one-time-configuration","body":"In order for Branch to properly run a Facebook deeplinked ad campaign, you must first send Branch your app token. This is easy to get, and you can find the step by step instructions on how to do so below.\n  Log in to Facebook, navigate to developers.facebook.com/apps and choose your app. You’ll need the App ID and Client Secret.\n\n        \n      \n  On the Branch Dashboard, go to Settings > Link Settings and scroll down to ‘Authenticate for Facebook Install Ads’. Enter your App ID and Client Secret from Facebook.\n\n        \n      \n  Press ‘Authenticate’. That’s it!\n"},{"title":"Insert Branch link into Invite","id":"http://dev.branch.io/recipes/facebook_appinvites/#insert-branch-link-into-invite","body":"Every Branch link automatically comes packed with all of the AppLinks to automatically handle deep linking off of Facebook posts. The Branch link will work for both fresh installs for new users and opens for users who already have the app. You can show a personal welcome for each!\n\n#import \"Branch.h\"\n#import <FBSDKShareKit/FBSDKShareKit.h>\n\n\n[[Branch getInstance] getShortURLWithParams:branchDict\n                                 andChannel:@\"facebook\"\n                                 andFeature:@\"app_invite\"\n                                andCallback:^(NSString *url, NSError* error) {\n    if ([FBSDKAppInviteDialog canShow]) {\n        FBSDKAppInviteContent *content =[[FBSDKAppInviteContent alloc] init];\n        content.appLinkURL = [NSURL URLWithString:url];\n        content.appInvitePreviewImageURL = [NSURL URLWithString:@\"https://s3-us-west-1.amazonaws.com/host/zackspic.png\"];\n                                        \n        [FBSDKAppInviteDialog showWithContent:content\n                                     delegate:self];\n    }\n}];\n\n\n// add these methods in if you extend your sharing view controller with <FBSDKAppInviteDialogDelegate>\n- (void)appInviteDialog:(FBSDKAppInviteDialog *)appInviteDialog\n didCompleteWithResults:(NSDictionary *)results {\n    [[Branch getInstance] userCompletedAction:@\"completed_share\"];\n    NSLog(@\"app invite dialog did complete\");\n}\n\n- (void)appInviteDialog:(FBSDKAppInviteDialog *)appInviteDialog\n       didFailWithError:(NSError *)error {\n    [[Branch getInstance] userCompletedAction:@\"cancelled_share\"];\n    NSLog(@\"app invite dialog did fail\");\n}\n\nobjective-cswift"},{"title":"Show Custom Welcome","id":"http://dev.branch.io/recipes/facebook_appinvites/#show-custom-welcome","body":"Since you dropped a Branch link into the URL for the AppInvite, you can use Branch to determine if a new user came from an existing app user. Below, you can see an example that our partner Gogobot built using the Branch deep link callback. The screen below is what a user sees if they came from a referring Branch link, compared to the generic onboarding which just shows a fancy picture. It drove a  78% lift in conversion to register.\n        \n      Here’s how to build it:\n\n#import \"Branch.h\"\n#import <FBSDKCoreKit/FBSDKCoreKit.h>\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    [[Branch getInstance] initSessionWithLaunchOptions:launchOptions\n                            andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n        if ([[params objectForKey:@\"+clicked_branch_link\"] boolValue]) {\n            // show personal welcome\n        }\n    }];\n    \n    return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                    didFinishLaunchingWithOptions:launchOptions];\n}\n\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n    // NOTE: Branch must come first\n    BOOL wasHandled = [[Branch getInstance] handleDeepLink:url];\n    if (!wasHandled)\n        [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                       openURL:url\n                                             sourceApplication:sourceApplication\n                                                    annotation:annotation];\n    return wasHandled;\n}\n\nobjective-cswift"},{"title":"Troubleshooting","id":"http://dev.branch.io/recipes/facebook_appinvites/#troubleshooting","body":"\n        \n      If Facebook is having trouble reading the AppLinks from the Branch link, you might see this message while trying to test out the flow. This means that there is something corrupted in the OG tags causing Facebook to not parse it. You can test the OG tags using the following tool provided by Facebook:OG tag testerIf your OG tags look fine and you’re still getting this error, please reach out to support@branch.io immediately."},{"title":"Common issues with Facebook Authentication","id":"http://dev.branch.io/recipes/facebook_appinvites/#common-issues-with-facebook-authentication","body":"If you are having trouble authenticating with Facebook, please check the following:Be sure you have the correct App ID and Client SecretBe sure you have the correct App ID and Client Secret. This is the number one source of issues.Client Secret embedded?If you have entered the correct App ID and Secret but are still getting issues, it may be related to how you are using your Secret. Visit the Settings > Advanced page and check that you don’t have the toggle enabled for “Is your App Secret embedded?” You will only have this option if you have enabled “Native or desktop app?” on this page.So if you have enabled “Native or desktop app”, then your advanced options should appear like the following:\n        \n      "},{"title":"How does Branch matching work?","id":"http://dev.branch.io/recipes/matching_accuracy/#how-does-branch-matching-work","body":"There are three mechanisms by which we pass data through to the app and attribute app sessions back to the source:1) Direct deep linkingIf the app is currently installed on the phone, and you’ve configured your Branch links with your app’s URI scheme (myapp://), we will open the app immediately and pass a click identifier through to our native library. This click identifier is then sent to the Branch servers to retrieve the dictionary of data associated with the link.For example, we’d call myapp://open?link_click_id=123456 to open the app immediately. The Branch native library parses out link_click_id: 123456 and passes it back to the Branch API to retrieve the link associated with that link click.2) 100% match browser-app profile hitBecause we set a first party browser cookie on the bnc.lt (Branchlet) domain for any app that uses a Branch link which is deterministically matched up to the hardware id or IDFA retrieved via our native library on every link click, we can use this historical data to guarantee 100% accuracy on repeat users. So, when a user clicks a Branch link for your app, and we’ve seen them click a link for another app on our network, we’ve already matched them up to a corresponding app identifier. This means that when they install the app, we know with 100% certainty that they just came from that link click.The fact that we have such a global network of apps with hundreds of millions of users clicking links, means that when you join the platform, you can benefit from the crowd-sourced accuracy gained through all our apps contributing the browser-app profiles.3) Browser to app fingerprint matchBranch collects information about devices both when a user is in the browser – via a click on a Branch link – and then after they open the app. This information includes IP Address, OS, OS version, device model, screen size and other parameters. This is the user’s digital fingerprint and can be obtained in the browser and in the app.We match the unqiue fingerprint collected in the app to the unique fingerprint collected in the browser to determine where user originated from if the prior two mechanisms were not used.Believe us, this very, very accurate."},{"title":"The nuances and edge cases","id":"http://dev.branch.io/recipes/matching_accuracy/#the-nuances-and-edge-cases","body":"It’s technically possible that users can click the link at the same time and have identical fingerprints. Same IP address, identical devices, identical software versions and never before seen by Branch. It’s very rare out in the wild. For this reason, if someone clicks a link but doesn’t open the app, we “expire” their browser-based digital fingerprint after two hours by default. However, this duration is completely tunable by you.A note about potential mismatch: This is an extremely rare case. So much so that the benefit to you from analytics perspective and the user from a personalization and delight perspective greatly outweigh the rareity of a mismatch. We only make you aware if it in order to design your new user experiences to be tolerant."},{"title":"Match Type","id":"http://dev.branch.io/recipes/matching_accuracy/#match-type","body":"If you are super concerned that users may potentially have the same fingerprint, you can choose to have us not match users if two identical fingerprints are outstanding. On the Dashboard’s Link Settings page, under advanced options, you should set Match Type.This means that if two users with the same fingerprint, on the same wifi, were to click the link, we would blacklist that digital fingerprint for the expiration duration. Therefore, when they open up the app, no match would be made.\n        \n      "},{"title":"Duration","id":"http://dev.branch.io/recipes/matching_accuracy/#duration","body":"You can also modify the 2 hour default expiration for browser-based digital fingerprints. This can be set for individual links. Look for any methods with the “duration” parameter. This duration should be set in seconds. Two hours = 7200 seconds.On iOSOne of the many methods in the iOS SDK:- (void)getShortURLWithParams:(NSDictionary *)params\n                      andTags:(NSArray *)tags\n                   andChannel:(NSString *)channel\n                   andFeature:(NSString *)feature\n                     andStage:(NSString *)stage\n             andMatchDuration:(NSUInteger)duration\n                  andCallback:(callbackWithUrl)callback;On AndroidOne of the many methods in the Android SDK:public void getShortUrl(String channel, String feature, String stage, JSONObject params, int duration, BranchLinkCreateListener callback)Via the APIAny time you request a link via the API, you can insert a ‘duration’ parameter with the integer value of the fingerprint expiration time you’d like for that link.On the DashboardLastly, you can specify the default timeout duration for all of your links on the Dashboard’s Link Settings, under the Advanced Settings section."},{"title":"Welcome to your dashboard","id":"http://dev.branch.io/recipes/measuring_installs/#welcome-to-your-dashboard","body":"You’ve created a link and integrated the SDK - now it’s time to dive into your data with the Branch Dashboard.On your dashboard you can see how many installs are being driven by word of mouth versus ad campaigns, and how well Facebook does compared to Twitter and SMS. You can do analysis comparing your marketing links to individualized links shared by your users.One screenshot is worth a million… dollars on spent on poorly performing ads and expensive tools to track those ads:\n        \n      "},{"title":"Install versus Open","id":"http://dev.branch.io/recipes/measuring_installs/#install-versus-open","body":"We measure installs and opens separately:\n  An install is the very first time a user launches the app.\n  An open is any other time the user opens the app after the very first launch.\nWhen you look at how your Branch links are performing, you can see how many are installs and opens they are driving. Don’t be confused by the terminology: install is the first time the user accesses your app; every subsequent time the user enters your app is an open in our system."},{"title":"Dashboard tips","id":"http://dev.branch.io/recipes/measuring_installs/#dashboard-tips","body":"Here’s some handy advice for getting the most out of your dashboard:\n  \n    Segment your data using the filters offered to drill down into specific sources\n  \n  \n    Use a Branch link for every download you want to drive (looking at you app download banner) so you have context for every source\n  \n  \n    Set up custom events to create conversion funnels\n  \n  \n    See who your power users are by implementing referral links then viewing data about your top users\n  \n  \n    Remember you can embed any parameters you want into Branch links, you’ll just need to export them if they aren’t one of the parameters we show by default in the dashboard\n  \n"},{"title":"What’s next?","id":"http://dev.branch.io/recipes/measuring_installs/#whats-next","body":"You’ve got deeplinking (that works through install) and you’re tracking link clicks, installs and opens. Let’s supercharge your app by implementing more sharing features to help organic and paid growth. Also keep in mind that Branch links are highly customizable since you can embed arbitrary metadata in the links, so there’s really no limit to what you can build:\n  \n    Content sharing – deeplink to your app content through install from any device\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    App download banner – cross-platform, customizable web banner\n  \n  \n    Text-me-the-app page – your site, Branch’s free text-me-the-app service\n  \n"},{"title":"Generating Links","id":"http://dev.branch.io/recipes/personalized_welcome/#generating-links","body":""},{"title":"Creating links in your app","id":"http://dev.branch.io/recipes/personalized_welcome/#creating-links-in-your-app","body":"Links are the foundation to everything Branch offers. Branch’s links offer the ability to deep link directly to content, to pass data through the install process, and to understand where users are coming from. In the case of a personalized referral system, you can attach information about the user who is sharing the link. Then this information about this user–here “John” with id “1234”–is present anytime John’s friends install the app after clicking his link.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"referringUsername\":@\"John\", @\"referringUserId\":@\"1234\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Sharing Branch Links","id":"http://dev.branch.io/recipes/personalized_welcome/#sharing-branch-links","body":"These links can be shared anywhere – via SMS, email, social media – you name it. If you have existing sharing functionality in place, all you need to do is insert a Branch link.If you don’t have sharing in place and want to get up and running quickly, check out the Sharing Methods section of our Content Sharing guide. We give you step-by-step instructions for sharing via SMS, email or social media."},{"title":"The Personal Touch: A Welcome Screen","id":"http://dev.branch.io/recipes/personalized_welcome/#the-personal-touch-a-welcome-screen","body":"Routing to content is highly app-specific, since mobile apps vary widely in how they are structured. That said, we want to give a concrete example of how you can use Branch links to route straight to content within your app.Inside of the deepLinkHandler, you will want to examine the params dictionary to determine whether the user clicked on a link to content. Regardless of whether your app involves pictures, videos, text or whatever novel content your app contains, you likely have an internal system of identifiers.Let’s assume your app revolves around pictures and each one is tagged with a picture Id. When a user shares a picture, simply attach a picture Id to the Branch link being created. If a user clicks a link to a specific picture, this Id will show up in the params dictionary in the deepLinkHandler.- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n  // initialize the session, setup a deep link handler\n  [[Branch getInstance] initSessionWithLaunchOptions:launchOptions\n                          andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n\n    // start setting up the view controller hierarchy\n    UINavigationController *navC = (UINavigationController *)self.window.rootViewController;\n    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];\n    UIViewController *nextVC;\n    // If the key 'userId' is present in the deep link dictionary\n    // then load the picture screen with the appropriate picture\n    NSString *userId = [params objectForKey:@\"userId\"];\n    if (userId) {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"userId\"];\n      [nextVC setNextUserId:userId];\n    } else {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"MainVC\"];\n    }\n    [navC setViewControllers:@[nextVC] animated:YES];\n  }];\n\n  return YES;\n}"},{"title":"Conclusion: There’s So Much More","id":"http://dev.branch.io/recipes/personalized_welcome/#conclusion-theres-so-much-more","body":"Adding a personalized invite system is as simple as creating Branch links, sharing them and then examining the custom params dictionary that is present when a new user opens the app.There’s so much more though! With Branch, you can:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Configuring the links","id":"http://dev.branch.io/recipes/quickstart_guide/#configuring-the-links","body":"First, please visit the Branch link configuration tool to setup all the redirection logic."},{"title":"Configuring your iOS app","id":"http://dev.branch.io/recipes/quickstart_guide/#configuring-your-ios-app","body":""},{"title":"Installing the SDK files","id":"http://dev.branch.io/recipes/quickstart_guide/#installing-the-sdk-files","body":"For iOS, the easiest way to install the SDK is via Cocoapods. Add pod \"Branch\" to your podfile and run pod install from the command line.However, if you don’t currently use Cocoapods, you can easily download and install our SDK.\n  To download an open-source copy, grab the zip here or clone our repo here.\n  You will need to drag and drop the Branch.framework file that you downloaded into your project. Be sure that “Copy items if needed” is selected.\n  Please import CoreTelephony.framework and AdSupport.framework\n"},{"title":"PList configuration","id":"http://dev.branch.io/recipes/quickstart_guide/#plist-configuration","body":"Add your Branch keyYour app key can be retrieved on the Settings page of the dashboard. Now you need to add it to YourProject-Info.plist (Info.plist for Swift).\n  In plist file, mouse hover “Information Property List” which is the root item under the Key column.\n  After about half a second, you will see a “+” sign appear. Click it.\n  In the newly added row, fill in “branch_key” for its key, leave type as String, and enter your app key obtained in above steps in its value column.\n  Save the plist file.\nConfigure for deep linkingTo set up your URI Scheme, you’ll need to open your project in XCode and complete the following.\n  Click on YourProject-Info.plist on the left (or in Swift, Info.plist).\n  Find URL Types and click the right arrow. (If it doesn’t exist, right click anywhere and choose Add Row. Scroll down and choose URL Types)\n  Add myapp, where myapp is a unique string for your app, as an item in URL Schemes as below:\n\n        \n      "},{"title":"Starting a Branch Session","id":"http://dev.branch.io/recipes/quickstart_guide/#starting-a-branch-session","body":"The Branch session starts every single time your app opens up, and checks if the user came from a link. You register a callback method here that will return any deep link parameters upon link click. Please note that the callback function is called 100% of the time, even when the network is out.We also bundle in a bunch of other stuff that you might find useful.There are a few pieces of code that must be in place. First, open your project’s AppDelegate.m (or AppDelegate.swift) file.\n  Add #import \"Branch.h\" at the top of the file (Objective-C only)\n  Find the line which reads:\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:\n\nobjective-cswiftand paste the following right below it:\n\nBranch *branch = [Branch getInstance];\n[branch initSessionWithLaunchOptions:launchOptions andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n    if (!error) {\n        // params are the deep linked params associated with the link that the user clicked -> was re-directed to this app\n        // params will be empty if no data found\n        // ... insert custom logic here ...\n        NSLog(@\"params: %@\", params.description)\n    }\n}];\n\nobjective-cswiftNOTE If you are seeing a “Branch.h file not found” error but you’ve imported the SDK, or it’s breaking during compiling–and you’re using Xcode 6.3 or newer–click here."},{"title":"Handle Deep Link","id":"http://dev.branch.io/recipes/quickstart_guide/#handle-deep-link","body":"This method is necessary to receive a Branch parameter when the URI scheme is called and the app open immediately. It will automatically call the Deep Link Handler registered above. application:openURL:sourceApplication:annotation::\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {\n    // pass the url to the handle deep link call\n    if (![[Branch getInstance] handleDeepLink:url]) {\n        // do other deep link routing for the Facebook SDK, Pinterest SDK, etc\n    }\n    return YES;\n}\n\nobjective-cswift"},{"title":"Creating links","id":"http://dev.branch.io/recipes/quickstart_guide/#creating-links","body":"Links are the foundation to everything Branch offers. There are many different aspects to creating links but the most important are:\n  Embed key/value deep link metadata. We’ll make sure this gets delivered to the app with the clicking user\n  Label feature and channel for analytics on the dashboard\nHere’s how to create your own Branch Links.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"foo\": @\"bar\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift   Data is for Deeplinking\nYou can also use the data to link directly to content! Instead of “foo”: “bar”, you could pass in “pictureId”: “1234”, then when a user clicks on a link you can open the app straight to picture with Id 1234. Keep reading…\n"},{"title":"Conclusion","id":"http://dev.branch.io/recipes/quickstart_guide/#conclusion","body":"Congratulations! You’re now up and running with Branch. To finish up, we’ll walk you through the data you’re seeing in your dashboard in Link and Install Attribution.Questions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Advanced","id":"http://dev.branch.io/recipes/quickstart_guide/#advanced","body":"Branch-provided data parameters in callbackPreviously, Branch did not return any information to the app if initSession was called but the user hadn’t clicked on a link. Now Branch returns explicit parameters every time. Here is a list, and a description of what each represents.\n  ~ denotes analytics\n  + denotes information added by Branch\n  (for the curious, $ denotes reserved keywords used for controlling how the Branch service behaves)\n\n  \n    \n      Parameter\n      Meaning\n    \n    \n      ~channel\n      The channel on which the link was shared, specified at link creation time\n    \n    \n      ~feature\n      The feature, such as invite or share, specified at link creation time\n    \n    \n      ~tags\n      Any tags, specified at link creation time\n    \n    \n      ~campaign\n      The campaign the link is associated with, specified at link creation time\n    \n    \n      ~stage\n      The stage, specified at link creation time\n    \n    \n      ~creation_source\n      Where the link was created (‘API’, ‘Dashboard’, ‘SDK’, ‘iOS SDK’, ‘Android SDK’, or ‘Web SDK’)\n    \n    \n      +referrer\n      The referrer for the link click, if a link was clicked\n    \n    \n      +phone_number\n      The phone number of the user, if the user texted himself/herself the app\n    \n    \n      +is_first_session\n      Denotes whether this is the first session (install) or any other session (open)\n    \n    \n      +clicked_branch_link\n      Denotes whether or not the user clicked a Branch link that triggered this session\n    \n  \n"},{"title":"Identifying Your Users","id":"http://dev.branch.io/recipes/quickstart_guide/#identifying-your-users","body":"Branch automatically tracks unique devices. However, to make full use of our powerful API, you should also identify users with whichever form of unique identification your app uses. Add these two lines of code.Add a setIdentity: call wherever you create or login a user.\n\n// your app's userId, 127 chars or less\n[[Branch getInstance] setIdentity:@\"1234\"];\n\nobjective-cswiftAdd a logout call anywhere you allow the user to logout.\n\n[[Branch getInstance] logout];\n\nobjective-cswift   Note:\nLogout should only be called when the user logs out. Calling it at other times could lead to hard-to-discover errors. Failing to call logout can likewise lead to bugs if multiple users log in on the same device.\n"},{"title":"Generating Links","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#generating-links","body":""},{"title":"Creating links in your app","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#creating-links-in-your-app","body":"Links are the foundation to everything Branch offers. Branch’s links offer the ability to deep link directly to content, to pass data through the install process, and to tell where users are coming from. In the case of a incentivized referral program, you don’t need to attach any information. You simply need to make sure that you generate links for the user who will be sharing the link. Also, be sure that you make a setIdentity call as described above.That said, you can attach information about the user who is sharing the link. Then this information about this user–here “John” with id “1234”–is present anytime John’s friends install the app after clicking his link.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"referringUsername\":@\"John\", @\"referringUserId\":@\"1234\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswiftAgain, it’s not imperative that you attach any information to the link. As long as you made a setIdentity call, anytime this link is shared we will know whose link it is and when to attribute an install to him."},{"title":"Sharing Branch Links","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#sharing-branch-links","body":"These links can be shared anywhere – via SMS, email, social media – you name it. If you have existing sharing functionality in place, all you need to do is insert a Branch link.If you don’t have sharing in place and want to get up and running quickly, check out the Sharing Methods section of our Content Sharing guide. We give you step-by-step instructions for sharing via SMS, email or social media."},{"title":"Rewards","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#rewards","body":"Branch allows you reward users with credits, track those credits, and redeem them when appropriate. It is a unit-less currency available to your users without you having to build a system from scratch.If you decide to track user credits through the Branch platform, then you must configure reward rules on the dashboard and tie them to events that occur in your app. Think of the system like this, your users are constantly completing a steady stream of actions in your app: install, signup, product_purchased. Using the Branch reward rules, you tie reward events to specific actions. Then, with every event that is saved in Branch, we check automatically if that event is eligible for credits based on the rules that you configured, then deposit the credits if so. It’s very powerful.Branch automatically tracks opens, installs, referred sessions and web session start. You don’t need to write any special code–as soon as you start initializing sessions and clicking on Branch links, these events are recorded.You can easily see these events by navigating the Dashboard’s Export page and clicking on Events.These three events are tied to the initSession and handleOpenURL calls."},{"title":"Rewarding Users","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#rewarding-users","body":"\n        \n      To award users for credits, you must set up a reward rule tied to a specific events.Reward rules can be based on standard Branch-defined events like install, open and referred session. They can also be based on custom events.To add a rule, go to the Dashboard Referrals page and click the Rules tab. Click the green “+ Add a new rule” button.Let’s say you want to give 10 credits to each new user who signs up through a friend, and 5 credits to the friend who referred him or her. That can be done through a combination of (two rules.Rule 1: Rewarding the Referred User (10 Credits)\n        \n      \n  Who gets a reward: “Referred acting users”\n  How many credits the reward is: 10\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: the first time\n  Which event triggers the reward: install\nBe sure to press “Add rule”!Rule 2: Rewarding the Referring User (5 Credits)\n        \n      \n  Who gets a reward: “Referring users”\n  How many credits the reward is: 5\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: every time\n  Which event triggers the reward: install\nAfter adding this second rule, you should see the following:\n        \n      That’s it!   Referral attribution after install\nBy default, users only get attribution for installs if the users they refer download the app for the first time. If a user sends a link to a second user who already has the app, it doesn’t “count” as a referral. To override this behavior, check out the setting isReferrable here.\n   Testing Rewards and Reward Rules\nBecause we have rules in place to ensure Rewards can’t be gamified, we have some tips for testing considerations.\nRewards are flexibleBranch’s credit system:\n  is based on either Branch-provided events (install, open, and referred session) or any custom events you track with a userCompletedAction call.\n  allows you to define as many “virtual wallets” per user as you want. These are called buckets and if no bucket is specified, the default bucket is debited/credited.\n  has built-in functions for rewarding, checking the balance, and redeeming credits.\n  enables you to specify rewards dynamically using Reward Rules on the dashboard.\n  comes with fraud protection built in.\n"},{"title":"Viewing Credits","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#viewing-credits","body":"Once users have credits, they should be able to redeem them.Checking the balance involves loading the most recent balance from the server and then checking the balance. These can be two separate steps but for the sake of simplicity we have combined them into one example:[[Branch getInstance] loadRewardsWithCallback:^(BOOL changed, NSError *err) {\n    if (!err) {\n        NSLog(@\"credit: %lu\", [[Branch getInstance] getCredits]);\n    }\n}];"},{"title":"Showing Referrals","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#showing-referrals","body":"If you’re using the Branch Invite SDK, displaying referrals, earned credits, and credit transactions to your users is super easy. It handles all the logic of determining which transactions are referrals for you as well, so there is no confusing logic. If desired, you can provide a customized view that will have the data fed into it.For the most basic integration, using the default Branch styled view, you can add the following controller, which can be shown modally or within a tab / navigation controller. Note that the delegate requires you to provide a User ID that can be used to determine transactions where the current user was the referring user.BranchReferralController *referralController = [BranchReferralController branchReferralControllerWithDelegate:self];This will appear as follows\nIf the basic styling doesn’t fit the needs of your app, you can provide an entirely custom view with just as little effort. The view should conform to the BranchReferralView protocol so that the controller can set the data items on it.BranchReferralController *referralController = [BranchReferralController branchReferralControllerWithView:myCustomView delegate:self];"},{"title":"Redeeming Credits","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#redeeming-credits","body":"When users spend credits, you can make a simple call to redeem their credits. On your dashboard, this will fall under the default bucket.[[Branch getInstance] redeemRewards:5 callback:^(BOOL success, NSError *error) {\n    if (success) {\n        NSLog(@\"Redeemed 5 credits!\");\n    }\n    else {\n        NSLog(@\"Failed to redeem credits: %@\", error);\n    }\n}];"},{"title":"Redeeming Flow","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#redeeming-flow","body":"Building out a credit redemption flow is super easy and painless, but there are a few important factors to keep in mind in terms of UX.\n  Users should know their total balance before commiting to a redemption.\n  Users should be aware of how many points they are agreeing to spend.\n  Since this is a one way, non-reversable transaction, confirmation is appropriate.\n  Users should see a progress indicator so they’re aware the transaction is taking place.\n  Users should not be able to resubmit while the redemption is occuring (progress indicator can handle this).\n  Upon completion, users should receive confirmation of success, and see their updated balance.\nFortunately, this is all fairly simple to accomplish with Branch. You really only need to take four steps:\n  Ensure Credits are loaded.\n  Show a confirmation dialog before redeeming credits.\n  Call the redeemRewards method and show a progress dialog.\n  Show a completion dialog and reflect updates in balance.\n- (IBAction)redeemCredits:(id)sender {\n    [[Branch getInstance] loadRewardsWithCallback:^(BOOL changed, NSError *error) {\n        if (!error) {\n            [[[UIAlertView alloc] initWithTitle:@\"Redeem 5 credits?\" message:nil delegate:self cancelButtonTitle:@\"Cancel\" otherButtonTitles:@\"OK\", nil] show];\n        }\n    }];\n}\n\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {\n    if (buttonIndex) {\n        [self showLoadingMask]; // impl not shown\n\n        [[Branch getInstance] redeemRewards:5 callback:^(BOOL success, NSError *error) {\n            [self hideLoadingMask]; // impl not shown\n\n            if (!err) {\n                NSInteger newBalance = [[Branch getInstance] getCredits];\n                NSString *successMsg = [NSString stringWithFormat:@\"You redeemed 5 credits! You have %ld remaining.\", (long)newBalance];\n                [[[UIAlertView alloc] initWithTitle:@\"Success\" message:successMsg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n\n                self.creditCountLabel.text = [NSString stringWithFormat:@\"%ld credits available\", (long)newBalance]; // impl not shown\n            }\n        }];\n    }\n}Here’s a super simple example:\n"},{"title":"Fraud Protection","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#fraud-protection","body":"While a bulletproof referral program is impossible, we do our best with a number of different mechanisms to stop high level fraud.\n  We track the hardware ID and IDFA of the device and tie our concept of a user identity to that identifier, preventing the cases of the same user triggering an event multiple times, and subtracting rewards when we detect fraud (multiple attempts to claim a reward from the same device).\n  Further, we merge identities so that if a user signs in on their iPhone and then their iPad using the same Facebook ID, when you let Branch know that this is the same user (via a setIdentity call), we’ll make sure any duplicate reward is removed.\nThis means that while testing you may run into issues if you test repeatedly with the same devices. When testing referral programs and reward rules, you should consider using setDebug – more on that on our “Testing your integration” page.Lastly, if you’re concerned about users gaming your system via the simulator, you can use our method isSimulator to determine whether to record an event or give a reward. It’s internal to our open-source SDK."},{"title":"Conclusion: So Much More","id":"http://dev.branch.io/recipes/referral_links_with_incentives/#conclusion-so-much-more","body":"You now have an incentivized referral program. Like many popular promo-code systems, you can reward both the user who shares a link and the user who clicks the link and installs the app. With Branch links, the magic is built in, so there’s no need for a promo code. Because we want to empower developers, we also offer the ability to reward users with credits, track those credits and redeem them–all with a few lines of code.This guide covered the basics. The following may be of interest to you, if you want to:\n  \n    Reward users for driving installs or even custom events that you define, such as “signup” or “purchase”\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Submitting to the App Store","id":"http://dev.branch.io/recipes/submitting_apps/#submitting-to-the-app-store","body":"When submitting to the App Store, you may need to let Apple know that you use the IDFA. You should do so if:\n  You use the Branch cocoapod – this automatically imports AdSupport.framework\n  You have manually imported AdSupport.framework\nWhen submitting, you will need to indicate that you do use the Advertising Identifier. Please also check the latter two checkboxes:\n        \n      This is all you need to follow the proper protocol with IDFA.We highly suggest including the AdSupport framework, as it will allow us to do better matching. If we’ve seen a device across our network of apps (a wide network indeed), then we can do matching with 100% accuracy, even if your app was just installed and opened for the first time on that device. It’s powerful (and private)."},{"title":"Use the Test App on the Branch Dashboard","id":"http://dev.branch.io/recipes/testing_your_integration/#use-the-test-app-on-the-branch-dashboard","body":"At the top right of the dashboard, for any given app you see “Live” and “Test”. Use the “Test” app and be sure that the Link Settings are properly configured. Use this so as to not pollute your production app’s Branch data.To use this app, grab the Branch Key from the test version of your app. Include this Branch Key in your .plist file, labeled branch_key. Be sure to switch to your live key for production!Make sure that you do not use this in the version of your app that you push to the App Store!"},{"title":"Debugging an individual link","id":"http://dev.branch.io/recipes/testing_your_integration/#debugging-an-individual-link","body":"At any time after link creation, you can see all the information about the link with a simple trick. Make sure you are logged into the dashboard and are on the app associated with that link (be sure you choose Live or Test as appropriate). Then enter the link into your browser and append ?debug=1.You’ll see the following screen as a result. It’s quite helpful for double-checking your links!\n        \n      "},{"title":"A Word About Fraud Protection","id":"http://dev.branch.io/recipes/testing_your_integration/#a-word-about-fraud-protection","body":"While a bulletproof referral program is impossible, we do our best with a number of different mechanisms to stop high level fraud.\n  We track the hardware ID and IDFA of the device and tie our concept of a user identity to that identifier, preventing the cases of the same user triggering an event multiple times, and subtracting rewards when we detect fraud (multiple attempts to claim a reward from the same device).\n  Further, we merge identities so that if a user signs in on their iPhone and then their iPad using the same Facebook ID, when you let Branch know that this is the same user (via a setIdentity call), we’ll make sure any duplicate reward is removed.\nThis means that while testing you may run into issues if you test repeatedly with the same devices. When testing referral programs and reward rules, you should consider using setDebug – more on that in the next section.Lastly, if you’re concerned about users gaming your system via the simulator, you can use our method isSimulator to determine whether to record an event or give a reward. It’s internal to our open-source SDK."},{"title":"Use setDebug To Simulate Fresh Installs","id":"http://dev.branch.io/recipes/testing_your_integration/#use-setdebug-to-simulate-fresh-installs","body":"One challenge aspect testing Branch’s service is simulating a fresh install. We intentionally add a lot of restrictions to prevent ‘install’ events from being triggered on app updates or uninstall/reinstall.To simulate a brand new user being referred from our perspective:\n  use the setDebug call before you call initSession in the AppDelegate (see below):\n  Uninstall your test app\n  Clear your browser cookies\n  Click a link in the browser\n  Run your test app:\n\n\n[Branch setDebug];\nBranch *branch = [Branch getInstance];\n[branch initSession.....\n\nobjective-cswift"},{"title":"Use different user Ids","id":"http://dev.branch.io/recipes/testing_your_integration/#use-different-user-ids","body":"This is especially relevant if you are trying to test rewards. Another challenge is that we do a lot of magic (identity merging, etc) to ensure that a single user doesn’t get unique rewards multiple times. You should beware that if you’re calling setIdentity with a user id that had previously been rewarded a unique reward, you will not see his credit balance increment.Make sure to use a different user id with the setIdentity call if you want to be sure credits will be properly rewarded."},{"title":"Debugging with the Dashboard","id":"http://dev.branch.io/recipes/testing_your_integration/#debugging-with-the-dashboard","body":"For debugging while still in a test environment, the Dashboard’s Debug page offers a transparent look at what is happening behind the scenes. It includes data about:\n  the user’s identity\n  the current session\n  the device’s digital fingerprint\n  the user’s credits\n\n        \n      To make use of this feature, make sure you include the setDebug call. Then open the Debug page and follow the directions to connect your phone."},{"title":"Adjusting to poor connectivity and downtime","id":"http://dev.branch.io/recipes/testing_your_integration/#adjusting-to-poor-connectivity-and-downtime","body":"At Branch, we live and breath uptime & performance. We’ve developed mechanisms internal to the SDK to deal with network issues. We always call the callbacks with the error parameter describing the issue. If the phone is in airplane mode and the connection is not available, the callbacks are called immediately. If there is a server latency, we timeout after 3 seconds and will retry 4 more times with a 3 second pause in between each. These timeouts are adjustable on the singleton instance by calling:\n  setNetworkTimeout (ms)\n  setMaxRetries\n  setRetryInterval (ms)\n"},{"title":"Web Setup","id":"http://dev.branch.io/recipes/text_me_the_app_page/#web-setup","body":"TL;DR – You can skip to the code snippet below to implement this feature immediately.Add the following code somewhere inside the <head> </head> tags on your website. Be sure to replace YOUR-BRANCH-KEY with your Branch Key inside the init() call. You can find your Branch Key on the Dashboard’s Settings page.<script type=\"text/javascript\">\n  (function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.8.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits creditHistory applyCode validateCode getCode redeem banner closeBanner\".split(\" \"),0);\n\n  branch.init('YOUR-BRANCH-KEY');\n  function sendSMS(form) {\n    branch.sendSMS(\n      phone: form.phone.text,\n      {\n        channel: 'Website',\n        feature: 'Text-Me-The-App',\n        data: {\n          foo: 'bar'\n        }\n      },\n      { make_new_link: false }, // Default: false. If set to true, sendSMS will generate a new link even if one already exists.\n      function(err) { console.log(err); }\n    }\n  });\n\n</script>"},{"title":"SendSMS() parameters.","id":"http://dev.branch.io/recipes/text_me_the_app_page/#sendsms-parameters","body":"branch.sendSMS(\n    phone,\n    linkData,\n    options,\n    callback (err, data)\n);You can read more about the SendSMS() method here.The example below includes all the code you need to add to your website in one snippet."},{"title":"SendSMS() Example","id":"http://dev.branch.io/recipes/text_me_the_app_page/#sendsms-example","body":"Here is a fully-functional web page that you can use as a template for your text-me-the-app page.<!DOCTYPE HTML>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <script type=\"text/javascript\">\n            (function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.8.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits redeem banner closeBanner\".split(\" \"),0);\n\n            branch.init('YOUR-BRANCH-KEY');\n            function sendSMS(form) {\n                var phone = form.phone.value;\n                var linkData = {\n                    tags: [],\n                    channel: 'Website',\n                    feature: 'TextMeTheApp',\n                    data: {\n                        \"foo\": \"bar\"\n                    }\n                };\n                var options = {};\n                var callback = function(err, result) {\n                    if (err) {\n                        alert(\"Sorry, something went wrong.\");\n                    }\n                    else {\n                        alert(\"SMS sent!\");\n                    }\n                };\n                branch.sendSMS(phone, linkData, options, callback);\n                form.phone.value = \"\";\n            }\n        </script>\n    </head>\n    <body>\n    \tSend SMS\n        <form onsubmit=\"sendSMS(this); return false;\">\n        \t<input id=\"phone\" name=\"phone\" type=\"tel\" placeholder=\"(650) 123-4567\" />\n        \t<br/>\n        \t<input type=\"submit\"/>\n        </form>\n    </body>\n</html>This is all you need to create a branded text-me-the-app page. Customize to your heart’s content."},{"title":"Using your own SMS service (Advanced)","id":"http://dev.branch.io/recipes/text_me_the_app_page/#using-your-own-sms-service-advanced","body":"While we provide your users the ability to text themselves the app for free – we use Twilio – you can use your own SMS service.With the sendSMS() method, we send users a link that points back to the original link they clicked that brought them to your text-me-the-app page. You can now access an equivalent link that also points back to the same link. This is provided as part of the Web SDK’s init callback and is called referring_link. See the code below:branch.init('YOUR-BRANCH-KEY', function(err, data) {\n\tconsole.log(\"data.referring_link:\", data.referring_link);\n});This referring_link will be null if the user came to the page without clicking on a Branch link. Otherwise it will be of the form bnc.lt/c/XXX – the /c/ indicates that this is not the original link but rather points back to the original link.So, to roll your own SMS service, your logic should be as follows:\n  Does referring_link exist, a.k.a. did the user end up on this text-me-the-app page because of a Branch link? If so, use this link when sending the SMS.\n  If referring_link is null, generate a new Branch link by making a call to the Web SDK’s link() method. Use this link when sending the SMS.\n   referring_link passes along your data!\nIt is essential that you use referring_link if you decide not to use our sendSMS() method to text users the app from desktop. If you generate a new link, the data from whatever link they clicked that took them to your text-me-the-app page will not be passed through to the client app upon opening.\n"},{"title":"Customizing SMS Messages","id":"http://dev.branch.io/recipes/text_me_the_app_page/#customizing-sms-messages","body":"Branch has several options for the customization of SMS messages from the Text Me the App page.The following are the three different types of messages that can be sent:1. Link Specific MessagesYou can define a special SMS message one the individual link scale. Whether you want to switch the language of a message for a different region or include device specific date, you can specify the message in the Deep Link Data section at the bottom of the link editing screen.\n\nUse the key of $custom_sms_text and then enter your custom message in the value section. (Make sure to include the  tag in your custom message!)Example:\nThe developer of FlowerPower wants to customize the SMS messages for their app based on the country of the recipient. For each Branch link, they would specify in the deeplink data a different custom message.For ads in France:\nCliquez pour télécharger FlowerPower ici For ads in Spain:\nHaz click aquí para descargar FlowerPower For ads in Germany:\nKlicken Sie auf das FlowerPower hier herunterladen 2. Custom Default for All MessagesYou can create your own custom default message that will be sent if the specific link someone clicks doesn’t have a customized message itself. To customize the default message, edit the form under the Text me the app page tab in the general settings\t.\nExample:\nA developer wants all their links that don’t have individual customizations to have the default message of\nWoah! Look at this cool new way to learn the different  \nspecies of flowers! Download FlowerPower @ 3. Branch DefaultIf a developer doesn’t specify a link specific message or a custom default, SMS messages will default to the format of\n\"Click here to download [App Name] \"Reference:\n  The tag {{ link }} is replaced with your Branch link when sent\n  The key $custom_sms_text is used for creating link specific custom SMSs\nAdvanced: Other Liquid TagsIn both the link specific custom messages and the custom default message, there is support for other liquid tags like   {{ link.channel }} or {{ link.campaign }}. The customization options are only limited to your imagination.Make sure to format the liquid tag with the link.data prefix before your key value.E.g. {{ link.data.title }}Example:\nDmitri is creating Branch links to deeplink to each of the different flowers in his app FlowerPower. He creates each link with a key/value pair of the key flower and the flower name.E.g. Flower : Rose, Flower : TulipHe wants to customize his SMS messages based on name of the flower so he sets his custom link messages as:{{ link.data.flower }}s on the mind? Click here to buy some for your home on FlowerPower! {{ link }}\nAdvanced: Default Replacements for Liquid TagsIf a specific tag isn’t always going to be filled, you can use a | character to specify a default to fallback on if the tag is missing from your link dictionary.E.g. {{ link.data.author | default:”Alex” }}If the link.data.author information isn’t found, the tag will just be replaced with Alex instead of being replaced by an empty string."},{"title":"Introduction","id":"http://dev.branch.io/recipes/webhooks_and_exporting_data/#introduction","body":"Our webhook system allows you to receive all install and down funnel event data from us as it occurs, for install attribution or conversion funnels in your own database. You simply need to specify a URL for us to send all this data to.The webhook system is very powerful and customizable. You can register to only receive notifications for specific events, like an install event for example, or you can register a wildcard * and receive all events. You can specify to only receive an event for the first time a user completes it, or every time. You can also specify receive events only in the case of referrals.For more information about event tracking–including events that Branch automatically tracks and custom events specified by the developer–see Tracking Events on our Advanced referral incentives page."},{"title":"Webhook Syntax Specification","id":"http://dev.branch.io/recipes/webhooks_and_exporting_data/#webhook-syntax-specification","body":"Here is the format of what we post to youPOST\nUser-agent: Branch Metrics API\nContent-Type: application/json\n{\n    event: ‘event name’\n    metadata: ‘event metadata’ - specified in userCompletedAction withState\n    event_timestamp: 'time stamp for the event'\n    hardware_id: 'IDFA' (iOS) | 'Android ID' (Android)\n    os: 'iOS' | 'Android'\n\n    // optionally included:\n    identity: ‘user ID’ - specified in setIdentity\n\n    // the referrer who created the new user\n    first_referring_click_timestamp: the first click timestamp\n    first_referring_identity: ‘user ID’ - specified in setIdentity\n    first_hardware_id: ‘IDFA’\n    first_referring_link_data: { link data dictionary - see below }\n\n    // the referrer who referred this session\n    session_referring_click_timestamp: the session click timestamp\n    session_referring_identity: ‘user ID’\n    session_referring_hardware_id: ‘IDFA’\n    session_referring_link_data: { link data dictionary - see below }\n}\n\n// link data dictionary example\n{\n    data: { deep link dictionary }\n    type: 0 - original, 1 - one time use, 2 - marketing\n    campaign: ‘campaign label’\n    feature: ‘feature label’\n    channel: ‘channel label’\n    tags: [tags array]\n    stage: ‘stage label’\n}\n"},{"title":"Register Webhook on Dashboard","id":"http://dev.branch.io/recipes/webhooks_and_exporting_data/#register-webhook-on-dashboard","body":"To register a webhook on the Dashboard, open the Webhooks page.Click Add a new webhook to get started.\n        \n      We've layed out the webhook registration in a sentence format. The format is:Send a webhook to [ WEBHOOK URL ] [ EVERY TIME / THE FIRST TIME ] users trigger the event [ EVENT ].\n        \n      "},{"title":"Enter your webhook URL","id":"http://dev.branch.io/recipes/webhooks_and_exporting_data/#enter-your-webhook-url","body":"First, enter the webhook URL in your own web server URL that you would like the events to be posted to.For testing, you can try out using a URL from RequestBin. More information on that below."},{"title":"Choose frequency of webhook","id":"http://dev.branch.io/recipes/webhooks_and_exporting_data/#choose-frequency-of-webhook","body":"There are two options for frequency (as seen above). Either you can receive a webhook for every single event called or can receive it the first time only for each user."},{"title":"Choose event for which to receive webhook calls","id":"http://dev.branch.io/recipes/webhooks_and_exporting_data/#choose-event-for-which-to-receive-webhook-calls","body":"The first step is to register for which events you`d like to receive a webhook for. These can be tailored to:\n  Branch-provided events: install, open, referred session, and web session start\n  Specific, custom events, like purchase or share\n  a wildcard event * which will return every single event tracked through Branch\n(Branch automatically tracks installs, opens, referred session and web session start events as soon the native library is run on a device. Any other events will be recorded through the userCompletedAction function of the native library.)The example above shows a wildcard webhook with event name *."},{"title":"Save and Confirm","id":"http://dev.branch.io/recipes/webhooks_and_exporting_data/#save-and-confirm","body":"After you press Add webhook, you should see the webhook in the list of your reward rules.\n        \n      "},{"title":"Example: Using RequestBin to test","id":"http://dev.branch.io/recipes/webhooks_and_exporting_data/#example-using-requestbin-to-test","body":"\n        \n      If you’re not sure whether one of our webhooks is configured correctly, take a look at requestb.in. RequestBin gives you a URL that collects requests, such as our webhook’s requests, to see what the client (aka Branch) is sending.To get started, navigate to their website and click “+ Create a RequestBin”.Now you should have a dedicated URL that you can use to simulate your own servers. For example:\n        \n      You can test it out using cURL, which is pretty sweet. Give it a shot if you want.\n        \n      The next step is to setup your postback with Branch. Navigate to the Dashboard’s Webhooks page and click “+ Add a new webhook”.Now you should copy your URL from RequestBin into the textfield following the label “Send a webhook to”.Choose Install for the event.Now every time someone opens the app, the webhook you’ve configured on Branch will send a request to your RequestBin. Give it a shot!After tapping a marketing link–visit our Advertising on Facebook guide to see how this link was constructed–RequestBin shows the following response:\n        \n      There is a ton of information here. Check it out and let us know if you have questions!"},{"title":"Advanced: Filters","id":"http://dev.branch.io/recipes/webhooks_and_exporting_data/#advanced-filters","body":"Filters allow you to specify when a webhook gets sent to your back-end based off criteria matches. The filters you choose are specified from the metadata found inside an event.Event metadata is passed via the SDK. The specific method is userCompletedAction, with the param withState, where state is a JSON dictionary of key/value pairs. More information on saving events here.Let’s say you’re interested in receiving a webhook on every sign_up event you’re tracking, but only in a specific market, like Chicago. If your event metadata looked like the following:event: \"sign_up\",\nmetadata: {\n    \"city\" : \"Chicago\",\n    \"username\" : \"john_smith_1\",\n}\nWe can send you a webhook only when city is equal to Chicago. In order to specify a filter on the key city, we require the following structure:branch_data.event.metadata.city.The value, in this case, would be “chicago”. Note, however, that if you wanted to filter on username, you would do:branch_data.event.metadata.username.In case you want to filter on just a key, you can put a * in the value box.The end product would look like this:For reference, Branch automatically tracks the install, referred session and open event, so if you’re interested in something like only being notified when an install occurs based off of a Branch link, you can do that without using userCompletedAction. The filter, in this case, would simply be:branch_data.event.metadata.referredAnd you would add true inside the value box.\n## Advanced: TemplatingIf your back-end relies on a dynamic URL structure to receive events, then we can support you with our webhooks. This is typically used for marketing campaigns, where a unique parameter needs to be appended to each link-click, and consequently posted back to a URL. You can also expose data we collect on the URL itself, through our templates. Here are the two options for templates and webhooks:Query Parameters on Branch LinksLet’s say you have created a Branch link in the Marketing tab specifically for SEM campaigns and want to track query parameters. Potentially something like below:http://bnc.lt/my-sf-campaign?clickId=12345And you wanted to return that value– 12345–back to your back-end. When setting up a webhook, you’d use liquid tags, which follow this convention: , and we’ll pass through that value we have saved in our database. In case there isn’t anything, it’ll simply be empty.NOTE this works for all types of Branch links, and not just marketing links.Any query parameter you add to Branch Links will be captured and stored. You will need to follow this format: session.link_click.query and specify the key from the query string to pass through the value, as shown in the example above. So, if you had ?clickId=5&deviceId=7, our database would save and webhook them as session.link_click.query.clickId and session.link_click.query.deviceId, respectively.General templates without Query ParametersIf you want to add other fields, like device ID, event name or metadata, and more, you can do that as well. For example, let’s say you have an endpoint that accepts a GET, and one of the required parameters are device.id, and event.name. In this case, that would look like the following:These values are all pulled from our database and sent to you as a passthrough, so you can dump all device IDs you see in realtime, or anything else. These are the following supported parameters:event.name // name of custom event tracked through SDK\nevent.metadata.key // metadata saved for your key\nevent.date // timestamp of event save\nidentity.id // unique Branch ID of device\nidentity.link_click.date // date of unique user clicking link\nidentity.referring_identity.id // id of referrer\nidentity.link // link that user clicked\nidentity.referring_device.hardware_id // device id of referrer\nsession.link_click.date // date of session start after link_click\nsession.referring_identity.id // Id of referrer (branch Id)\nsession.link // link that started session\nsession.referring_device.hardware_id // device id that started session\ndevice.hardware_id // device id per event\ndevice.google_advertising_id // google ad-id per event\nbrowser.branch_id // our branch id for a browser\nbrowser.metadata.userAgent // user agent for browser\ndevice.metadata.os // os\ndevice.metadata.os_version // os version\nNOTE This is the structure for sending GET requets, with dynamic URLs. In case you need this data to be in the body of a POST, then it would work the same."},{"title":"Link configuration","id":"http://dev.branch.io/recipes/your_first_marketing_link/#link-configuration","body":"First, please visit the Branch link configuration tool to setup all the redirection."},{"title":"Creating Your Branch Link","id":"http://dev.branch.io/recipes/your_first_marketing_link/#creating-your-branch-link","body":"When you create links on the dashboard, you have a subset of these overall labels available to you. Visit the Dashboard’s Marketing page. Then click + Add link to get started.\n        \n      The following sections will walk through various options and their implications."},{"title":"Analytics: Channel, Campaign, Etc","id":"http://dev.branch.io/recipes/your_first_marketing_link/#analytics-channel-campaign-etc","body":"optionalThe more information you enter, the better you’ll be able to segment data on the Dashboard and in exports. We recommend setting Channel and Campaign. Tags is free form."},{"title":"Custom Link Label","id":"http://dev.branch.io/recipes/your_first_marketing_link/#custom-link-label","body":"optionalHere is where you can add a custom alias to the end of the link. For example, you can create links.myexample.com/download."},{"title":"Social Media (OG) Format","id":"http://dev.branch.io/recipes/your_first_marketing_link/#social-media-og-format","body":"optionalYou can customize how the link will look on Twitter, Facebook, Pinterest and any other service with link previews. For more information on the optimal format for the title and description, see Facebook’s Sharing Best Practices."},{"title":"Deep Link Data","id":"http://dev.branch.io/recipes/your_first_marketing_link/#deep-link-data","body":"optionalHere is where you can specify the custom parameters to add to a link that will be deep linked into the app. You might want to put a coupon code or a page identifier here to route the user."},{"title":"Conclusion And Next Steps","id":"http://dev.branch.io/recipes/your_first_marketing_link/#conclusion-and-next-steps","body":"The Dashboard’s Summary page, specifically the “Click Flow” chart, can now show you meaningful click results! To track downloads and deep link through the install, the next step is integrating the SDK.\n        \n      "},{"title":"New documentation portal","id":"http://dev.branch.io/references/android_sdk/","body":"Check it out!"},{"title":"Important migration to v1.5.0","id":"http://dev.branch.io/references/android_sdk/#important-migration-to-v150","body":"We have deprecated the bnc_app_key and replaced that with the new branch_key. Please see add branch key for details."},{"title":"Important migration to v1.4.5","id":"http://dev.branch.io/references/android_sdk/#important-migration-to-v145","body":"Branch uses Facebook’s App Links metatags automatically to provide the best linking from the Facebook platform. Unfortunately, Facebook changed the way they handle App Links routing in the latest update on April 8ish.Two important things to do in order to properly handle deep links from Facebook\n  \n    Make sure to update the Manifest so that the Activity with the intent filter for your URI scheme has launchMode:singleTask. See example here\n  \n  \n    Make sure to add this snippet of code to the Activity registered as singleTask.\n java\n @Override\n public void onNewIntent(Intent intent) {\n     // Because the activity is a singleTask activity, the new intent won't be\n     // launched but enters here, making handling it optional. For branch to work\n     // the intent must be updated by calling the following:\n     this.setIntent(intent);\n }\n\n  \n  \n    Update the SDK to v1.4.5 or higher\n  \n"},{"title":"FAQ","id":"http://dev.branch.io/references/android_sdk/#faq","body":"1.) What if Branch goes down or there is a poor connection?At Branch, we live and breath uptime & performance. We’ve developed mechanisms internal to the SDK to deal with network issues. We always call the callbacks with the error parameter describing the issue. If the phone is in airplane mode and the connection is not available, the callbacks are called immediately. If there is a server latency, we timeout after 3 seconds and will retry 4 more times with a 3 second pause in between each. These timeouts are adjustable on the singleton instance by calling: setNetworkTimeout (ms), setRetryCount and setRetryInterval (ms).2.) How can I debug or test the SDK?Just call setDebug() after you get a reference to the Branch singleton. We’ll log all requests. More importantly, we won’t reference the hardware ID of the phone so you can register installs after uninstalling and reinstalling the app.Note: Make sure to remove this line before releasing!3.) Is there any way to start debugging dynamically?Yes. Even if you don’t call setDebug(), you can still start debugging dynamically. When you are testing your app, just put four fingers on your phone screen (or just single touch on simulator) and hold for three seconds, and you should be able to see an indication of start debug session in the log. From then on, all requests will be logged. If you have signed into our dashboard at that time and are in the “Debug” page, this will even start a remote debug session. To enable this feature, make sure you pass “this” as the third parameter when you call initSession in the Activity’s onStart().4.) Facebook deep links seem to not work?Branch uses the Facebook App Links protocol to pass the deep links through to your app from Facebook. Funny enough, if you also have a Facebook app configured in the developer portal and you choose ‘Deep link from feed’, Facebook ignores it’s own protocol. Make sure to uncheck this option in your Facebook app.5.) Why do I not see any installs after I reinstall?We do a lot of smart things to give you an accurate read on the number of installs you actually have. The most common one is associating the user with the actual hardware ID of the phone. If a user uninstalls the app, then reinstalls, we’ll know it’s the same person from before and just register the user as ‘open’ instead of an ‘install.’ To register an install on the same phone again, see FAQ #2 about debugging.6.) Chrome seems to take me to Google Play all the time. Why?Chrome is very picky about opening up the app directly. Chrome utilizes the intent system to try to open up the app, and fails back to the Play Store far too easily. Here are 3 things to verify:\n  \n    Make sure the package name for the test build matches the package registered in the Branch settings and matches the package in Google play.\n  \n  \n    Make sure the URI scheme of the test build matches the Branch settings.\n  \n  \n    Verify that you’ve added the proper host ‘open’ in the Manifest - see here\n  \n7.) Why is the most recent version of Chrome (40+) is showing me a page not found error?The Google Chrome team decided that it didn’t want to try to open up the app if a user manually entered in a link into Chrome - see the history of this issue here. The scope of the bug applies to people who copy and paste a Branch link into Chrome, whereas anyone who clicks on a link in Chrome or something that opens the link in Chrome will properly redirect.We’ve filed an issue plus documented how you can file your own with the Chrome team to get this changed. Please see this document for more ways you can help!"},{"title":"Installation","id":"http://dev.branch.io/references/android_sdk/#installation","body":"Current compiled SDK footprint is 40kb"},{"title":"Install library project","id":"http://dev.branch.io/references/android_sdk/#install-library-project","body":"Import the SDK as a Gradle dependency (for Android Studio):\n* Right click on the main module within your project (this is called ‘app’ by default).\n* Select Open Module Settings.\n* Within the Dependencies tab, click the + button at the bottom of the window and select Library Dependency.\n* Type branch, and hit the enter key to search Maven Central for the Branch SDK Library.\n* Select the latest io.branch.sdk.android:library item listed and accept the changes.See the Android Quick Start Guide for more detail and a screencasted walkthrough.Or download the JAR file from here:\nhttps://s3-us-west-1.amazonaws.com/branchhost/Branch-Android-SDK.zipThe testbed project:\nhttps://s3-us-west-1.amazonaws.com/branchhost/Branch-Android-TestBed.zipOr just clone this project!"},{"title":"Register Your App","id":"http://dev.branch.io/references/android_sdk/#register-your-app","body":"You can sign up for your own app id at https://dashboard.branch.io"},{"title":"Configuration (for tracking)","id":"http://dev.branch.io/references/android_sdk/#configuration-for-tracking","body":"Ideally, you want to use our links any time you have an external link pointing to your app (share, invite, referral, etc) because:\n  Our dashboard can tell you where your installs are coming from\n  Our links are the highest possible converting channel to new downloads and users\n  You can pass that shared data across install to give new users a custom welcome or show them the content they expect to see\nOur linking infrastructure will support anything you want to build. If it doesn’t, we’ll fix it so that it does: just reach out to alex@branch.io with requests."},{"title":"Register an activity for direct deep linking (optional but recommended)","id":"http://dev.branch.io/references/android_sdk/#register-an-activity-for-direct-deep-linking-optional-but-recommended","body":"In your project’s manifest file, you can register your app to respond to direct deep links (yourapp:// in a mobile browser) by adding the second intent filter block. Also, make sure to change yourapp to a unique string that represents your app name.Secondly, make sure that this activity is launched as a singleTask. This is important to handle proper deep linking from other apps like Facebook.Typically, you would register some sort of splash activitiy that handles routing for your app.```xml\n<activity\n\tandroid:name=”com.yourapp.SplashActivity”\n\tandroid:label=”@string/app_name”\n\t\n\tandroid:launchMode=”singleTask”\n\t >\n\t\n\t\t\n\t\t\n\t<!-- Add this intent filter below, and change yourapp to your app name -->\n<intent-filter>\n\t<data android:scheme=\"yourapp\" android:host=\"open\" />\n\t<action android:name=\"android.intent.action.VIEW\" />\n\t<category android:name=\"android.intent.category.DEFAULT\" />\n\t<category android:name=\"android.intent.category.BROWSABLE\" />\n</intent-filter>\n</activity>\n```"},{"title":"Add your branch key to your project","id":"http://dev.branch.io/references/android_sdk/#add-your-branch-key-to-your-project","body":"After you register your app, your branch key can be retrieved on the Settings page of the dashboard. Now you need to add it (them, if you want to do it for both your live and test apps) to your project.\n  Edit your manifest file by adding the following new meta-data\n ```xml\n    \n     \n\n     \n     \n\n     \n     \n \n    ```\n  \n"},{"title":"Initialization","id":"http://dev.branch.io/references/android_sdk/#initialization","body":"Branch must be notified when the app opens and when it closes, so that we know when to query the API for a new deep link. We recently discovered an Android mechanism that was exposed in version 14, that allows us to track behind-the-scenes when the app is opened and closed. It makes the integration a lot easier, so we’ve split it out from the legacy integration.If you support below 14, you’ll want to skip this section and head to this one right below."},{"title":"Initialization to support Android 14+ (4.0+) (easy)","id":"http://dev.branch.io/references/android_sdk/#initialization-to-support-android-14-40-easy","body":"To receive the deep link parameters from the Branch SDK, call initSession and pass in the BranchReferralInitListener. This will return the dictionary of referringParams associated with the link that was just clicked. You can call this anywhere at any time to get the params.Initialize Branch lifecycleStarting from Branch SDK version 1.5.7, there is no need for initialising and closing session with the new automatic session management. Automatic session management can work only with API level 14 and above, so make sure that your minSdkVersion is 14 or above.```xml\n\n```\n\nOnce you do any of the below, there is no need to close or init sessions in your Activities. Branch SDK will do all that for you. You can get your Branch instance at any time as follows.\n\nIf you are not creating or using an Application class throughout your project, all you need to do is declare BranchApp as your application class in your manifest.\n\n```xml\n\n```\n\n\n#### Register deep link router\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.initSession(new BranchReferralInitListener(){\n    @Override\n    public void onInitFinished(JSONObject referringParams, BranchError error) {\n        if (error == null) {\n            // params are the deep linked params associated with the link that the user clicked -> was re-directed to this app\n            // params will be empty if no data found\n            // ... insert custom logic here ...\n        } else {\n            Log.i(\"MyApp\", error.getMessage());\n        }\n    }\n}, this.getIntent().getData(), this);\n```\n\n**NOTE** if you're calling this inside a fragment, please use getActivity() instead of passing in `this`. Also, `this.getIntent().getData()` refers to the data associated with an incoming intent.\n\nNext, you'll need to hook into the `onNewIntent` method specified inside the Activity lifecycle and set the intent. This is required for conformity with Facebook's AppLinks. Verify that the activity you're implementing has *launchMode* set to *singleTask* inside the Manifest declaration. Once that'd done, go to said activity and do something like the following:\n\n```java\n@Override\npublic void onNewIntent(Intent intent) {\n    this.setIntent(intent);\n}\n```\n\nSide note: This is a requirement because of the new Facebook AppLinks change. Facebook doesn't open up the browser anymore and just calls the URI to open the app directly. This prevented Branch clicks from being registered. To support it, we pass that link click id through the URI scheme to Branch, and send that back to the app, creating a 'click' without actually seeing a click. Android does a very poor job of clearing out intents that were previously called, so this helps ensure that once a URI scheme is called and consumed, it won't trigger deep linking anymore.\n\n#### Branch-provided data parameters in initSession callback\n\nPreviously, Branch did not return any information to the app if `initSession` was called but the user hadn't clicked on a link. Now Branch returns explicit parameters every time. Here is a list, and a description of what each represents.\n\n* `~` denotes analytics\n* `+` denotes information added by Branch\n* (for the curious, `$` denotes reserved keywords used for controlling how the Branch service behaves)\n\n\n| **Parameter** | **Meaning**\n| ~channel | The channel on which the link was shared, specified at link creation time\n| ~feature | The feature, such as `invite` or `share`, specified at link creation time\n| ~tags | Any tags, specified at link creation time\n| ~campaign | The campaign the link is associated with, specified at link creation time\n| ~stage | The stage, specified at link creation time\n| ~creation_source | Where the link was created ('API', 'Dashboard', 'SDK', 'iOS SDK', 'Android SDK', or 'Web SDK')\n| +referrer | The referrer for the link click, if a link was clicked\n| +phone_number | The phone number of the user, if the user texted himself/herself the app\n| +is_first_session | Denotes whether this is the first session (install) or any other session (open)\n| +clicked_branch_link | Denotes whether or not the user clicked a Branch link that triggered this session\n\n\n### Initialization to support Android pre-14 (harder)\n\nNote: There is no need to use this section if you use _automatic session management_ as described above and only support minSdkVersion >= 14. Please skip to the [next section](#retrieve-session-install-or-open-parameters) and proceed. This section is only needed if you want to support pre-14.\n\nIf you choose this method, you must call initSession and closeSession in onStart and onStop of _every Activity_ in your app. If you don't close the Branch session, you'll see strange behaviors like deep link parameters not showing up after clicking a link the second time. Branch must know when the app opens or closes to properly handle the deep link parameters retrieval.\n\n#### Init Session\n\n**NOTE** This guide assumes that you’re familiar with the Android UI lifecycle. A single Branch object instance is used per Activity or Fragment, so declare an object at the class-level, and you can call this in every Activity or Fragment where you need to interact with Branch; if it has already be initialised elsewhere in your app, the same instance will be returned.\n\nInside your onStart, do the following, where the variable branch is created in your base activity class (of type Branch). This will initialize a Branch session and return the deep link parameters associated with the link that was just clicked, or an empty dictionary if not.\n\n```java\n@Override\nprotected void onStart() {\n    super.onStart();\n    Branch branch = Branch.getInstance(getApplicationContext());\n    branch.initSession(new BranchReferralInitListener(){\n        @Override\n        public void onInitFinished(JSONObject referringParams, BranchError error) {\n            if (error == null) {\n                // params are the deep linked params associated with the link that the user clicked -> was re-directed to this app\n                // params will be empty if no data found\n                // ... insert custom logic here ...\n            } else {\n                Log.i(\"MyApp\", error.getMessage());\n            }\n        }\n    }, this.getIntent().getData(), this);\n}\n```\n\n**NOTE** if you're calling this inside a fragment, please use getActivity() instead of passing in `this`. Also, `this.getIntent().getData()` refers to the data associated with an incoming intent.\n\nNext, you'll need to hook into the `onNewIntent` method specified inside the Activity lifecycle and set the intent. This is required for conformity with Facebook's AppLinks. Verify that the activity you're implementing has *launchMode* set to *singleTask* inside the Manifest declaration. Once that'd done, go to said activity and do something like the following:\n\n```java\n@Override\npublic void onNewIntent(Intent intent) {\n    this.setIntent(intent);\n}\n```\n\n#### Close session\n\nNote: There is no need to use this method if you use _automatic session management_ as described above and only support minSdkVersion >= 14\n\nEvery activity that will use Branch in some way should include Branch SDK methods in both `onStart()` and `onStop()`. Don't forget `closeSession()` in every activity with Branch! If you don't close the Branch session, you'll see strange behaviors like deep link parameters not showing up after clicking a link the second time.\n\n```java\n@Override\nprotected void onStop() {\n    super.onStop();\n    branch.closeSession();\n}\n```\n\n#### Branch-provided data parameters in initSession callback\n\nPreviously, Branch did not return any information to the app if `initSession` was called but the user hadn't clicked on a link. Now Branch returns explicit parameters every time. Here is a list, and a description of what each represents.\n\n* `~` denotes analytics\n* `+` denotes information added by Branch\n* (for the curious, `$` denotes reserved keywords used for controlling how the Branch service behaves)\n\n\n| **Parameter** | **Meaning**\n| ~channel | The channel on which the link was shared, specified at link creation time\n| ~feature | The feature, such as `invite` or `share`, specified at link creation time\n| ~tags | Any tags, specified at link creation time\n| ~campaign | The campaign the link is associated with, specified at link creation time\n| ~stage | The stage, specified at link creation time\n| ~creation_source | Where the link was created ('API', 'Dashboard', 'SDK', 'iOS SDK', 'Android SDK', or 'Web SDK')\n| +referrer | The referrer for the link click, if a link was clicked\n| +phone_number | The phone number of the user, if the user texted himself/herself the app\n| +is_first_session | Denotes whether this is the first session (install) or any other session (open)\n| +clicked_branch_link | Denotes whether or not the user clicked a Branch link that triggered this session\n\n\n#### Retrieve session (install or open) parameters\n\nThese session parameters will be available at any point later on with this command. If no params, the dictionary will be empty. This refreshes with every new session (app installs AND app opens)\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nJSONObject sessionParams = branch.getLatestReferringParams();\n```\n\n#### Retrieve install (install only) parameters\n\nIf you ever want to access the original session params (the parameters passed in for the first install event only), you can use this line. This is useful if you only want to reward users who newly installed the app from a referral link or something.\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nJSONObject installParams = branch.getFirstReferringParams();\n```\n\n### Persistent identities\n\nOften, you might have your own user IDs, or want referral and event data to persist across platforms or uninstall/reinstall. It's helpful if you know your users access your service from different devices. This where we introduce the concept of an 'identity'.\n\nTo identify a user, just call:\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.setIdentity(your user id); // your user id should not exceed 127 characters\n```\n\n#### Logout\n\nIf you provide a logout function in your app, be sure to clear the user when the logout completes. This will ensure that all the stored parameters get cleared and all events are properly attributed to the right identity.\n\n**Warning** this call will clear the referral credits and attribution on the device.\n\n```java\nBranch.getInstance(getApplicationContext()).logout();\n```\n\n### Register custom events\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.userCompletedAction(\"your_custom_event\"); // your custom event name should not exceed 63 characters\n```\n\nOR if you want to store some state with the event\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.userCompletedAction(\"your_custom_event\", (JSONObject)appState); // same 63 characters max limit\n```\n\nSome example events you might want to track:\n```java\n\"complete_purchase\"\n\"wrote_message\"\n\"finished_level_ten\"\n```\n\n## Generate Tracked, Deep Linking URLs (pass data across install and open)\n\n### Shortened links\n\nThere are a bunch of options for creating these links. You can tag them for analytics in the dashboard, or you can even pass data to the new installs or opens that come from the link click. How awesome is that? You need to pass a callback for when you link is prepared (which should return very quickly, ~ 50 ms to process).\n\nFor more details on how to create links, see the [Branch link creation guide](https://github.com/BranchMetrics/Branch-Integration-Guides/blob/master/url-creation-guide.md)\n\n```java\n// associate data with a link\n// you can access this data from any instance that installs or opens the app from this link (amazing...)\n\nJSONObject dataToInclude = new JSONObject();\ntry {\n\tdataToInclude.put(\"user\", \"Joe\");\n\tdataToInclude.put(\"profile_pic\", \"https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg\");\n\tdataToInclude.put(\"description\", \"Joe likes long walks on the beach...\")\n\n\t// customize the display of the Branch link\n\tdataToInclude.put(\"$og_title\", \"Joe's My App Referral\");\n\tdataToInclude.put(\"$og_image_url\", \"https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg\");\n\tdataToInclude.put(\"$og_description\", \"Join Joe in My App - it's awesome\");\n\n\t// customize the desktop redirect location\n\tdataToInclude.put(\"$desktop_url\", \"http://myapp.com/desktop_splash\");\n} catch (JSONException ex) { }\n\n// associate a url with a set of tags, channel, feature, and stage for better analytics.\n// tags: null or example set of tags could be \"version1\", \"trial6\", etc; each tag should not exceed 64 characters\n// channel: null or examples: \"facebook\", \"twitter\", \"text_message\", etc; should not exceed 128 characters\n// feature: null or examples: Branch.FEATURE_TAG_SHARE, Branch.FEATURE_TAG_REFERRAL, \"unlock\", etc; should not exceed 128 characters\n// stage: null or examples: \"past_customer\", \"logged_in\", \"level_6\"; should not exceed 128 characters\n\nArrayList tags = new ArrayList();\ntags.put(\"version1\");\ntags.put(\"trial6\");\n\n// Link 'type' can be used for scenarios where you want the link to only deep link the first time.\n// Use _null_, _LINK_TYPE_UNLIMITED_USE_ or _LINK_TYPE_ONE_TIME_USE_\n\n// Link 'alias' can be used to label the endpoint on the link. For example: http://bnc.lt/AUSTIN28. Should not exceed 128 characters\n// Be careful about aliases: these are immutable objects permanently associated with the data and associated paramters you pass into the link. When you create one in the SDK, it's tied to that user identity as well (automatically specified by the Branch internals). If you want to retrieve the same link again, you'll need to call getShortUrl with all of the same parameters from before.\n\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.getShortUrl(tags, \"text_message\", Branch.FEATURE_TAG_SHARE, \"level_3\", dataToInclude, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, Branch.BranchError error) {\n\t\tif (error == null) {\n\t\t\t// show the link to the user or share it immediately\n\t\t} else {\n\t\t\tLog.i(\"MyApp\", error.getMessage());\n\t\t}\n\t}\n});\n\n// The callback will return null if the link generation fails (or if the alias specified is aleady taken.)\n```\n\nThere are other methods which exclude tags and data if you don't want to pass those. Explore the autocomplete functionality.\n\n**Note**\nYou can customize the Facebook OG tags of each URL if you want to dynamically share content by using the following _optional keys in the data dictionary_. Please use this [Facebook tool](https://developers.facebook.com/tools/debug/og/object) to debug your OG tags!\n\n| Key | Value\n| --- | ---\n| \"$og_title\" | The title you'd like to appear for the link in social media\n| \"$og_description\" | The description you'd like to appear for the link in social media\n| \"$og_image_url\" | The URL for the image you'd like to appear for the link in social media\n| \"$og_video\" | The URL for the video\n| \"$og_url\" | The URL you'd like to appear\n| \"$og_redirect\" | If you want to bypass our OG tags and use your own, use this key with the URL that contains your site's metadata.\n\nAlso, you do custom redirection by inserting the following _optional keys in the dictionary_:\n\n| Key | Value\n| --- | ---\n| \"$desktop_url\" | Where to send the user on a desktop or laptop. By default it is the Branch-hosted text-me service\n| \"$android_url\" | The replacement URL for the Play Store to send the user if they don't have the app. _Only necessary if you want a mobile web splash_\n| \"$ios_url\" | The replacement URL for the App Store to send the user if they don't have the app. _Only necessary if you want a mobile web splash_\n| \"$ipad_url\" | Same as above but for iPad Store\n| \"$fire_url\" | Same as above but for Amazon Fire Store\n| \"$blackberry_url\" | Same as above but for Blackberry Store\n| \"$windows_phone_url\" | Same as above but for Windows Store\n\nYou have the ability to control the direct deep linking of each link by inserting the following _optional keys in the dictionary_:\n\n| Key | Value\n| --- | ---\n| \"$deeplink_path\" | The value of the deep link path that you'd like us to append to your URI. For example, you could specify \"$deeplink_path\": \"radio/station/456\" and we'll open the app with the URI \"yourapp://radio/station/456?link_click_id=branch-identifier\". This is primarily for supporting legacy deep linking infrastructure.\n| \"$always_deeplink\" | true or false. (default is not to deep link first) This key can be specified to have our linking service force try to open the app, even if we're not sure the user has the app installed. If the app is not installed, we fall back to the respective app store or $platform_url key. By default, we only open the app if we've seen a user initiate a session in your app from a Branch link (has been cookied and deep linked by Branch)\n\n## Referral system rewarding functionality\n\nIn a standard referral system, you have 2 parties: the original user and the invitee. Our system is flexible enough to handle rewards for all users. Here are a couple example scenarios:\n\n1) Reward the original user for taking action (eg. inviting, purchasing, etc)\n\n2) Reward the invitee for installing the app from the original user's referral link\n\n3) Reward the original user when the invitee takes action (eg. give the original user credit when their the invitee buys something)\n\nThese reward definitions are created on the dashboard, under the 'Reward Rules' section in the 'Referrals' tab on the dashboard.\n\nWarning: For a referral program, you should not use unique awards for custom events and redeem pre-identify call. This can allow users to cheat the system.\n\n### Get reward balance\n\nReward balances change randomly on the backend when certain actions are taken (defined by your rules), so you'll need to make an asynchronous call to retrieve the balance. Here is the syntax:\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.loadRewards(new BranchReferralStateChangedListener() {\n\t@Override\n\tpublic void onStateChanged(boolean changed, Branch.BranchError error) {\n\t\t// changed boolean will indicate if the balance changed from what is currently in memory\n\n\t\t// will return the balance of the current user's credits\n\t\tint credits = branch.getCredits();\n\t}\n});\n```\n\n### Redeem all or some of the reward balance (store state)\n\nWe will store how many of the rewards have been deployed so that you don't have to track it on your end. In order to save that you gave the credits to the user, you can call redeem. Redemptions will reduce the balance of outstanding credits permanently.\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.redeemRewards(5);\n```\n\n### Get credit history\n\nThis call will retrieve the entire history of credits and redemptions from the individual user. To use this call, implement like so:\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.getCreditHistory(new BranchListResponseListener() {\n\tpublic void onReceivingResponse(JSONArray list, Branch.BranchError error) {\n\t\tif (error == null) {\n\t\t\t// show the list in your app\n\t\t} else {\n\t\t\tLog.i(\"MyApp\", error.getMessage());\n\t\t}\n\t}\n});\n```\n\nThe response will return an array that has been parsed from the following JSON:\n```json\n[\n    {\n        \"transaction\": {\n                           \"date\": \"2014-10-14T01:54:40.425Z\",\n                           \"id\": \"50388077461373184\",\n                           \"bucket\": \"default\",\n                           \"type\": 0,\n                           \"amount\": 5\n                       },\n        \"event\" : {\n            \"name\": \"event name\",\n            \"metadata\": { your event metadata if present }\n        },\n        \"referrer\": \"12345678\",\n        \"referree\": null\n    },\n    {\n        \"transaction\": {\n                           \"date\": \"2014-10-14T01:55:09.474Z\",\n                           \"id\": \"50388199301710081\",\n                           \"bucket\": \"default\",\n                           \"type\": 2,\n                           \"amount\": -3\n                       },\n        \"event\" : {\n            \"name\": \"event name\",\n            \"metadata\": { your event metadata if present }\n        },\n        \"referrer\": null,\n        \"referree\": \"12345678\"\n    }\n]\n```\n**referrer**\n: The id of the referring user for this credit transaction. Returns null if no referrer is involved. Note this id is the user id in developer's own system that's previously passed to Branch's identify user API call.\n\n**referree**\n: The id of the user who was referred for this credit transaction. Returns null if no referree is involved. Note this id is the user id in developer's own system that's previously passed to Branch's identify user API call.\n\n**type**\n: This is the type of credit transaction\n\n1. _0_ - A reward that was added automatically by the user completing an action or referral\n1. _1_ - A reward that was added manually\n2. _2_ - A redemption of credits that occurred through our API or SDKs\n3. _3_ - This is a very unique case where we will subtract credits automatically when we detect fraud\n\n### Get referral code\n\nRetrieve the referral code created by current user\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.getReferralCode(new BranchReferralInitListener() {\n\t@Override\n\tpublic void onInitFinished(JSONObject referralCode, Branch.BranchError error) {\n\t\ttry {\n\t\t\tString code = referralCode.getString(\"referral_code\");\n\t\t\t// do whatever with code\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n});\n```\n\n### Create referral code\n\nCreate a new referral code for the current user, only if this user doesn't have any existing non-expired referral code.\n\nIn the simplest form, just specify an amount for the referral code.\nThe returned referral code is a 6 character long unique alpha-numeric string wrapped inside the params dictionary with key @\"referral_code\".\n\n**amount** _int_\n: The amount of credit to redeem when user applies the referral code\n\n```java\n// Create a referral code of 5 credits\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.getReferralCode(5, new BranchReferralInitListener() {\n\t@Override\n\tpublic void onInitFinished(JSONObject referralCode, Branch.BranchError error) {\n\t\ttry {\n\t\t\tString code = referralCode.getString(\"referral_code\");\n\t\t\t// do whatever with code\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n});\n```\n\nAlternatively, you can specify a prefix for the referral code.\nThe resulting code will have your prefix, concatenated with a 2 character long unique alpha-numeric string wrapped in the same data structure.\n\n**prefix** _String_\n: The prefix to the referral code that you desire\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.getReferralCode(\"BRANCH\", 5, new BranchReferralInitListener() {  // prefix should not exceed 48 characters\n\t@Override\n\tpublic void onInitFinished(JSONObject referralCode, Branch.BranchError error) {\n\t\ttry {\n\t\t\tString code = referralCode.getString(\"referral_code\");\n\t\t\t// do whatever with code\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n});\n```\n\nIf you want to specify an expiration date for the referral code, you can add an expiration parameter.\nThe prefix parameter is optional here, i.e. it could be getReferralCode(5, expirationDate, new BranchReferralInitListener()...\n\n**expiration** _Date_\n: The expiration date of the referral code\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.getReferralCode(\"BRANCH\", 5, expirationDate, new BranchReferralInitListener() {  // prefix should not exceed 48 characters\n\t@Override\n\tpublic void onInitFinished(JSONObject referralCode, Branch.BranchError error) {\n\t\ttry {\n\t\t\tString code = referralCode.getString(\"referral_code\");\n\t\t\t// do whatever with code\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n});\n```\n\nYou can also tune the referral code to the finest granularity, with the following additional parameters:\n\n**bucket** _String_ (max 63 characters)\n: The name of the bucket to use. If none is specified, defaults to 'default'\n\n**calculation_type**  _int_\n: This defines whether the referral code can be applied indefinitely, or only once per user\n\n1. _REFERRAL_CODE_AWARD_UNLIMITED_ - referral code can be applied continually\n1. _REFERRAL_CODE_AWARD_UNIQUE_ - a user can only apply a specific referral code once\n\n**location** _int_\n: The user to reward for applying the referral code\n\n1. _REFERRAL_CODE_LOCATION_REFERREE_ - the user applying the referral code receives credit\n1. _REFERRAL_CODE_LOCATION_REFERRING_USER_ - the user who created the referral code receives credit\n1. _REFERRAL_CODE_LOCATION_BOTH_ - both the creator and applicant receive credit\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.getReferralCode(\"BRANCH\", 5, expirationDate, \"default\", REFERRAL_CODE_AWARD_UNLIMITED, REFERRAL_CODE_LOCATION_REFERRING_USER, new BranchReferralInitListener() { // prefix should not exceed 48 characters\n\t@Override\n\tpublic void onInitFinished(JSONObject referralCode, Branch.BranchError error) {\n\t\ttry {\n\t\t\tString code = referralCode.getString(\"referral_code\");\n\t\t\t// do whatever with code\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n});\n```\n\n### Validate referral code\n\nValidate if a referral code exists in Branch system and is still valid.\nA code is vaild if:\n\n1. It hasn't expired.\n1. If its calculation type is uniqe, it hasn't been applied by current user.\n\nIf valid, returns the referral code JSONObject in the call back.\n\n**code** _String_\n: The referral code to validate\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.validateReferralCode(code, new BranchReferralInitListener() {\n\t@Override\n\tpublic void onInitFinished(JSONObject referralCode, Branch.BranchError error) {\n\t\ttry {\n\t\t\tif (!referralCode.has(\"error_message\")) {\t\t// will change to using a second callback parameter for error code soon!\n\t\t\t\tString referral_code = referralCode.getString(\"referral_code\");\n\t\t\t\tif (referral_code.equals(code)) {\n\t\t\t\t\t// valid\n\t\t\t\t} else {\n\t\t\t\t\t// invalid (should never happen)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// invalid\n\t\t\t}\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n});\n```\n\n### Apply referral code\n\nApply a referral code if it exists in Branch system and is still valid (see above).\nIf the code is valid, returns the referral code JSONObject in the call back.\n\n**code** _String_\n: The referral code to apply\n\n```java\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.applyReferralCode(code, new BranchReferralInitListener() {\n\t@Override\n\tpublic void onInitFinished(JSONObject referralCode, Branch.BranchError error) {\n\t\ttry {\n\t\t\tif (!referralCode.has(\"error_message\")) {\n\t\t\t\t// applied. you can get the referral code amount from the referralCode JSONObject and deduct it in your UI.\n\t\t\t} else {\n\t\t\t\t// invalid code\n\t\t\t}\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n});\n```\n\n\n\n\n\t\t\t\t"},{"title":"Installation - Branch PhoneGap or Cordova SDK","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#installation---branch-phonegap-or-cordova-sdk","body":""},{"title":"Available in Cordova","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#available-in-cordova","body":"Branch is available through Cordova, to install it simply execute the following line in terminal, while in your project directory:cordova plugin add io.branchmetrics.branchreferral\n"},{"title":"Register you app","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#register-you-app","body":"You can sign up for your own app id at https://dashboard.branch.io"},{"title":"Configuration (for tracking)","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#configuration-for-tracking","body":"Ideally, you want to use our links any time you have an external link pointing to your app (share, invite, referral, etc) because:\n  Our dashboard can tell you where your installs are coming from\n  Our links are the highest possible converting channel to new downloads and users\n  You can pass that shared data across install to give new users a custom welcome or show them the content they expect to see\nOur linking infrastructure will support anything you want to build. If it doesn’t, we’ll fix it so that it does: just reach out to alex@branch.io with requests."},{"title":"Initialize SDK And Register Deep Link Routing Function","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#initialize-sdk-and-register-deep-link-routing-function","body":"Navigate to your *-Info.plist file and find a section that looks something like this:<key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleURLSchemes</key>\n        <array>\n          <string>URL_SCHEME</string>\n        </array>\n      </dict>\n    </array>\nReplace ‘URL_SCHEME’ with the scheme you have chosen. If it’s mycoolapp://, put in mycoolapp. Note, if you have other URI schemes, please have yours as the first <string> element inside the <array>.Next, we must initialize. This is called when an app first initializes a session, ideally in the app delegate. If you created a custom link with your own custom dictionary data, you probably want to know when the user session init finishes, so you can check that data. Think of this callback as your “deep link router”. If your app opens with some data, you want to route the user depending on the data you passed in. Otherwise, send them to a generic install flow.This deep link routing callback is called 100% of the time on init, with your link params or an empty dictionary if none present.```js\nvar branch = window.Branch;\n// Arguments\n// arg1: Your app key can be retrieved on the Settings page of the dashboard\n// arg2: the callback to notify you that the instance has instantiated\nbranch.getInstance(“Your app key here”, function() {// call init session to start a user session and check if that user has been deep linked\n// Arguments\n// arg1: Tell us if this user is eligible to be considered referred - important for referral program integrations\n// arg2: The callback that will be executed when initialization is complete. The parameters returned here will be the key/value pair associated with the link the user \n// clicked or empty if no link was clicked\nbranch.initSession(true, function(params) {\n    if (params) {\n        console.log('Returned params: ' + JSON.stringify(params));\n\n        // handle the deep link data\n    }\n}); });\n```Here is the location of the app key that you will need for the getInstance call above (soon to be deprecated but will always be supported):"},{"title":"Close the session","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#close-the-session","body":"Close sesion must be called whenever the app goes into the background, as it tells the native library that on the next app open, it should check if a new link had been clicked. If you don’t call it, you’ll notice that the deep link parameters will not be delivered reliably.js\nvar branch = window.Branch;\nbranch.closeSession();  \nRetrieve session (install or open) parametersThese session parameters will be available at any point later on with this command. If no params, the dictionary will be empty. This refreshes with every new session (app installs AND app opens)\njs\nvar branch = window.Branch;\nbranch.getLatestReferringParams(function(data) {\n   // do something with the latest session parameters\n});\nRetrieve install (install only) parametersIf you ever want to access the original session params (the parameters passed in for the first install event only), you can use this line. This is useful if you only want to reward users who newly installed the app from a referral link or something.\njs\nvar branch = window.Branch;\nbranch.getFirstReferringParams(function(data) {\n    // do something with the data associated with the first user referral \n});\n"},{"title":"Persistent identities","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#persistent-identities","body":"Often, you might have your own user IDs, or want referral and event data to persist across platforms or uninstall/reinstall. It’s helpful if you know your users access your service from different devices. This where we introduce the concept of an ‘identity’.To identify a user, just call:\njs\nvar branch = window.Branch;\nbranch.setIdentity(\"user_id_14512\", null);\nLogoutIf you provide a logout function in your app, be sure to clear the user when the logout completes. This will ensure that all the stored parameters get cleared and all events are properly attributed to the right identity.Warning this call will clear the referral credits and attribution on the device.objc\nvar branch = window.Branch;\nbranch.logout();\n"},{"title":"Register custom events","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#register-custom-events","body":"js\nvar branch = window.Branch;\nbranch.userCompletedAction(\"your_custom_event\", null);\nOR if you want to store some state with the eventjs\nvar branch = window.Branch;\nbranch.userCompletedAction(\"your_custom_event\", { \"time\":135512331, \"sessions\":12 });\nSome example events you might want to track:\njs\n\"complete_purchase\"\n\"wrote_message\"\n\"finished_level_ten\"\n"},{"title":"Generate Tracked, Deep Linking URLs (pass data across install and open)","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#generate-tracked-deep-linking-urls-pass-data-across-install-and-open","body":""},{"title":"Shortened links","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#shortened-links","body":"There are a bunch of options for creating these links. You can tag them for analytics in the dashboard, or you can even pass data to the new installs or opens that come from the link click. How awesome is that? You need to pass a callback for when you link is prepared (which should return very quickly, ~ 50 ms to process).For more details on how to create links, see the Branch link creation guide```js\n// associate data with a link\n// you can access this data from any instance that installs or opens the app from this link (amazing…)var params = {;\n    “user”: “Joe”,\n    “profile_pic”: “https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg”,\n    “description”: “Joe likes long walks on the beach…”\n}// associate a url with a set of tags, channel, feature, and stage for better analytics.\n// channel: null or examples: “facebook”, “twitter”, “text_message”, etc\n// feature: null or examples: “sharing”, “referral”, “unlock”, etcvar branch = window.Branch;\nbranch.getShortUrl(params, “facebook”, “sharing”, function(url) {\n   // share the URL on Facebook \n});\n// The callback will return null if the link generation fails (or if the alias specified is aleady taken.)\n```There are other methods which exclude tag and data if you don’t want to pass those. Explore Xcode’s autocomplete functionality.Note\nYou can customize the Facebook OG tags of each URL if you want to dynamically share content by using the following optional keys in the data dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$og_title”\n      The title you’d like to appear for the link in social media\n    \n    \n      “$og_description”\n      The description you’d like to appear for the link in social media\n    \n    \n      “$og_image_url”\n      The URL for the image you’d like to appear for the link in social media\n    \n    \n      “$og_video”\n      The URL for the video\n    \n    \n      “$og_url”\n      The URL you’d like to appear\n    \n    \n      “$og_app_id”\n      Your OG app ID. Optional and rarely used.\n    \n  \nAlso, you do custom redirection by inserting the following optional keys in the dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$desktop_url”\n      Where to send the user on a desktop or laptop. By default it is the Branch-hosted text-me service\n    \n    \n      “$android_url”\n      The replacement URL for the Play Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ios_url”\n      The replacement URL for the App Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ipad_url”\n      Same as above but for iPad Store\n    \n    \n      “$fire_url”\n      Same as above but for Amazon Fire Store\n    \n    \n      “$blackberry_url”\n      Same as above but for Blackberry Store\n    \n    \n      “$windows_phone_url”\n      Same as above but for Windows Store\n    \n  \nYou have the ability to control the direct deep linking of each link by inserting the following optional keys in the dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$deeplink_path”\n      The value of the deep link path that you’d like us to append to your URI. For example, you could specify “$deeplink_path”: “radio/station/456” and we’ll open the app with the URI “yourapp://radio/station/456?link_click_id=branch-identifier”. This is primarily for supporting legacy deep linking infrastructure.\n    \n    \n      “$always_deeplink”\n      true or false. (default is not to deep link first) This key can be specified to have our linking service force try to open the app, even if we’re not sure the user has the app installed. If the app is not installed, we fall back to the respective app store or $platform_url key. By default, we only open the app if we’ve seen a user initiate a session in your app from a Branch link (has been cookied and deep linked by Branch)\n    \n  \n"},{"title":"Referral system rewarding functionality","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#referral-system-rewarding-functionality","body":"In a standard referral system, you have 2 parties: the original user and the invitee. Our system is flexible enough to handle rewards for all users. Here are a couple example scenarios:1) Reward the original user for taking action (eg. inviting, purchasing, etc)2) Reward the invitee for installing the app from the original user’s referral link3) Reward the original user when the invitee takes action (eg. give the original user credit when their the invitee buys something)These reward definitions are created on the dashboard, under the ‘Reward Rules’ section in the ‘Referrals’ tab on the dashboard.Warning: For a referral program, you should not use unique awards for custom events and redeem pre-identify call. This can allow users to cheat the system."},{"title":"Get reward balance","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#get-reward-balance","body":"Reward balances change randomly on the backend when certain actions are taken (defined by your rules), so you’ll need to make an asynchronous call to retrieve the balance. Here is the syntax:js\nvar branch = window.Branch;\nbranch.loadRewards(function(changed) {\n    // changed will indicate whether credits were updated\n    if (changed) {\n        // Pass the bucket name to retrieve the current balance of credits\n        var credits = branch.getCredits(\"default\");\n    }\n});\n"},{"title":"Redeem all or some of the reward balance (store state)","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#redeem-all-or-some-of-the-reward-balance-store-state","body":"We will store how many of the rewards have been deployed so that you don’t have to track it on your end. In order to save that you gave the credits to the user, you can call redeem. Redemptions will reduce the balance of outstanding credits permanently.js\nvar branch = window.Branch;\nbranch.redeemRewards(5, \"default\");\n"},{"title":"Get credit history","id":"http://dev.branch.io/references/cordova_phonegap_sdk/#get-credit-history","body":"This call will retrieve the entire history of credits and redemptions from the individual user. To use this call, implement like so:js\nvar branch = window.Branch;\nbranch.getCreditHistory(function(history) {\n    // retrieve and display the credit history\n    // example transaction opbject below\n});\n\n  The response will return an array that has been parsed from the following JSON:\n  ```json\n  [\n      {\n          “transaction”: {\n                             “date”: “2014-10-14T01:54:40.425Z”,\n                             “id”: “50388077461373184”,\n                             “bucket”: “default”,\n                             “type”: 0,\n                             “amount”: 5\n                         },\n          “referrer”: “12345678”,\n          “referree”: null\n      },\n      {\n          “transaction”: {\n                             “date”: “2014-10-14T01:55:09.474Z”,\n                             “id”: “50388199301710081”,\n                             “bucket”: “default”,\n                             “type”: 2,\n                             “amount”: -3\n                         },\n          “referrer”: null,\n          “referree”: “12345678”\n      }\n  ]\n  ```\n  referrer\n  The id of the referring user for this credit transaction. Returns null if no referrer is involved. Note this id is the user id in developer’s own system that’s previously passed to Branch’s identify user API call.\n  referree\n  The id of the user who was referred for this credit transaction. Returns null if no referree is involved. Note this id is the user id in developer’s own system that’s previously passed to Branch’s identify user API call.\n  type\n  This is the type of credit transaction\n\n  0 - A reward that was added automatically by the user completing an action or referral\n  1 - A reward that was added manually\n  2 - A redemption of credits that occurred through our API or SDKs\n  3 - This is a very unique case where we will subtract credits automatically when we detect fraud\n"},{"title":"2015-5-5 Facebook Updates","id":"http://dev.branch.io/references/developer_updates/#facebook-updates","body":"\n        \n      Facebook has made a couple of changes in the past two weeks that may impact you.First, Facebook is starting to reject links to pages whose og:image tag points to an image hosted on some S3 buckets.It sounds odd, but it resulted in these posts being marked as spam or missing the preview image. We have already pushed a change to our backend and moved all images to a new location, so any links you generate with us going forward should be good to go. Any links previously shared to Facebook may need to be scraped again via the Facebook Object Debugger–if you plan to reuse those links. Past shares are not impacted, and non-cached links are not impacted.This issue manifests itself two different ways, depending on where the page was shared. If shared on desktop, the user has to verify that they are human before posting (done by selecting certain images). If shared on mobile, no verfication is done but then the link is marked as spam and anyone clicking on the link will be warned about “Leaving Facebook”.Action: if you have images hosted on S3 that are referenced by an og:image tag, go to the Facebook Object Debugger, check the scraped information for those pages with the og:image tags, and re-scrape if necessary. If you are able to share links via desktop web without having to verify that you are a human (you’ll know), you’re not impacted. Also, consider trying to share your links then filing a bug report via the link in the screenshot below:\n        \n      Second, Facebook’s latest app update on iOS pushed some sort of change that impacts the UIActivityViewController. Facebook no longer allows NSStrings to be shared. Our Branch-provided subclass of UIActivityItemProvider returned an NSString as a placeholder, so the Facebook option stopped showing up at all in the UIActivityViewController. We just pushed a fix to the SDK so that the placeholder item is an NSURL.Related, even with an NSURL, you can no longer pre-populate text when sharing to Facebook via the UIActivityViewController. Any strings passed in will be ignored. This has apparently been a violation of Facebook’s Terms of Service but they weren’t enforcing it on iOS up until now.Action: if you use the Branch UIActivityItemProvider, update your iOS SDK to the latest version. If you use normal UIActivityItemProviders, make sure at least one of them returns an NSURL as both the placeholder and the item, otherwise your users will not be able to share to Facebook.Please let us know if you have questions – support@branchmetrics.io."},{"title":"Creating a Deep Linking URL","id":"http://dev.branch.io/references/http_api/#creating-a-deep-linking-url","body":"For more details on how to create links, see the Branch link creation guideEndpointPOST /v1/url\nContent-Type: application/json\nParameters\n  branch_key required\n  The Branch key of the originating app.\nFunctional\n  data optional\n  The dictionary to embed with the link. Accessed as session or install parameters from the SDK.\nNote\nYou can customize the Facebook OG tags of each URL if you want to dynamically share content by using the following optional keys in the data dictionary. Please use this Facebook tool to debug your OG tags!\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$og_title”\n      The title you’d like to appear for the link in social media\n    \n    \n      “$og_description”\n      The description you’d like to appear for the link in social media\n    \n    \n      “$og_image_url”\n      The URL for the image you’d like to appear for the link in social media\n    \n    \n      “$og_video”\n      The URL for the video\n    \n    \n      “$og_url”\n      The URL you’d like to appear\n    \n    \n      “$og_redirect”\n      If you want to bypass our OG tags and use your own, use this key with the URL that contains your site’s metadata.\n    \n  \nAlso, you can set custom redirection by inserting the following optional keys in the dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$desktop_url”\n      Where to send the user on a desktop or laptop. By default it is the Branch-hosted text-me service\n    \n    \n      “$android_url”\n      The replacement URL for the Play Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ios_url”\n      The replacement URL for the App Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ipad_url”\n      Same as above but for iPad Store\n    \n    \n      “$fire_url”\n      Same as above but for Amazon Fire Store\n    \n    \n      “$blackberry_url”\n      Same as above but for Blackberry Store\n    \n    \n      “$windows_phone_url”\n      Same as above but for Windows Store\n    \n    \n      “$after_click_url”\n      When a user returns to the browser after going to the app, take them to this URL. iOS only; Android coming soon\n    \n  \nYou have the ability to control the direct deep linking of each link as well:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$deeplink_path”\n      The value of the deep link path that you’d like us to append to your URI. For example, you could specify “$deeplink_path”: “radio/station/456” and we’ll open the app with the URI “yourapp://radio/station/456?link_click_id=branch-identifier”. This is primarily for supporting legacy deep linking infrastructure.\n    \n    \n      “$always_deeplink”\n      true or false. (default is not to deep link first) This key can be specified to have our linking service force try to open the app, even if we’re not sure the user has the app installed. If the app is not installed, we fall back to the respective app store or $platform_url key. By default, we only open the app if we’ve seen a user initiate a session in your app from a Branch link (has been cookied and deep linked by Branch).\n    \n  \n\n  alias optional (max 128 characters)\n  Instead of our standard encoded short url, you can specify the alias of the link bnc.lt/alexaustin. Aliases are enforced to be unique per domain (bnc.lt, yourapp.com, etc). Be careful, link aliases are unique, immutable objects that cannot be deleted.\nNOTE: If you POST to the this endpoint with the same alias, and a matching set of other POST parameters to an existing aliased link, the original will be returned to you. If it clashes and you don’t specify a match, will return a HTTP 409 error.\n  type optional\n  ADVANCED: \n- Set type to 1, to make the URL a one-time use URL. It won’t deep link after 1 successful deep link.\n- Set type to 2 to make a Marketing URL. These are URLs that are displayed under the Marketing tab on the dashboard.\n- default is set to 0, which is the standard Branch links created via our SDK.git\n  duration optional\n  ADVANCED: In seconds. Only set this key if you want to override the match duration for deep link matching. This is the time that Branch allows a click to remain outstanding and be eligible to be matched with a new app session. This is default set to 7200 (2 hours)\nTracking\n  identity  optional (max 127 characters)\n  The identity used to identify the user. If the link is not tied to an identity, there’s no need to specify an identity.\n  tags optional (each max 64 characters)\n  An array of strings, which are custom tags in which to categorize the links by. Recommended syntax: “tags”:[t1,t2,t3].\n  campaign optional (max 128 characters)\n  The campaign in which the link will be used. eg: “new_product_launch”, etc.\n  feature optional (max 128 characters)\n  The feature in which the link will be used. eg: “invite”, “referral”, “share”, “gift”, etc.\n  channel optional (max 128 characters)\n  The channel in which the link will be shared. eg: “facebook”, “text_message”.\n  stage optional (max 128 characters)\n  A string value that represents the stage of the user in the app. eg: “level1”, “logged_in”, etc.\nReturnsjs\n  {\n    'url': 'http://bnc.lt/l/deeplink-randomID'\n  }\n"},{"title":"Bulk creating Deep Linking URLs","id":"http://dev.branch.io/references/http_api/#bulk-creating-deep-linking-urls","body":"For more details on how to create links, see the Branch link creation guideEndpointsh\n  POST /v1/url/bulk/:branch_key\n  Content-Type: application/json\nParametersA json array of pramameters from Creating a Deep Linking URL. (Note: there is a 100KB limit on the request payload size)js\n  [\n   { 'channel': 'branch' },\n   { 'channel': \"fb\", 'data': '{ \"$og_title\": \"deep linking\" }' }\n  ]\nReturnsAn array of deep linking urls and/or errors in case invalid params.js\n  [\n   { 'url': 'http://bnc.lt/l/deeplink-randomID' },\n   { 'error': 'error message' }  // in case of error\n  ]\n"},{"title":"Structuring a ‘dynamic’ Deeplink","id":"http://dev.branch.io/references/http_api/#structuring-a-dynamic-deeplink","body":"This should be used for situations where the longer link is okay and you want to create links quickly without a POST to the API.Endpointsh\n  GET https://bnc.lt/a/<branch_key>?AnyOptionalQueryParamsBelow\n\n  Example:\nhttps://bnc.lt/a/key_live_jbgnjxvlhSb6PGH23BhO4hiflcp3y7ky?data=ExampleBase64EncodedString&has_app=no&channel=facebook&stage=level4&feature=affiliate\nParameters\n  branch_key required\n  The Branch key of the originating app\nFunctional\n  data  optional\n  Default is { }. Base 64 Encoded JSON dictionary of parameters to pass into the app. Default redirects can be overridden with $ios_url, $android_url and $desktop_url. The appearance in social media can be customized with the $og_title, $og_description and $og_image_url keys.\n  has_app optional\n  Default is ‘no’. Possible values are ‘yes’ or ‘no’. If you specify ‘yes’, we’ll try to open up the app immediately instead of sending the clicker to the app store.\n  duration optional\n  ADVANCED: In seconds. Only set this key if you want to override the match duration for deep link matching. This is the time that Branch allows a click to remain outstanding and be eligible to be matched with a new app session. This is default set to 7200 (2 hours)\n  type optional\n  ADVANCED: Default is 0. Possible values are 0 or 1. A type of 0 means that the link will pass parameters through install any time that it is clicked and followed by an app session. A type of 1 is a security measure, which prevents the link from passing parameters into the app after the first successful deep link.\nTracking\n  tags optional (each max 64 characters)\n  An array of strings, which are custom tags in which to categorize the links by. Recommended syntax: ?tags=a&tags=b&tags=c\n  campaign optional (max 128 characters)\n  The campaign in which the link will be used. eg: “new_product_launch”, etc.\n  feature optional (max 128 characters)\n  The feature in which the link will be used. eg: “invite”, “referral”, “share”, “gift”, etc.\n  channel optional (max 128 characters)\n  The channel in which the link will be shared. eg: “facebook”, “text_message”.\n  stage optional (max 128 characters)\n  A string value that represents the stage of the user in the app. eg: “level1”, “logged_in”, etc.\n"},{"title":"Getting Credit Count","id":"http://dev.branch.io/references/http_api/#getting-credit-count","body":"Endpointsh\n  GET /v1/credits?branch_key=[branch key]&identity=[identity]\nParameters\n  branch_key required\n  The Branch key of the originating app.\n  identity  required (max 127 characters)\n  The identity used to identify the user.\nReturnssh\n  {\n    'default': 15,\n    'other bucket': 4\n  }\n"},{"title":"Adding Credits","id":"http://dev.branch.io/references/http_api/#adding-credits","body":"EndpointPOST /v1/credits\nContent-Type: application/json\nParameters\n  branch_key required\n  The Branch key of the originating app.\n  branch_secret required\n  The Branch secret of the originating app.\n  identity  required (max 127 characters)\n  The identity used to identify the user.\n  amount required\n  The amount of credit to award.\n  bucket optional (max 63 characters)\n  The name of the bucket to use. If none is specified, defaults to ‘default’.\nReturns{ success: true }"},{"title":"Redeeming Credits","id":"http://dev.branch.io/references/http_api/#redeeming-credits","body":"Endpointsh\n  POST /v1/redeem\n  Content-Type: application/json\nParameters\n  branch_key required\n  The Branch key of the originating app.\n  branch_secret required\n  The Branch secret of the originating app.\n  identity  required (max 127 characters)\n  The identity used to identify the user.\n  amount required\n  The amount of credit to redeem. Must be an integer.\n  bucket optional (max 63 characters)\n  The name of the bucket to use. If none is specified, defaults to ‘default’.\nReturnsNothing if successful, or 402 error if not enough credits were available to redeem (this operation is atomic, meaning if two callers try and redeem the same user’s credits at the same time, only one will succeed)."},{"title":"Reconciling Credits","id":"http://dev.branch.io/references/http_api/#reconciling-credits","body":"If fraud is detected, e.g. users tricking the system to get more credits by referring him/herself, call this API to reconcile the amount from the user’s credit balance. If the reconciliation amount is greater than the user’s credit balance, the difference amount will be used and the credit balanced will be set to zero.Endpointsh\n  POST /v1/reconcile\n  Content-Type: application/json\nParameters\n  branch_key required\n  The Branch key of the originating app.\n  branch_secret required\n  The Branch secret of the originating app.\n  identity  required (max 127 characters)\n  The identity used to identify the user.\n  amount required\n  The amount of credit to redeem.\n  bucket optional (max 63 characters)\n  The name of the bucket to use. If none is specified, defaults to ‘default’.\nReturnsThe credit transaction JSON object for the reconciliationsh\n  {\n    \"app_id\": \"55696551485375420\",\n    \"identity_id\": \"55705482546906094\",\n    \"date\": \"2015-02-13T02:27:12.477Z\",\n    \"id\": \"94607584564086264\",\n    \"bucket\": \"default\",\n    \"type\": 4,\n    \"amount\": -5\n  }\n"},{"title":"Getting the Credit History","id":"http://dev.branch.io/references/http_api/#getting-the-credit-history","body":"Endpointsh\n  GET /v1/credithistory?branch_key=[branch key]&identity=[identity]\nParameters\n  branch_key required\n  The Branch key of the originating app.\n  identity required (max 127 characters)\n  The user ID to for which to retrieve credit history.\n  bucket optional (max 63 characters)\n  The bucket from which to retrieve credit transactions.\n  begin_after_id optional\n  The credit transaction id of the last item in the previous retrieval. Retrieval will start from the transaction next to it. If none is specified, retrieval starts from the very beginning in the transaction history, depending on the order.\n  length optional\n  The number of credit transactions to retrieve. If none is specified, up to 100 credit transactions will be retrieved.\n  direction optional\n  The order of credit transactions to retrieve. If direction is “asc”, retrieval is in least recent first order; If direction is “desc”, or if none is specified, retrieval is in most recent first order.\nReturnsjs\n  [\n    {\n      \"transaction\": {\n                       \"date\": \"2014-10-14T01:54:40.425Z\",\n                       \"id\": \"50388077461373184\",\n                       \"bucket\": \"default\",\n                       \"type\": 0,\n                       \"amount\": 5\n                     },\n      \"event\" : {\n        \"name\": \"event name\",\n        \"metadata\": { your event metadata if present }\n      },\n      \"referrer\": \"12345678\",\n      \"referree\": null\n  },\n  {\n      \"transaction\": {\n                       \"date\": \"2014-10-14T01:55:09.474Z\",\n                       \"id\": \"50388199301710081\",\n                       \"bucket\": \"default\",\n                       \"type\": 2,\n                       \"amount\": -3\n                     },\n      \"event\" : {\n        \"name\": \"event name\",\n        \"metadata\": { your event metadata if present }\n      },\n      \"referrer\": null,\n      \"referree\": \"12345678\"\n    }\n  ]\n\n  referrer\n  The id of the referring user for this credit transaction. Returns null if no referrer is involved. Note this id is the user id in developer’s own system that’s previously passed to Branch’s identify user API call.\n  referree\n  The id of the user who was referred for this credit transaction. Returns null if no referree is involved. Note this id is the user id in developer’s own system that’s previously passed to Branch’s identify user API call.\n  id\n  The id can be used and passed as the “begin_after_id” parameter in the subsequent API call to retrieve the next batch of credit transactions.\n  type\n  This is the type of credit transaction.\n\n  0 - A reward that was added automatically by the user completing an action or referral.\n  1 - A reward that was added manually.\n  2 - A redemption of credits that occurred through our API or SDKs.\n  3 or 5 - This is a very unique case where we will subtract credits .automatically when we detect fraud.\n  4 - This is the type when you’ve called ‘/v1/reconcile’ to reconcile credits manually\n"},{"title":"Creating a Remote Event for Funnels","id":"http://dev.branch.io/references/http_api/#creating-a-remote-event-for-funnels","body":"EndpointPOST /v1/event\nContent-Type: application/json\nParameters\n  branch_key required\n  The Branch key of the originating app.\n  branch_secret required\n  The Branch secret of the originating app.\n  identity  required (max 127 characters)\n  The identity used to identify the user.\n  event required (max 63 characters)\n  The event to associate with this identity.\n  metadata optional\n  Any associated parameters to be stored with the event. 1 layer JSON format. (max 255 characters for both keys and values)\nReturnsnothing"},{"title":"Creating a Dynamic Reward Rule","id":"http://dev.branch.io/references/http_api/#creating-a-dynamic-reward-rule","body":"Note: Rules created via the API will not appear on the dashboard. This was done intentionally so as not to overwhelm the dashboard with automatically created rules.Endpointsh\n    POST /v1/eventresponse\n    Content-Type: application/json\nParameters\n  branch_key required\n  The Branch key of the originating app.\n  branch_secret required\n  The Branch secret of the originating app.\n  calculation_type  required\n  This defines whether the rule can reward a user indefinitely, or a single time.\n\n  0 - Reward a user continually for the action.\n  1 - User is only eligible for single reward.\n\n  location required\n  The user to reward for the action.\n\n  0 - Any user completing the action receives credit.\n  1 - The user who referred the user completing the action receives credit.\n  4 - The user completing the action who was referred by another user receives the credit.\n\n  type required\n  The type of event response.\n\n  “web_hook” - Register for a web hook callback when the criteria are met\n  “credit” - For referral based rewards, reward the user who caused the referred install.\n\n  event required (max 63 characters)\n  The event string to trigger the reward, eg “completed_purchase”.\n  metadata required\n  The metadata to define the event response, in JSON format.\nFor web hooks, use the following keys:\n  “web_hook_url” - The url to call when an event occurs.\nFor credits, use the following keys;\n  “amount” - the amount to reward the user\n  “bucket” - the bucket to deposit the amount into\n\n  filter optional\n  This is the set of keys and values that must be contained in the event metadata for this reward to be issued, in JSON format.\nReturnsnothing"},{"title":"Getting Current Branch App Config","id":"http://dev.branch.io/references/http_api/#getting-current-branch-app-config","body":"EndpointGET /v1/app/:app_id?user_id=[user id]Parameters\n  app_id required\n  The id of the originating app.\n  user_id required\n  The dashboard user id. This will be sent to you by the Branch team to give you access to this API.\nReturns```js\n  {\n    app_key: “the app key”,\n    creation_date : “date app was created”,app_name: \"name of the app\",\n\ndev_name: \"main contact name\",\ndev_email: \"main contact email\",\ndev_phone_number: \"main contact phone\",\n\nandroid_url: \"url of Android store, or namespace (com.android.myapp)\",\nandroid_uri_scheme: \"the Android URI scheme\",\n\nios_url: \"url of iOS store, or app id (id512451233)\",\nios_uri_scheme:  \"the iOS URI scheme\",\nios_store_country: \"the country code of the app, default to US\",\n\nweb_url: \"backup website if URLs are null\",\n\nshort_url_domain: \"white labeled domain for short links\",\n\ntext_message: \"text message to use,  will be replaced with short link\",\n\nog_app_id: \"optional default Open Graph (OG) app id\",\nog_title: \"optional default OG title\",\nog_image_url: \"optional default OG image URL\",\nog_description: \"optional default OG description\"   } ```\n"},{"title":"Creating a New Branch App Config","id":"http://dev.branch.io/references/http_api/#creating-a-new-branch-app-config","body":"Endpointjs\n  POST /v1/app\n  Content-Type: application/json\nParameters\n  user_id required\n  The dashboard user id. This will be sent to you by the Branch team to give you access to this API.\n  app_name required (max 255 characters)\n  The name of the app.\n  dev_name required (max 255 characters)\n  The main contact developer name.\n  dev_email required (max 255 characters)\n  The main contact developer email.\nNote: we’ll send an invite message to this email upon account creation.\n  android_url optional\n  The url of the Android store, or namespace (com.android.myapp).\n  android_uri_scheme optional\n  The Android URI scheme.\n  ios_url optional\n  The url of iOS store, or app id (id512451233)\n  ios_uri_scheme optional\n  The iOS URI scheme.\n  ios_store_country optional (max 255 characters)\n  The country code of the app, default to US.\n  web_url optional\n  Backup website if URLs are null.\n  text_message optional (max 255 characters)\n  Text message to use for text-me feature,  will be replaced with short link.\n  og_app_id optional (max 255 characters)\n  Default Open Graph (OG) app id.\n  og_title optional (max 255 characters)\n  Default OG title to be used with links.\n  og_description optional (max 255 characters)\n  Default OG description to be used with links.\n  og_image_url optional (max 255 characters)\n  Default OG image URL to be used with links.\nReturns```js\n  {\n    app_key: “the app key”,\n    creation_date : “date app was created”,app_name: \"name of the app\",\n\ndev_name: \"main contact name\",\ndev_email: \"main contact email\",\ndev_phone_number: \"main contact phone\",\n\nandroid_url: \"url of Android store, or namespace (com.android.myapp)\",\nandroid_uri_scheme: \"the Android URI scheme\",\n\nios_url: \"url of iOS store, or app id (id512451233)\",\nios_uri_scheme:  \"the iOS URI scheme\",\nios_store_country: \"the country code of the app, default to US\",\n\nweb_url: \"backup website if URLs are null\",\n\nshort_url_domain: \"white labeled domain for short links\",\n\ntext_message: \"text message to use,  will be replaced with short link\",\n\nog_app_id: \"optional default Open Graph (OG) app id\",\nog_title: \"optional default OG title\",\nog_image_url: \"optional default OG image URL\",\nog_description: \"optional default OG description\"   } ```\n"},{"title":"Updating a Branch App Config","id":"http://dev.branch.io/references/http_api/#updating-a-branch-app-config","body":"Endpointsh\n  PUT /v1/app/:app_id\n  Content-Type: application/json\nParameters\n  app_id required\n  The id of the originating app.\n  user_id required\n  The dashboard user id. This will be sent to you by the Branch team to give you access to this API.\n  app_name optional (max 255 characters)\n  The name of the app.\n  dev_name optional (max 255 characters)\n  The main contact developer name.\n  dev_email optional (max 255 characters)\n  The main contact developer email.\n  android_url optional\n  The url of the Android store, or namespace (com.android.myapp).\n  android_uri_scheme optional\n  The Android URI scheme.\n  ios_url optional\n  The url of iOS store, or app id (id512451233)\n  ios_uri_scheme optional\n  The iOS URI scheme.\n  ios_store_country optional (max 255 characters)\n  The country code of the app, default to US.\n  web_url optional\n  Backup website if URLs are null.\n  text_message optional (max 255 characters)\n  The text message to use for text-me feature,  will be replaced with short link.\n  og_app_id optional (max 255 characters)\n  Default Open Graph (OG) app id.\n  og_title optional (max 255 characters)\n  Default OG title to be used with links.\n  og_description optional (max 255 characters)\n  Default OG description to be used with links.\n  og_image_url optional (max 255 characters)\n  Default OG image URL to be used with links.\nReturns```js\n  {\n    app_key: “the app key”,\n    creation_date : “date app was created”,app_name: \"name of the app\",\n\ndev_name: \"main contact name\",\ndev_email: \"main contact email\",\ndev_phone_number: \"main contact phone\",\n\nandroid_url: \"url of Android store, or namespace (com.android.myapp)\",\nandroid_uri_scheme: \"the Android URI scheme\",\n\nios_url: \"url of iOS store, or app id (id512451233)\",\nios_uri_scheme:  \"the iOS URI scheme\",\nios_store_country: \"the country code of the app, default to US\",\n\nweb_url: \"backup website if URLs are null\",\n\nshort_url_domain: \"white labeled domain for short links\",\n\ntext_message: \"text message to use,  will be replaced with short link\",\n\nog_app_id: \"optional default Open Graph (OG) app id\",\nog_title: \"optional default OG title\",\nog_image_url: \"optional default OG image URL\",\nog_description: \"optional default OG description\"   } ```\n"},{"title":"Get/Create a Branch Referral Code","id":"http://dev.branch.io/references/http_api/#getcreate-a-branch-referral-code","body":"This API uses branch key and identity to retrieve a referral code; if none created yet, it uses the other params to create one and return it.Endpointsh\n  POST /v1/referralcode\n  Content-Type: application/json\nParameters\n  branch_key required\n  The Branch key of the originating app.\n  identity  required (max 127 characters)\n  The referral code creator’s identity.\n  amount required (for create)\n  The amount of credit to redeem when user applies the referral code.\n  bucket optional (max 63 characters)\n  The name of the bucket to use. If none is specified, defaults to ‘default’.\n  expiration optional\n  The expiration date of the referral code.\n  prefix optional (max 48 characters)\n  The prefix to the referral code that you desire.\n  calculation_type  required (for create)\n  This defines whether the referral code can be applied indefinitely, or only once per user.\n\n  0 - referral code can be applied continually\n  1 - a user can only apply a specific referral code once\n\n  location required (for create)\n  The user to reward for applying the referral code.\n\n  0 - The user applying the referral code receives credit.\n  2 - The user who created the referral code receives credit.\n  3 - Both the user who created the referral code and the applying user receive credit.\nReturnsjs\n  {\n    referral_code: \"The referral code. Without prefix, it's a 6 character long unique alpha-numeric string; with prefix, it's the prefix concatenated with a 2 character long unique alpha-numeric string\",\n    app_id: \"The app key\",\n    metadata: {\n      bucket: \"The name of the bucket used for the referral code\",\n      amount: \"The amount of the referral code\",\n    },\n    expiration: \"The expiration date of the referral code\",\n    calculation_type: \"Whether the referral code can be applied indefinitely, or only once per user\",\n    location: \"Whether to reward the creator of the referral code or the one what applies it\"\n  }\n"},{"title":"Validate a Branch Referral Code","id":"http://dev.branch.io/references/http_api/#validate-a-branch-referral-code","body":"Endpointsh\n  POST /v1/referralcode/:code\n  Content-Type: application/json\nParameters\n  code required\n  The referral code to validate. NOTE: this param is passed via the URL structure.\n  branch_key required\n  The Branch key of the originating app.\n  identity  required (max 127 characters)\n  The identity used to identify the user.\nReturnsIf the code is a valid referral code, and this user hasn’t applied it in case of “unique” calculation_type, the response is:js\n  {\n    referral_code: \"The referral code. Without prefix, it's a 6 character long unique alpha-numeric string; with prefix, it's the prefix concatenated with a 4 character long unique alpha-numeric string\",\n    app_id: \"The app key\",\n    metadata: {\n      bucket: \"The name of the bucket used for the referral code\",\n      amount: \"The amount of the referral code\",\n    },\n    expiration: \"The expiration date of the referral code\",\n    calculation_type: \"Whether the referral code can be applied indefinitely, or only once per user\",\n    location: \"Whether to reward the creator of the referral code or the one what applies it\"\n  }\n"},{"title":"Apply a Branch Referral Code","id":"http://dev.branch.io/references/http_api/#apply-a-branch-referral-code","body":"Endpointsh\n  POST /v1/applycode/:code\n  Content-Type: application/json\nParameters\n  code required\n  The referral code to apply. \nNOTE: this param is passed via the URL structure\n  branch_key required\n  The Branch key of the originating app.\n  identity  required (max 127 characters)\n  The identity used to identify the user.\n  branch_secret required\n  The Branch secret of the originating app.\nReturnsIf the code is a valid referral code, and this user hasn’t applied it in case of “unique” calculation_type, it returns the referral code JSONObject which includes the amount.js\n  {\n    referral_code: \"The referral code. Without prefix, it's a 6 character long unique alpha-numeric string; with prefix, it's the prefix concatenated with a 4 character long unique alpha-numeric string\",\n    app_id: \"The app key\",\n    metadata: {\n      bucket: \"The name of the bucket used for the referral code\",\n      amount: \"The amount of the referral code\",\n    },\n    expiration: \"The expiration date of the referral code\",\n    calculation_type: \"Whether the referral code can be applied indefinitely, or only once per user\",\n    location: \"Whether to reward the creator of the referral code or the one what applies it\"\n  }\n"},{"title":"New documentation portal","id":"http://dev.branch.io/references/ios_sdk/","body":"Check it out!"},{"title":"Important migration to v0.6.0","id":"http://dev.branch.io/references/ios_sdk/#important-migration-to-v060","body":"We have deprecated the bnc_app_key and replaced that with the new branch_key. Please see add branch key for details."},{"title":"Callback changes since v0.3.0","id":"http://dev.branch.io/references/ios_sdk/#callback-changes-since-v030","body":"An NSError* is added to all callback signaturestypedef void (^callbackWithParams) (NSDictionary *params, NSError *error);typedef void (^callbackWithUrl) (NSString *url, NSError *error);typedef void (^callbackWithStatus) (BOOL changed, NSError *error);typedef void (^callbackWithList) (NSArray *list, NSError *error);Please look up BNCError.h for the list of error code."},{"title":"FAQ","id":"http://dev.branch.io/references/ios_sdk/#faq","body":"1 What if you go down?! Or there is a poor connection?At Branch, we live and breathe uptime and performance. Just in case, we’ve got mechanisms internal to the SDK to deal with network issues. We always call the callbacks with the error parameter describing the issue. If the phone is in airplane mode and the connection is not available, the callbacks are called immediately. If there is a server latency, we timeout after 3 seconds and will retry 4 more times with a 3 second pause in between each. These timeouts are adjustable on the singleton instance by calling setNetworkTimeout (s), setRetryCount and setRetryInterval (s).2 How can I debug/test the SDKJust call setDebug after you get a reference to the Branch singleton. We’ll log all requests. Even more importantly, we won’t reference the hardware ID of the phone so you can register installs after just uninstalling/reinstalling the app.Make sure to remove setDebug before releasing.3 Why do I not see any installs when I reinstall?We do a lot of smart things to give you an accurate read on the number of installs you actually have. The most common one is associating the user with the actual hardware ID of the phone. If a user uninstalls the app, then reinstalls, we’ll know it’s the same person from before and just register and ‘open’ instead of an ‘install’. To register an install on the same phone again, see FAQ #2 about debugging.4 Facebook deep links seem to not work?Branch uses the Facebook App Links protocol to pass the deep links through to your app from Facebook. Funny enough, if you also have a Facebook app configured in the developer portal and you choose ‘Deep link from feed’, Facebook ignores its own protocol. Make sure to uncheck this option in your Facebook app."},{"title":"Installation","id":"http://dev.branch.io/references/ios_sdk/#installation","body":"compiled SDK size: ~155kb"},{"title":"Available in CocoaPods","id":"http://dev.branch.io/references/ios_sdk/#available-in-cocoapods","body":"Branch is available through CocoaPods, to install it simply add the following line to your Podfile:pod \"Branch\"\nOr download the raw filesDownload code from here:\nhttps://s3-us-west-1.amazonaws.com/branchhost/Branch-iOS-SDK.zipThe testbed project:\nhttps://s3-us-west-1.amazonaws.com/branchhost/Branch-iOS-TestBed.zipOr just clone this project!"},{"title":"Register you app","id":"http://dev.branch.io/references/ios_sdk/#register-you-app","body":"You can sign up for your own app id at https://dashboard.branch.io"},{"title":"Configuration (for tracking)","id":"http://dev.branch.io/references/ios_sdk/#configuration-for-tracking","body":"Ideally, you want to use our links any time you have an external link pointing to your app (share, invite, referral, etc) because:\n  Our dashboard can tell you where your installs are coming from\n  Our links are the highest possible converting channel to new downloads and users\n  You can pass that shared data across install to give new users a custom welcome or show them the content they expect to see\nOur linking infrastructure will support anything you want to build. If it doesn’t, we’ll fix it so that it does: just reach out to alex@branch.io with requests."},{"title":"Register a URI scheme direct deep linking (optional but recommended)","id":"http://dev.branch.io/references/ios_sdk/#register-a-uri-scheme-direct-deep-linking-optional-but-recommended","body":"You can register your app to respond to direct deep links (yourapp:// in a mobile browser) by adding a URI scheme in the YourProject-Info.plist file. Make sure to change yourapp to a unique string that represents your app name.\n  In Xcode, click on YourProject-Info.plist on the left.\n  Find URL Types and click the right arrow. (If it doesn’t exist, right click anywhere and choose Add Row. Scroll down and choose URL Types)\n  Add “yourapp”, where yourapp is a unique string for your app, as an item in URL Schemes as below:\nAlternatively, you can add the URI scheme in your project’s Info page.\n  In Xcode, click your project in the Navigator (on the left side).\n  Select the “Info” tab.\n  Expand the “URL Types” section at the bottom.\n  Click the “+” sign to add a new URI Scheme, as below:\n"},{"title":"Add your Branch Key to your project","id":"http://dev.branch.io/references/ios_sdk/#add-your-branch-key-to-your-project","body":"After you register your app, your Branch Key can be retrieved on the Settings page of the dashboard. Now you need to add it to YourProject-Info.plist (Info.plist for Swift).\n  In plist file, mouse hover “Information Property List” which is the root item under the Key column.\n  After about half a second, you will see a “+” sign appear. Click it.\n  In the newly added row, fill in “branch_key” for its key, leave type as String, and enter your app’s Branch Key obtained in above steps in the value column.\n  Save the plist file.\nURI Scheme ConsiderationsThe Branch SDK will pull the first URI Scheme from your list that is not one of fb, db, or pin. This value will be used one time to set the iOS URI Scheme under your Link Settings in the Branch Dashboard.If you want to add key for both your live and test apps at the same time, you need change the type column to Dictionary, and add two entries inside:\n1. For live app, use “live” (without double quotes) for key, String for type, and your live branch key for value\n1. For test app, use “test” (without double quotes) for key, String for type, and your test branch key for valueFor additional help configuring the SDK, including step-by-step instructions, please see the iOS Quickstart Guide."},{"title":"Initialize SDK And Register Deep Link Routing Function","id":"http://dev.branch.io/references/ios_sdk/#initialize-sdk-and-register-deep-link-routing-function","body":"Called when app first initializes a session, ideally in the app delegate. If you created a custom link with your own custom dictionary data, you probably want to know when the user session init finishes, so you can check that data. Think of this callback as your “deep link router”. If your app opens with some data, you want to route the user depending on the data you passed in. Otherwise, send them to a generic install flow.This deep link routing callback is called 100% of the time on init, with your link params or an empty dictionary if none present.Objective-C```objc\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // your other init codeBranch *branch = [Branch getInstance];\n[branch initSessionWithLaunchOptions:launchOptions andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {     // previously initUserSessionWithCallback:withLaunchOptions:\n    if (!error) {\n        // params are the deep linked params associated with the link that the user clicked before showing up\n        // params will be empty if no data found\n\n\n        // here is the data from the example below if a new user clicked on Joe's link and installed the app\n        NSString *name = [params objectForKey:@\"user\"]; // returns Joe\n        NSString *profileUrl = [params objectForKey:@\"profile_pic\"]; // returns https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg\n        NSString *description = [params objectForKey:@\"description\"]; // returns Joe likes long walks on the beach...\n\n        // route to a profile page in the app for Joe\n        // show a customer welcome\n    }\n}]; } ```\nobjc\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {\n    // pass the url to the handle deep link call\n    // if handleDeepLink returns YES, and you registered a callback in initSessionAndRegisterDeepLinkHandler, the callback will be called with the data associated with the deep link\n    if (![[Branch getInstance] handleDeepLink:url]) {\n        // do other deep link routing for the Facebook SDK, Pinterest SDK, etc\n    }\n    return YES;\n}\nIf you want to use your test app during development, in application:didFinishLaunchingWithOptions: you can get the Branch object like this:objc\nBranch *branch = [Branch getTestInstance];  // only available in SDK v0.6.0 or higher\nOrobjc\nBranch *branch = [Branch getInstance:@\"your test branch key\"];  // replace with your actual branch key\nEither way, we recommend you put a #warning directive to remind you to change back to live app during deployment later.\nAlso, note the Branch object is singleton, so calling [Branch getInstance] in all the other places will still get you the same test branch object instantiated here.Swift```swift\nfunc application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n    // your other init codelet branch: Branch = Branch.getInstance()\nbranch.initSessionWithLaunchOptions(launchOptions, andRegisterDeepLinkHandler: { params, error in\n    if (error == nil) {\n        // params are the deep linked params associated with the link that the user clicked before showing up\n        // params will be empty if no data found\n\n\n        // here is the data from the example below if a new user clicked on Joe's link and installed the app\n        let name = params[\"user\"] as? String                // returns Joe\n        let profileUrl = params[\"profile_pic\"] as? String   // returns https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg\n        let description = params[\"description\"] as? String  // returns Joe likes long walks on the beach...\n\n        // route to a profile page in the app for Joe\n        // show a customer welcome\n    }\n})\n\nreturn true } ```\n```swift\nfunc application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject?) -> Bool {\n    // pass the url to the handle deep link call\n    // if handleDeepLink returns true, and you registered a callback in initSessionAndRegisterDeepLinkHandler, the callback will be called with the data associated with the deep link\n    if (!Branch.getInstance().handleDeepLink(url)) {\n        // do other deep link routing for the Facebook SDK, Pinterest SDK, etc\n    }return true } ```\nIf you want to use your test app during development, in application:didFinishLaunchingWithOptions: you can get the Branch object like this:swift\nlet branch: Branch = Branch.getTestInstance()\nOrswift\nlet branch: Branch = Branch.getInstance(\"your test branch key\");  // replace with your actual branch key\nEither way, we recommend you put a //TODO: or //FIXME landmark to remind you to change back to live app during deployment later.\nAlso, note the Branch object is singleton, so you can and should still use Branch.getInstance() in all the other places (see examples below).Encoding NoteOne quick note about encoding. Since NSJSONSerializaiton supports a limited set of classes, we do some custom encoding to allow additional types. Current supported types include NSDictionary, NSArray, NSURL, NSString, NSNumber, NSNull, and NSDate (encoded as an ISO8601 string with timezone). If a parameter is of an unknown type, it will be ignored.Retrieve session (install or open) parametersThese session parameters will be available at any point later on with this command. If no params, the dictionary will be empty. This refreshes with every new session (app installs AND app opens)Objective-Cobjc\nNSDictionary *sessionParams = [[Branch getInstance] getLatestReferringParams]; // previously getReferringParams\nSwiftswift\nlet sessionParams = Branch.getInstance().getLatestReferringParams() // previously getReferringParams()\nRetrieve install (install only) parametersIf you ever want to access the original session params (the parameters passed in for the first install event only), you can use this line. This is useful if you only want to reward users who newly installed the app from a referral link or something.Objective-Cobjc\nNSDictionary *installParams = [[Branch getInstance] getFirstReferringParams]; // previously getInstallReferringParams\nSwiftswift\nlet installParams = Branch.getInstance().getFirstReferringParams() // previously getInstallReferringParams\n"},{"title":"Persistent identities","id":"http://dev.branch.io/references/ios_sdk/#persistent-identities","body":"Often, you might have your own user IDs, or want referral and event data to persist across platforms or uninstall/reinstall. It’s helpful if you know your users access your service from different devices. This where we introduce the concept of an ‘identity’.To identify a user, just call:Objective-Cobjc\n// previously identifyUser:\n[[Branch getInstance] setIdentity:your user id];    // your user id should not exceed 127 characters\nSwiftswift\n// previously identifyUser:\nBranch.getInstance().setIdentity(your user id)  // your user id should not exceed 127 characters\nLogoutIf you provide a logout function in your app, be sure to clear the user when the logout completes. This will ensure that all the stored parameters get cleared and all events are properly attributed to the right identity.Warning this call will clear the referral credits and attribution on the device.Objective-Cobjc\n[[Branch getInstance] logout];  // previously clearUser\nSwiftswift\nBranch.getInstance().logout()   // previously clearUser\n"},{"title":"Register custom events","id":"http://dev.branch.io/references/ios_sdk/#register-custom-events","body":"Objective-Cobjc\n[[Branch getInstance] userCompletedAction:@\"your_custom_event\"]; // your custom event name should not exceed 63 characters\nSwiftswift\nBranch.getInstance().userCompletedAction(\"your_custom_event\") // your custom event name should not exceed 63 characters\nOR if you want to store some state with the event:Objective-Cobjc\n[[Branch getInstance] userCompletedAction:@\"your_custom_event\" withState:(NSDictionary *)appState]; // same 63 characters max limit\nSwiftswift\nBranch.getInstance().userCompletedAction(\"your_custom_action\", withState: [String: String]()) // same 63 characters max limit; replace [String: String]() with params dictionary\nSome example events you might want to track:objc\n@\"complete_purchase\"\n@\"wrote_message\"\n@\"finished_level_ten\"\n"},{"title":"Generate Tracked, Deep Linking URLs (pass data across install and open)","id":"http://dev.branch.io/references/ios_sdk/#generate-tracked-deep-linking-urls-pass-data-across-install-and-open","body":""},{"title":"Shortened links","id":"http://dev.branch.io/references/ios_sdk/#shortened-links","body":"There are a bunch of options for creating these links. You can tag them for analytics in the dashboard, or you can even pass data to the new installs or opens that come from the link click. How awesome is that? You need to pass a callback for when you link is prepared (which should return very quickly, ~ 50 ms to process).For more details on how to create links, see the Branch link creation guideObjective-C```objc\n// associate data with a link\n// you can access this data from any instance that installs or opens the app from this link (amazing…)NSMutableDictionary *params = [[NSMutableDictionary alloc] init];[params setObject:@”Joe” forKey:@”user”];\n[params setObject:@”https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg” forKey:@”profile_pic”];\n[params setObject:@”Joe likes long walks on the beach…” forKey:@”description”];// Customize the display of the link\n[params setObject:@”Joe’s My App Referral” forKey:@”$og_title”];\n[params setObject:@”https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg” forKey:@”$og_image_url”];\n[params setObject:@”Join Joe in My App - it’s awesome” forKey:@”$og_description”];// Customize the redirect performance\n[params setObject:@”http://myapp.com/desktop_splash” forKey:@”$desktop_url”];// associate a url with a set of tags, channel, feature, and stage for better analytics.\n// tags: nil or example set of tags could be “version1”, “trial6”, etc; each tag should not exceed 64 characters\n// channel: nil or examples: “facebook”, “twitter”, “text_message”, etc; should not exceed 128 characters\n// feature: nil or examples: FEATURE_TAG_SHARE, FEATURE_TAG_REFERRAL, “unlock”, etc; should not exceed 128 characters\n// stage: nil or examples: “past_customer”, “logged_in”, “level_6”; should not exceed 128 characters// Link ‘type’ can be used for scenarios where you want the link to only deep link the first time.\n// Use nil, BranchLinkTypeUnlimitedUse or BranchLinkTypeOneTimeUse// Link ‘alias’ can be used to label the endpoint on the link. For example: http://bnc.lt/AUSTIN28. Should not exceed 128 characters\n// Be careful about aliases: these are immutable objects permanently associated with the data and associated paramters you pass into the link. When you create one in the SDK, it’s tied to that user identity as well (automatically specified by the Branch internals). If you want to retrieve the same link again, you’ll need to call getShortUrl with all of the same parameters from before.Branch *branch = [Branch getInstance];\n[branch getShortURLWithParams:params andTags:@[@”version1”, @”trial6”] andChannel:@”text_message” andFeature:BRANCH_FEATURE_TAG_SHARE andStage:@”level_6” andAlias:@”AUSTIN68” andCallback:^(NSString *url, NSError *error) {\n    // show the link to the user or share it immediately\n}];// The callback will return null if the link generation fails (or if the alias specified is aleady taken.)\n```Swift```swift\n// associate data with a link\n// you can access this data from any instance that installs or opens the app from this link (amazing…)var params = [“user”: “Joe”]\nparams[“profile_pic”] = “https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg”\nparams[“description”] = “Joe likes long walks on the beach…”// Customize the display of the link\nparams[“$og_title”] = “Joe’s My App Referral”\nparams[“$og_image_url”] = “https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg”\nparams[“$og_description”] = “Join Joe in My App - it’s awesome”// Customize the redirect performance\nparams[“$desktop_url”] = “http://myapp.com/desktop_splash”// associate a url with a set of tags, channel, feature, and stage for better analytics.\n// tags: nil or example set of tags could be “version1”, “trial6”, etc; each tag should not exceed 64 characters\n// channel: nil or examples: “facebook”, “twitter”, “text_message”, etc; should not exceed 128 characters\n// feature: nil or examples: FEATURE_TAG_SHARE, FEATURE_TAG_REFERRAL, “unlock”, etc; should not exceed 128 characters\n// stage: nil or examples: “past_customer”, “logged_in”, “level_6”; should not exceed 128 characters// Link ‘type’ can be used for scenarios where you want the link to only deep link the first time.\n// Use nil, BranchLinkTypeUnlimitedUse or BranchLinkTypeOneTimeUse// Link ‘alias’ can be used to label the endpoint on the link. For example: http://bnc.lt/AUSTIN28. Should not exceed 128 characters\n// Be careful about aliases: these are immutable objects permanently associated with the data and associated paramters you pass into the link. When you create one in the SDK, it’s tied to that user identity as well (automatically specified by the Branch internals). If you want to retrieve the same link again, you’ll need to call getShortUrl with all of the same parameters from before.// The callback will return null if the link generation fails (or if the alias specified is aleady taken.)Branch.getInstance().getShortURLWithParams(params, andTags: [“version1”, “trial6”], andChannel: “text_message”, andFeature: BRANCH_FEATURE_TAG_SHARE, andStage: “level_6”, andAlias: “AUSTIN68”, andCallback: { (url: String!, error: NSError!) -> Void in\n    if (error == nil) {\n        // show the link to the user or share it immediately\n    }\n})\n```There are other methods which exclude tag and data if you don’t want to pass those. Explore Xcode’s autocomplete functionality.Note\nYou can customize the Facebook OG tags of each URL if you want to dynamically share content by using the following optional keys in the data dictionary. Please use this Facebook tool to debug your OG tags!\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$og_title”\n      The title you’d like to appear for the link in social media\n    \n    \n      “$og_description”\n      The description you’d like to appear for the link in social media\n    \n    \n      “$og_image_url”\n      The URL for the image you’d like to appear for the link in social media\n    \n    \n      “$og_video”\n      The URL for the video\n    \n    \n      “$og_url”\n      The URL you’d like to appear\n    \n    \n      “$og_redirect”\n      If you want to bypass our OG tags and use your own, use this key with the URL that contains your site’s metadata.\n    \n  \nAlso, you do custom redirection by inserting the following optional keys in the dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$desktop_url”\n      Where to send the user on a desktop or laptop. By default it is the Branch-hosted text-me service\n    \n    \n      “$android_url”\n      The replacement URL for the Play Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ios_url”\n      The replacement URL for the App Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ipad_url”\n      Same as above but for iPad Store\n    \n    \n      “$fire_url”\n      Same as above but for Amazon Fire Store\n    \n    \n      “$blackberry_url”\n      Same as above but for Blackberry Store\n    \n    \n      “$windows_phone_url”\n      Same as above but for Windows Store\n    \n    \n      “$after_click_url”\n      When a user returns to the browser after going to the app, take them to this URL. iOS only; Android coming soon\n    \n  \nYou have the ability to control the direct deep linking of each link by inserting the following optional keys in the dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$deeplink_path”\n      The value of the deep link path that you’d like us to append to your URI. For example, you could specify “$deeplink_path”: “radio/station/456” and we’ll open the app with the URI “yourapp://radio/station/456?link_click_id=branch-identifier”. This is primarily for supporting legacy deep linking infrastructure.\n    \n    \n      “$always_deeplink”\n      true or false. (default is not to deep link first) This key can be specified to have our linking service force try to open the app, even if we’re not sure the user has the app installed. If the app is not installed, we fall back to the respective app store or $platform_url key. By default, we only open the app if we’ve seen a user initiate a session in your app from a Branch link (has been cookied and deep linked by Branch)\n    \n  \n"},{"title":"UIActivityView Share Sheet","id":"http://dev.branch.io/references/ios_sdk/#uiactivityview-share-sheet","body":"UIActivityView is the standard way of allowing users to share content from your app. A common use case is a user sharing a referral code, or a content URL with their friends. If you want to give your users a way of sharing content from your app, this is the simplest way to implement Branch.Sample UIActivityView Share sheetThe Branch iOS SDK includes a subclassed UIActivityItemProvider that can be passed into a UIActivityViewController, that will generate a Branch short URL and automatically tag it with the channel the user selects (Facebook, Twitter, etc.).Note: This method was formerly getBranchActivityItemWithDefaultURL:, which is now deprecated. Rather than requiring a default URL that acts as a placeholder for UIActivityItemProvider, a longURL is generated instantly and synchronously.The sample app included with the Branch iOS SDK shows a sample of this in ViewController.m:\n###### Objective-C```objc\n// Setup up the content you want to share, and the Branch\n// params and properties, as you would for any branch link// No need to set the channel, that is done automatically based\n// on the share activity the user selects\nNSString *shareString = @”Super amazing thing I want to share!”;\nUIImage *amazingImage = [UIImage imageNamed:@”Super-Amazing-Image.png”];NSMutableDictionary *params = [[NSMutableDictionary alloc] init];[params setObject:@”Joe” forKey:@”user”];\n[params setObject:@”https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg” forKey:@”profile_pic”];\n[params setObject:@”Joe likes long walks on the beach…” forKey:@”description”];// Customize the display of the link\n[params setObject:@”Joe’s My App Referral” forKey:@”$og_title”];\n[params setObject:@”https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg” forKey:@”$og_image_url”];\n[params setObject:@”Join Joe in My App - it’s awesome” forKey:@”$og_description”];// Customize the redirect performance\n[params setObject:@”http://myapp.com/desktop_splash” forKey:@”$desktop_url”];NSArray *tags = @[@”tag1”, @”tag2”];\nNSString *feature = @”invite”;\nNSString *stage = @”2”;// Branch UIActivityItemProvider\nUIActivityItemProvider *itemProvider = [Branch getBranchActivityItemWithParams:params andFeature:feature andStage:stage andTags:tags];// Pass this in the NSArray of ActivityItems when initializing a UIActivityViewController\nUIActivityViewController *shareViewController = [[UIActivityViewController alloc] initWithActivityItems:@[shareString, amazingImage, itemProvider] applicationActivities:nil];// Present the share sheet!\n[self.navigationController presentViewController:shareViewController animated:YES completion:nil];\n```Swift```swift\n// Setup up the content you want to share, and the Branch\n// params and properties, as you would for any branch link// No need to set the channel, that is done automatically based\n// on the share activity the user selects\nvar items: Array = AnyObjectlet shareString = “Super amazing thing I want to share!”\nitems.append(shareString)\nif let amazingImage: UIImage = UIImage(named: “mada.png”) {\n    items.append(amazingImage)\n}var params = [“user”: “Joe”]\nparams[“profile_pic”] = “https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg”\nparams[“description”] = “Joe likes long walks on the beach…”// Customize the display of the link\nparams[“$og_title”] = “Joe’s My App Referral”\nparams[“$og_image_url”] = “https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg”\nparams[“$og_description”] = “Join Joe in My App - it’s awesome”// Customize the redirect performance\nparams[“$desktop_url”] = “http://myapp.com/desktop_splash”let tags = [“tag1”, “tag2”]\nlet feature = “invite”\nlet stage = “2”// Branch UIActivityItemProvider\nlet itemProvider = Branch.getBranchActivityItemWithParams(params, andFeature: feature, andStage: stage, andTags: tags)\nitems.append(itemProvider)// Pass this in the NSArray of ActivityItems when initializing a UIActivityViewController\nlet shareViewController = UIActivityViewController(activityItems: items, applicationActivities: nil)// Present the share sheet!\nself.navigationController?.presentViewController(shareViewController, animated: true, completion: nil)\n```"},{"title":"Referral system rewarding functionality","id":"http://dev.branch.io/references/ios_sdk/#referral-system-rewarding-functionality","body":"In a standard referral system, you have 2 parties: the original user and the invitee. Our system is flexible enough to handle rewards for all users for any actions. Here are a couple example scenarios:1) Reward the original user for taking action (eg. inviting, purchasing, etc)2) Reward the invitee for installing the app from the original user’s referral link3) Reward the original user when the invitee takes action (eg. give the original user credit when their the invitee buys something)These reward definitions are created on the dashboard, under the ‘Reward Rules’ section in the ‘Referrals’ tab on the dashboard.Warning: For a referral program, you should not use unique awards for custom events and redeem pre-identify call. This can allow users to cheat the system."},{"title":"Get reward balance","id":"http://dev.branch.io/references/ios_sdk/#get-reward-balance","body":"Reward balances change randomly on the backend when certain actions are taken (defined by your rules), so you’ll need to make an asynchronous call to retrieve the balance. Here is the syntax:Objective-C```objc\n[[Branch getInstance] loadRewardsWithCallback:^(BOOL changed, NSError *error) {\n    // changed boolean will indicate if the balance changed from what is currently in memory// will return the balance of the current user's credits\nNSInteger credits = [[Branch getInstance] getCredits]; }]; ```\nSwift```swift\nBranch().loadRewardsWithCallback { (changed: Bool, error: NSError!) -> Void in\n    // changed boolean will indicate if the balance changed from what is currently in memory// will return the balance of the current user's credits\nlet credits = Branch().getCredits() } ```\n"},{"title":"Redeem all or some of the reward balance (store state)","id":"http://dev.branch.io/references/ios_sdk/#redeem-all-or-some-of-the-reward-balance-store-state","body":"We will store how many of the rewards have been deployed so that you don’t have to track it on your end. In order to save that you gave the credits to the user, you can call redeem. Redemptions will reduce the balance of outstanding credits permanently.Objective-Cobjc\n// Save that the user has redeemed 5 credits\n[[Branch getInstance] redeemRewards:5];\nSwiftswift\n// Save that the user has redeemed 5 credits\nBranch.getInstance().redeemRewards(5)\n"},{"title":"Get credit history","id":"http://dev.branch.io/references/ios_sdk/#get-credit-history","body":"This call will retrieve the entire history of credits and redemptions from the individual user. To use this call, implement like so:Objective-Cobjc\n[[Branch getInstance] getCreditHistoryWithCallback:^(NSArray *history, NSError *error) {\n    if (!error) {\n        // process history\n    }\n}];\nSwiftswift\nBranch.getInstance().getCreditHistoryWithCallback { (history: [AnyObject]!, error: NSError!) -> Void in\n    if (error == nil) {\n        // process history\n    }\n}\nThe response will return an array that has been parsed from the following JSON:\n  ```json\n  [\n      {\n          “transaction”: {\n                             “date”: “2014-10-14T01:54:40.425Z”,\n                             “id”: “50388077461373184”,\n                             “bucket”: “default”,\n                             “type”: 0,\n                             “amount”: 5\n                         },\n          “event” : {\n              “name”: “event name”,\n              “metadata”: { your event metadata if present }\n          },\n          “referrer”: “12345678”,\n          “referree”: null\n      },\n      {\n          “transaction”: {\n                             “date”: “2014-10-14T01:55:09.474Z”,\n                             “id”: “50388199301710081”,\n                             “bucket”: “default”,\n                             “type”: 2,\n                             “amount”: -3\n                         },\n          “event” : {\n              “name”: “event name”,\n              “metadata”: { your event metadata if present }\n          },\n          “referrer”: null,\n          “referree”: “12345678”\n      }\n  ]\n  ```\n  referrer\n  The id of the referring user for this credit transaction. Returns null if no referrer is involved. Note this id is the user id in developer’s own system that’s previously passed to Branch’s identify user API call.\n  referree\n  The id of the user who was referred for this credit transaction. Returns null if no referree is involved. Note this id is the user id in developer’s own system that’s previously passed to Branch’s identify user API call.\n  type\n  This is the type of credit transaction\n\n  0 - A reward that was added automatically by the user completing an action or referral\n  1 - A reward that was added manually\n  2 - A redemption of credits that occurred through our API or SDKs\n  3 - This is a very unique case where we will subtract credits automatically when we detect fraud\n"},{"title":"Get referral code","id":"http://dev.branch.io/references/ios_sdk/#get-referral-code","body":"Retrieve the referral code created by current userObjective-Cobjc\n[[Branch getInstance] getReferralCodeWithCallback:^(NSDictionary *params, NSError *error) {\n    if (!error) {\n        NSString *referralCode = [params objectForKey:@\"referral_code\"];\n    }\n}];\nSwiftswift\nBranch.getInstance().getReferralCodeWithCallback { (params: [NSObject : AnyObject]!, error: NSError!) -> Void in\n    if (error == nil) {\n        let referralCode: AnyObject? = params[\"referral_code\"]\n    }\n}\n"},{"title":"Create referral code","id":"http://dev.branch.io/references/ios_sdk/#create-referral-code","body":"Create a new referral code for the current user, only if this user doesn’t have any existing non-expired referral code.In the simplest form, just specify an amount for the referral code.\nThe returned referral code is a 6 character long unique alpha-numeric string wrapped inside the params dictionary with key @”referral_code”.\n  amount NSInteger\n  The amount of credit to redeem when user applies the referral code\nObjective-Cobjc\n// Create a referral code of 5 credits\n[[Branch getInstance] getReferralCodeWithAmount:5\n                                    andCallback:^(NSDictionary *params, NSError *error) {\n                                        if (!error) {\n                                            NSString *referralCode = [params objectForKey:@\"referral_code\"];\n                                            // do whatever with referralCode\n                                        }\n                                    }\n];\nSwiftswift\n// Create a referral code of 5 credits\nBranch.getInstance().getReferralCodeWithAmount(5, andCallback: { (params: [NSObject : AnyObject]!, error: NSError!) -> Void in\n    if (error == nil) {\n        let referralCode: AnyObject? = params[\"referral_code\"]\n        // do whatever with referralCode\n    }\n})\nAlternatively, you can specify a prefix for the referral code.\nThe resulting code will have your prefix, concatenated with a 2 character long unique alpha-numeric string wrapped in the same data structure.\n  prefix NSString*\n  The prefix to the referral code that you desire\nObjective-Cobjc\n// Create a referral code with prefix \"BRANCH\", 5 credits, and without an expiration date\n[[Branch getInstance] getReferralCodeWithPrefix:@\"BRANCH\"   // prefix should not exceed 48 characters\n                                         amount:5\n                                    andCallback:^(NSDictionary *params, NSError *error) {\n                                        if (!error) {\n                                            NSString *referralCode = [params objectForKey:@\"referral_code\"];\n                                            // do whatever with referralCode\n                                        }\n                                    }\n];\nSwiftswift\n// Create a referral code with prefix \"BRANCH\", 5 credits, and without an expiration date\n// prefix should not exceed 48 characters\nBranch.getInstance().getReferralCodeWithPrefix(\"BRANCH\", amount: 5, andCallback: { (params: [NSObject : AnyObject]!, error: NSError!) -> Void in\n    if (error == nil) {\n        let referralCode: AnyObject? = params[\"referral_code\"]\n        // do whatever with referralCode\n    }\n})\nIf you want to specify an expiration date for the referral code, you can add an “expiration:” parameter.\nThe prefix parameter is optional here, i.e. it could be getReferralCodeWithAmount:expiration:andCallback.\n  expiration NSDate*\n  The expiration date of the referral code\nObjective-Cobjc\n[[Branch getInstance] getReferralCodeWithPrefix:@\"BRANCH\"   // prefix should not exceed 48 characters\n                                         amount:5\n                                     expiration:[[NSDate date] dateByAddingTimeInterval:60 * 60 * 24]\n                                    andCallback:^(NSDictionary *params, NSError *error) {\n                                        if (!error) {\n                                            NSString *referralCode = [params objectForKey:@\"referral_code\"];\n                                            // do whatever with referralCode\n                                        }\n                                    }\n];\nSwiftswift\n// prefix should not exceed 48 characters\nBranch.getInstance().getReferralCodeWithPrefix(\"BRANCH\", amount: 5, expiration: NSDate().dateByAddingTimeInterval(60*60*24), andCallback: { (params: [NSObject : AnyObject]!, error: NSError!) -> Void in\n    if (error == nil) {\n        let referralCode: AnyObject? = params[\"referral_code\"]\n        // do whatever with referralCode\n    }\n})\nYou can also tune the referral code to the finest granularity, with the following additional parameters:\n  bucket NSString*\n  The name of the bucket to use. If none is specified, defaults to ‘default’\n  calculation_type  ReferralCodeCalculation\n  This defines whether the referral code can be applied indefinitely, or only once per user\n\n  BranchUnlimitedRewards - referral code can be applied continually\n  BranchUniqueRewards - a user can only apply a specific referral code once\n\n  location ReferralCodeLocation\n  The user to reward for applying the referral code\n\n  BranchReferreeUser - the user applying the referral code receives credit\n  BranchReferringUser - the user who created the referral code receives credit\n  BranchBothUsers - both the creator and applicant receive credit\nObjective-Cobjc\n[[Branch getInstance] getReferralCodeWithPrefix:@\"BRANCH\"   // prefix should not exceed 48 characters\n                                         amount:5\n                                     expiration:[[NSDate date] dateByAddingTimeInterval:60 * 60 * 24]\n                                         bucket:@\"default\"\n                                calculationType:BranchUniqueRewards\n                                       location:BranchBothUsers\n                                    andCallback:^(NSDictionary *params, NSError *error) {\n                                        if (!error) {\n                                            NSString *referralCode = [params objectForKey:@\"referral_code\"];\n                                            // do whatever with referralCode\n                                        }\n                                    }\n];\nSwiftswift\n// prefix should not exceed 48 characters\nBranch.getInstance().getReferralCodeWithPrefix(\"BRANCH\",\n    amount: 5,\n    expiration: NSDate().dateByAddingTimeInterval(60*60*24),\n    bucket: \"default\",\n    calculationType: BranchUniqueRewards,\n    location: BranchBothUsers,\n    andCallback: { (params: [NSObject : AnyObject]!, error: NSError!) -> Void in\n    if (error == nil) {\n        let referralCode: AnyObject? = params[\"referral_code\"]\n        // do whatever with referralCode\n    }\n})\n"},{"title":"Validate referral code","id":"http://dev.branch.io/references/ios_sdk/#validate-referral-code","body":"Validate if a referral code exists in Branch system and is still valid.\nA code is vaild if:\n  It hasn’t expired.\n  If its calculation type is uniqe, it hasn’t been applied by current user.\nIf valid, returns the referral code JSONObject in the call back.\n  code NSString*\n  The referral code to validate\nObjective-Cobjc\n[[Branch getInstance] validateReferralCode:code andCallback:^(NSDictionary *params, NSError *error) {\n    if (!error) {\n        if ([code isEqualToString:[params objectForKey:@\"referral_code\"]]) {\n            // valid\n        } else {\n            // invalid (should never happen)\n        }\n    } else {\n        NSLog(@\"Error in validating referral code: %@\", error.localizedDescription);\n    }\n}];\nSwiftswift\nBranch.getInstance().validateReferralCode(code, andCallback: { (params: [NSObject : AnyObject]!, error: NSError!) -> Void in\n    if (error == nil) {\n        if let returnedCode = params[\"referral_code\"] as? String {\n            // valid\n        } else {\n            // invalid (should never happen)\n        }\n    } else {\n        NSLog(@\"Error in validating referral code: %@\", error.localizedDescription)\n    }\n})\n"},{"title":"Apply referral code","id":"http://dev.branch.io/references/ios_sdk/#apply-referral-code","body":"Apply a referral code if it exists in Branch system and is still valid (see above). If the code is valid, returns the referral code JSONObject in the call back.\n  code NSString*\n  The referral code to apply\nObjective-Cobjc\n[[Branch getInstance] applyReferralCode:code andCallback:^(NSDictionary *params, NSError *error) {\n    if (!error) {\n        // applied. you can get the referral code amount from the params and deduct it in your UI.\n    } else {\n        NSLog(@\"Error in applying referral code: %@\", error.localizedDescription);\n    }\n}];\nSwiftswift\nBranch.getInstance().applyReferralCode(code, andCallback: { (params: [NSObject : AnyObject]!, error: NSError!) -> Void in\n    if (error == nil) {\n        // applied. you can get the referral code amount from the params and deduct it in your UI.\n    } else {\n        NSLog(@\"Error in applying referral code: %@\", error.localizedDescription);\n    }\n})\n"},{"title":"Overview","id":"http://dev.branch.io/references/web_sdk/#overview","body":"The Branch Web SDK provides an easy way to interact with the Branch API on your website or web app. It requires no frameworks, and is only ~7K gzipped.To use the Web SDK, you’ll need to first initialize it with your Branch Key found in your Branch dashboard. You’ll also need to register when your users login with setIdentity, and when they logout with logout.Once initialized, the Branch Web SDK allows you to create and share links with a banner, over SMS, or your own methods. It also offers event tracking, access to referrals, and management of credits."},{"title":"Installation","id":"http://dev.branch.io/references/web_sdk/#installation","body":""},{"title":"Requirements","id":"http://dev.branch.io/references/web_sdk/#requirements","body":"This SDK requires native browser Javascript and has been tested in all modern browsers with sessionStorage capability. No 3rd party libraries are needed to make use of the SDK as is it 100% native Javascript."},{"title":"Browser Specific Support","id":"http://dev.branch.io/references/web_sdk/#browser-specific-support","body":"\n  \n    \n      Chrome\n      Firefox\n      Safari\n      IE\n    \n  \n  \n    \n      ✔\n      ✔\n      ✔\n      9, 10, 11\n    \n  \n"},{"title":"Branch Key (formerly App ID)","id":"http://dev.branch.io/references/web_sdk/#branch-key-formerly-app-id","body":"You will need to create a Branch Metrics app to obtain your Branch Key (you will have the option to toggle between live and test modes)."},{"title":"Quick Install (Web SDK)","id":"http://dev.branch.io/references/web_sdk/#quick-install-web-sdk","body":"Manual installationBe sure to replace BRANCH KEY with your actual Branch Key found in your account dashboard.Formerly App ID Note that for the time being, initializing the Web SDK with an App ID will still work, it is strongly recomended you switch to using your live and test API keys.```html\n(function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.5.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits creditHistory applyCode validateCode getCode redeem banner closeBanner\".split(\" \"),0);\n\nbranch.init('BRANCH KEY', function(err, data) {\n\t// callback to handle err or data\n}); </script> ```\nBower or npm installationIf you use Bower or npm, you can run bower install branch-sdk or npm install branch-sdk respectively to get the SDK.Common.JS and RequireJS compatibilityIn addition to working as a standalone library, the Branch SDK works great in CommonJS environments (browserify, webpack) as well as RequireJS environments (RequireJS/AMD). Just require('branch') or define(['branch'], function(branch) { ... }); to get started!"},{"title":"Quick Install (Cordova/Phonegap)","id":"http://dev.branch.io/references/web_sdk/#quick-install-cordovaphonegap","body":"This Web SDK can also be used for Cordova/Phonegap applications.  It is provided as a plugin and can be installed with cordova plugin or the plugman tool.  Point the tool at this repositry, https://github.com/BranchMetrics/Web-SDK.git.  For example:sh\ncordova plugin add https://github.com/BranchMetrics/Web-SDK.git\nFor a full walktrough specific to integrating the Web SDK with a Cordova app, see the Cordova Guide.Note that this SDK is meant for use with full Cordova/Phonegap apps.  If you are building a hybrid app using an embedded web view and you want to access the Branch API from native code you will want to use the platform specific SDKs and pass data into javascript if needed.Initialization and Event HandlingYou should initialize the Branch SDK session once the ‘deviceready’ event fires and each time the ‘resume’ event fires.  See the example code below. You will need your Branch Key from the Branch dashboard.js\n  branch.init(\"YOUR BRANCH KEY HERE\", function(err, data) {\n  \tapp.initComplete(err, data);\n  });\nThe session close will be sent automatically on any ‘pause’ event."},{"title":"SDK Method Queue","id":"http://dev.branch.io/references/web_sdk/#sdk-method-queue","body":"Initializing the SDK is an asynchronous method with a callback, so it may seem as though you would need to place any method calls that will execute immidiatley inside the branch.init() callback. We’ve made it even easier than that, by building in a queue to the SDK! The only thing that is required is that branch.init() is called prior to any other methods. All SDK methods called are gauranteed to : 1. be executed in the order that they were called, and 2. wait to execute until the previous SDK method finishes. Therefore, it is 100% allowable to do something like:js\nbranch.init(...);\nbranch.banner(...);\nIf branch.init() fails, all subsequent branch methods will fail."},{"title":"API Reference","id":"http://dev.branch.io/references/web_sdk/#api-reference","body":"\n  Branch Session\n    \n      .init()\n      .setIdentity()\n      .logout()\n    \n  \n  Event Tracking Methods\n    \n      .track()\n    \n  \n  Deeplinking Methods\n    \n      .link()\n      .sendSMS()\n    \n  \n  Referral Methods\n    \n      .referrals()\n      .getCode()\n      .validateCode()\n      .applyCode()\n      .credits()\n      .creditHistory()\n      .redeem()\n    \n  \n  Smart Banner\n    \n      .banner()\n    \n  \n# Global"},{"title":"setDebug(debug)","id":"http://dev.branch.io/references/web_sdk/#setdebugdebug","body":"Parametersdebug: boolean, required - Set the SDK debug flag.Setting the SDK debug flag will generate a new device ID each time the app is installed\ninstead of possibly using the same device id.  This is useful when testing.This needs to be set before the Branch.init call!!!THIS METHOD IS CURRENTLY ONLY AVAILABLE IN THE CORDOVA/PHONEGAP PLUGIN"},{"title":"init(branch_key, options, callback)","id":"http://dev.branch.io/references/web_sdk/#initbranchkey-options-callback","body":"Parametersbranch_key: string, required - Your Branch live key, or (depreciated) your app id.options: Object, optional - { isReferrable: Is this a referrable session }.callback: function, optional - callback to read the session data.THE “isReferrable” OPTION IS ONLY USED IN THE CORDOVA/PHONEGAP PLUGINAdding the Branch script to your page automatically creates a window.branch\nobject with all the external methods described below. All calls made to\nBranch methods are stored in a queue, so even if the SDK is not fully\ninstantiated, calls made to it will be queued in the order they were\noriginally called.\nIf the session was opened from a referring link, data() will also return the referring link click as referring_link, which gives you the ability to continue the click flow.The init function on the Branch object initiates the Branch session and\ncreates a new user session, if it doesn’t already exist, in\nsessionStorage.Useful Tip: The init function returns a data object where you can read\nthe link the user was referred by.Usagejs\nbranch.init(\n    branch_key,\n    options\n    callback (err, data),\n);\nCallback Formatjs\ncallback(\n     \"Error message\",\n     {\n          data_parsed:        { },                          // If the user was referred from a link, and the link has associated data, the data is passed in here.\n          referring_identity: '12345',                      // If the user was referred from a link, and the link was created by a user with an identity, that identity is here.\n          has_app:            true,                         // Does the user have the app installed already?\n          identity:           'BranchUser',                 // Unique string that identifies the user\n          referring_link:          'https://bnc.lt/c/jgg75-Gjd3' // The referring link click, if available.\n     }\n);\nNote: Branch.init must be called prior to calling any other Branch functions.\n___"},{"title":"data(callback)","id":"http://dev.branch.io/references/web_sdk/#datacallback","body":"Parameterscallback: function, optional - callback to read the session data.Returns the same session information and any referring data, as\nBranch.init, but does not require the app_id. This is meant to be called\nafter Branch.init has been called if you need the session information at a\nlater point.\nIf the Branch session has already been initialized, the callback will return\nimmediately, otherwise, it will return once Branch has been initialized.\n___"},{"title":"first(callback)","id":"http://dev.branch.io/references/web_sdk/#firstcallback","body":"Parameterscallback: function, optional - callback to read the session data.Returns the same session information and any referring data, as\nBranch.init did when the app was first installed. This is meant to be called\nafter Branch.init has been called if you need the first session information at a\nlater point.\nIf the Branch session has already been initialized, the callback will return\nimmediately, otherwise, it will return once Branch has been initialized.THIS METHOD IS CURRENTLY ONLY AVAILABLE IN THE CORDOVA/PHONEGAP PLUGIN"},{"title":"setIdentity(identity, callback)","id":"http://dev.branch.io/references/web_sdk/#setidentityidentity-callback","body":"Parametersidentity: string, required - a string uniquely identifying the user – often a user ID or email address.callback: function, optional - callback that returns the user’s Branch identity id and unique link.Formerly identify()Sets the identity of a user and returns the data. To use this function, pass\na unique string that identifies the user - this could be an email address,\nUUID, Facebook ID, etc.Usagejs\nbranch.setIdentity(\n    identity,\n    callback (err, data)\n);\nCallback Formatjs\ncallback(\n     \"Error message\",\n     {\n          identity_id:             '12345', // Server-generated ID of the user identity, stored in `sessionStorage`.\n          link:                    'url',   // New link to use (replaces old stored link), stored in `sessionStorage`.\n          referring_data_parsed:    { },      // Returns the initial referring data for this identity, if exists, as a parsed object.\n          referring_identity:      '12345'  // Returns the initial referring identity for this identity, if exists.\n     }\n);\n\n___"},{"title":"logout(callback)","id":"http://dev.branch.io/references/web_sdk/#logoutcallback","body":"Parameterscallback: function, optionalLogs out the current session, replaces session IDs and identity IDs.Usagejs\nbranch.logout(\n    callback (err)\n);\nCallback Formatjs\ncallback(\n     \"Error message\"\n);\n\n___"},{"title":"close(callback)","id":"http://dev.branch.io/references/web_sdk/#closecallback","body":"Parameterscallback: function, optionalClose the current session.Usagejs\nbranch.close(\n    callback (err)\n);\nCallback Formatjs\ncallback(\n     \"Error message\"\n);\nTHIS METHOD IS CURRENTLY ONLY AVAILABLE IN THE CORDOVA/PHONEGAP PLUGIN"},{"title":"Tracking events","id":"http://dev.branch.io/references/web_sdk/#tracking-events","body":""},{"title":"track(event, metadata, callback)","id":"http://dev.branch.io/references/web_sdk/#trackevent-metadata-callback","body":"Parametersevent: string, required - name of the event to be tracked.metadata: Object, optional - object of event metadata.callback: function, optionalThis function allows you to track any event with supporting metadata. Use the events you track to create funnels in the Branch dashboard.\nThe metadata parameter is a formatted JSON object that can contain any data and has limitless hierarchy.Usagejs\nbranch.event(\n    event,\n    metadata,\n    callback (err)\n);\nCallback Formatjs\ncallback(\"Error message\");\n\n___Deeplinking Methods"},{"title":"Creating a deep linking link","id":"http://dev.branch.io/references/web_sdk/#creating-a-deep-linking-link","body":""},{"title":"link(data, callback)","id":"http://dev.branch.io/references/web_sdk/#linkdata-callback","body":"Parametersdata: Object, required - link data and metadata.callback: function, required - returns a string of the Branch deep linking URL.Formerly createLink()Creates and returns a deep linking URL.  The data parameter can include an\nobject with optional data you would like to store, including Facebook\nOpen Graph data.data The dictionary to embed with the link. Accessed as session or install parameters from the SDK.Note\nYou can customize the Facebook OG tags of each URL if you want to dynamically share content by using the following optional keys in the data dictionary. Please use this Facebook tool to debug your OG tags!\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$og_title”\n      The title you’d like to appear for the link in social media\n    \n    \n      “$og_description”\n      The description you’d like to appear for the link in social media\n    \n    \n      “$og_image_url”\n      The URL for the image you’d like to appear for the link in social media\n    \n    \n      “$og_video”\n      The URL for the video\n    \n    \n      “$og_url”\n      The URL you’d like to appear\n    \n    \n      “$og_redirect”\n      If you want to bypass our OG tags and use your own, use this key with the URL that contains your site’s metadata.\n    \n  \nAlso, you can set custom redirection by inserting the following optional keys in the dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$desktop_url”\n      Where to send the user on a desktop or laptop. By default it is the Branch-hosted text-me service\n    \n    \n      “$android_url”\n      The replacement URL for the Play Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ios_url”\n      The replacement URL for the App Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ipad_url”\n      Same as above but for iPad Store\n    \n    \n      “$fire_url”\n      Same as above but for Amazon Fire Store\n    \n    \n      “$blackberry_url”\n      Same as above but for Blackberry Store\n    \n    \n      “$windows_phone_url”\n      Same as above but for Windows Store\n    \n    \n      “$after_click_url”\n      When a user returns to the browser after going to the app, take them to this URL. iOS only; Android coming soon\n    \n  \nYou have the ability to control the direct deep linking of each link as well:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$deeplink_path”\n      The value of the deep link path that you’d like us to append to your URI. For example, you could specify “$deeplink_path”: “radio/station/456” and we’ll open the app with the URI “yourapp://radio/station/456?link_click_id=branch-identifier”. This is primarily for supporting legacy deep linking infrastructure.\n    \n    \n      “$always_deeplink”\n      true or false. (default is not to deep link first) This key can be specified to have our linking service force try to open the app, even if we’re not sure the user has the app installed. If the app is not installed, we fall back to the respective app store or $platform_url key. By default, we only open the app if we’ve seen a user initiate a session in your app from a Branch link (has been cookied and deep linked by Branch).\n    \n  \nUsagejs\nbranch.link(\n    data,\n    callback (err, link)\n);\nExamplejs\nbranch.link({\n    tags: [ 'tag1', 'tag2' ],\n    channel: 'facebook',\n    feature: 'dashboard',\n    stage: 'new user',\n    type: 1,\n    data: {\n        mydata: 'something',\n        foo: 'bar',\n        '$desktop_url': 'http://myappwebsite.com',\n        '$ios_url': 'http://myappwebsite.com/ios',\n        '$ipad_url': 'http://myappwebsite.com/ipad',\n        '$android_url': 'http://myappwebsite.com/android',\n        '$og_app_id': '12345',\n        '$og_title': 'My App',\n        '$og_description': 'My app\\'s description.',\n        '$og_image_url': 'http://myappwebsite.com/image.png'\n    }\n}, function(err, link) {\n    console.log(err, link);\n});\nCallback Formatjs\ncallback(\n    \"Error message\",\n    'https://bnc.lt/l/3HZMytU-BW' // Branch deep linking URL\n);\n"},{"title":"sendSMS(phone, linkData, options, callback)","id":"http://dev.branch.io/references/web_sdk/#sendsmsphone-linkdata-options-callback","body":"Parametersphone: string, required - phone number to send SMS tolinkData: Object, required - object of link dataoptions: Object, optional - options: make_new_link, which forces the creation of a new link even if one already existscallback: function, optional - Returns an error if unsuccessfulFormerly SMSLink()A robust function to give your users the ability to share links via SMS. If\nthe user navigated to this page via a Branch link, sendSMS will send that\nsame link. Otherwise, it will create a new link with the data provided in\nthe params argument. sendSMS also  registers a click event with the\nchannel pre-filled with 'sms' before sending an sms to the provided\nphone parameter. This way the entire link click event is recorded starting\nwith the user sending an sms.Note: sendSMS will automatically send a previously generated link click,\nalong with the data object in the original link. Therefore, it is unneccessary for the\ndata() method to be called to check for an already existing link. If a link already\nexists, sendSMS will simply ignore the data object passed to it, and send the existing link.\nIf this behaivior is not desired, set make_new_link: true in the options object argument\nof sendSMS, and sendSMS will always make a new link.Supports international SMS.Usagejs\nbranch.sendSMS(\n    phone,\n    linkData,\n    options,\n    callback (err, data)\n);\nExamplejs\nbranch.sendSMS(\n    phone: '9999999999',\n    {\n        tags: ['tag1', 'tag2'],\n        channel: 'facebook',\n        feature: 'dashboard',\n        stage: 'new user',\n        type: 1,\n        data: {\n            mydata: 'something',\n            foo: 'bar',\n            '$desktop_url': 'http://myappwebsite.com',\n            '$ios_url': 'http://myappwebsite.com/ios',\n            '$ipad_url': 'http://myappwebsite.com/ipad',\n            '$android_url': 'http://myappwebsite.com/android',\n            '$og_app_id': '12345',\n            '$og_title': 'My App',\n            '$og_description': 'My app\\'s description.',\n            '$og_image_url': 'http://myappwebsite.com/image.png'\n        }\n    },\n    { make_new_link: true }, // Default: false. If set to true, sendSMS will generate a new link even if one already exists.\n    function(err) { console.log(err); }\n});\nCallback Formatjs\ncallback(\"Error message\");\nReferral system rewarding functionalityIn a standard referral system, you have 2 parties: the original user and the invitee. Our system is flexible enough to handle rewards for all users for any actions. Here are a couple example scenarios:\n1. Reward the original user for taking action (eg. inviting, purchasing, etc)\n2. Reward the invitee for installing the app from the original user’s referral link\n3. Reward the original user when the invitee takes action (eg. give the original user credit when their the invitee buys something)These reward definitions are created on the dashboard, under the ‘Reward Rules’ section in the ‘Referrals’ tab on the dashboard.Warning: For a referral program, you should not use unique awards for custom events and redeem pre-identify call. This can allow users to cheat the system."},{"title":"Retrieve referrals list","id":"http://dev.branch.io/references/web_sdk/#retrieve-referrals-list","body":""},{"title":"referrals(callback)","id":"http://dev.branch.io/references/web_sdk/#referralscallback","body":"Parameterscallback: function, required - returns an object with referral data.Formerly showReferrals()Retrieves a complete summary of the referrals the current user has made.Usagejs\nbranch.referrals(\n    callback (err, data)\n);\nCallback Formatjs\ncallback(\n    \"Error message\",\n    {\n        'install': {\n             total: 5,\n             unique: 2\n        },\n        'open': {\n             total: 4,\n             unique: 3\n        },\n        'buy': {\n            total: 7,\n            unique: 3\n        }\n    }\n);\n"},{"title":"Referral Codes","id":"http://dev.branch.io/references/web_sdk/#referral-codes","body":""},{"title":"getCode(options, callback)","id":"http://dev.branch.io/references/web_sdk/#getcodeoptions-callback","body":"Parametersoptions: Object, required - contins options for referral code creation.callback: function, optional - returns an error if unsuccessfulCreate a referral code using the supplied parameters.  The code can be given to other users to enter.  Applying the code will add credits to the referrer, referree or both.\nThe options object can containt the following properties:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      amount\n      reqruied - An integer specifying the number of credits added when the code is applied.\n    \n    \n      calculation_type\n      required - An integer of 1 for unlimited uses, or 0 for one use.\n    \n    \n      location\n      required - An integer that etermines who get’s the credits:  0 for the referree, 2 for the referring user or 3 for both.\n    \n    \n      bucket\n      optional - The bucket to apply the credits to.  Defaults to “default”.\n    \n    \n      prefix\n      optional - A string to be prepended to the code.\n    \n    \n      expiration\n      optional - A date string that if present, determines the date on which the code expires.\n    \n  \nUsagebranch.getCode(\n    options,\n    callback(err,data)\n);Examplejs\nbranch.getCode(\n    {\n      \"amount\":10,\n      \"bucket\":\"party\",\n      \"calculation_type\":1,\n      \"location\":2\n    },\n    callback (err, data)\n);\nCallback Formatjs\ncallback(\n     \"Error message\",\n     {\n       \"referral_code\":\"AB12CD\"\n     }\n);\n"},{"title":"validateCode(code, callback)","id":"http://dev.branch.io/references/web_sdk/#validatecodecode-callback","body":"Parameterscode: string, required - the code string to validate.callback: function, optional - returns an error if unsuccessfulValidate a referral code before using.Usagejs\nbranch.validateCode(\n    code, // The code to validate\n    callback (err)\n);\nExamplejs\nbranch.validateCode(\n    \"AB12CD\",\n    function(err) {\n        if (err) {\n            console.log(err);\n        } else {\n            console.log(\"Code is valid\");\n        }\n    }\n);\nCallback Formatjs\ncallback(\n    \"Error message\",\n    callback(err)\n);\n"},{"title":"applyCode(code, callback)","id":"http://dev.branch.io/references/web_sdk/#applycodecode-callback","body":"Parameterscode: string, required - the code string to apply.callback: function, optional - returns an error if unsuccessfulApply a referral code.Usagejs\nbranch.applyCode(\n    code, // The code to apply\n    callback (err)\n);\nExamplejs\nbranch.applyCode(\n    \"AB12CD\",\n    function(err) {\n        if (err) {\n            console.log(err);\n        } else {\n            console.log(\"Code applied\");\n        }\n    }\n);\nCallback Formatjs\ncallback(\n    \"Error message\",\n    callback(err)\n);\n\n___"},{"title":"Credit Functions","id":"http://dev.branch.io/references/web_sdk/#credit-functions","body":""},{"title":"credits(callback)","id":"http://dev.branch.io/references/web_sdk/#creditscallback","body":"Parameterscallback: function, required - returns an object with credit data.Formerly showCredits()This call will retrieve the entire history of credits and redemptions from the individual user.Usagejs\nbranch.credits(\n    callback (err, data)\n);\nCallback Formatjs\ncallback(\n    \"Error message\",\n    {\n        'default': 15,\n        'other bucket': 9\n    }\n);\n"},{"title":"creditHistory(options, callback)","id":"http://dev.branch.io/references/web_sdk/#credithistoryoptions-callback","body":"Parametersoptions: Object, optional - options controlling the returned history.callback: function, required - returns an array with credit history data.This call will retrieve the entire history of credits and redemptions from the individual user.\nProperties available in the options object:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      bucket\n      optional (max 63 characters) - The bucket from which to retrieve credit transactions.\n    \n    \n      begin_after_id\n      optional - The credit transaction id of the last item in the previous retrieval. Retrieval will start from the transaction next to it. If none is specified, retrieval starts from the very beginning in the transaction history, depending on the order.\n    \n    \n      length\n      optional - The number of credit transactions to retrieve. If none is specified, up to 100 credit transactions will be retrieved.\n    \n    \n      direction\n      optional - The order of credit transactions to retrieve. If direction is 1, retrieval is in least recent first order; If direction is 0, or if none is specified, retrieval is in most recent first order.\n    \n  \nUsagejs\nbranch.creditHistory(\n     options,\n     callback(err, data)\n);\nExamplejs\nbranch.creditHistory(\n    {\n      \"length\":50,\n      \"direction\":0,\n      \"begin_after_id\":\"123456789012345\",\n      \"bucket\":\"default\"\n    }\n    callback (err, data)\n);\nCallback Formatjs\ncallback(\n    \"Error message\",\n[\n    {\n        \"transaction\": {\n                           \"date\": \"2014-10-14T01:54:40.425Z\",\n                           \"id\": \"50388077461373184\",\n                           \"bucket\": \"default\",\n                           \"type\": 0,\n                           \"amount\": 5\n                       },\n        \"referrer\": \"12345678\",\n        \"referree\": null\n    },\n    {\n        \"transaction\": {\n                           \"date\": \"2014-10-14T01:55:09.474Z\",\n                           \"id\": \"50388199301710081\",\n                           \"bucket\": \"default\",\n                           \"type\": 2,\n                           \"amount\": -3\n                       },\n        \"referrer\": null,\n        \"referree\": \"12345678\"\n    }\n]\n);\n"},{"title":"Credit redemption","id":"http://dev.branch.io/references/web_sdk/#credit-redemption","body":""},{"title":"redeem(amount, bucket, callback)","id":"http://dev.branch.io/references/web_sdk/#redeemamount-bucket-callback","body":"Parametersamount: number, required - an amount (int) of number of credits to redeembucket: string, required - the name of the bucket (string) of which bucket to redeem the credits fromcallback: function, optional - returns an error if unsuccessfulFormerly redeemCredits()Credits are stored in buckets, which you can define as points, currency, whatever makes sense for your app. When you want to redeem credits, call this method with the number of points to be redeemed, and the bucket to redeem them from.js\nbranch.redeem(\n    amount, // Amount of credits to be redeemed\n    bucket,  // String of bucket name to redeem credits from\n    callback (err)\n);\nExamplejs\nbranch.redeem(\n    5,\n    \"Rubies\",\n    function(err) {\n        console.log(err);\n    }\n);\nCallback Formatjs\ncallback(\"Error message\");\n\n___Smart App Sharing BannerThe Branch Web SDK has a built in sharing banner, that automatically displays a device specific banner for desktop, iOS, and Android. If the banner is shown on a desktop, a form for sending yourself the download link via SMS is shown.\nOtherwise, a button is shown that either says an “open” app phrase, or a “download” app phrase, based on whether or not the user has the app installed. Both of these phrases can be specified in the parameters when calling the banner function.\nStyling: The banner automatically styles itself based on if it is being shown on the desktop, iOS, or Android.Customizing the App Sharing BannerThe app sharing banner includes a number of ways to easily customize it by specifying properties in the options object, which is the first argument of the banner."},{"title":"Your App’s Information required","id":"http://dev.branch.io/references/web_sdk/#your-apps-information-required","body":"You can set the icon, title, and description for your app with the properties: icon, title, and description. For example, an app banner with these three properties set:\njs\nbranch.banner(\n    {\n         icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n         title: 'Branch Demo App',\n         description: 'The Branch demo app!'\n    },\n    {... link data ...}\n);\n"},{"title":"The Call To Action Text optional","id":"http://dev.branch.io/references/web_sdk/#the-call-to-action-text-optional","body":"On mobile devices, the app banner show’s an option either to download the app if they do not have it installed, or open the app if they have already installed it. Both of these can be customized from their respective defaults of Download app, and View in app.\nWhen the banner is opened on a desktop devide, a simpel form is shown that allows the user to txt themselves a link to the app. Both the placeholder phone number, and the text in the button can be customzied from their respective defaults of ‘(999) 999-9999’ and ‘Send Link’.\njs\nbranch.banner(\n    {\n         // required app info properties\n         icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n         title: 'Branch Demo App',\n         description: 'The Branch demo app!',\n         // Call to action customization\n         openAppButtonText: 'Open',\n         downloadAppButtonText: 'Install',\n         phonePreviewText: '+44 9999-9999',\n         sendLinkText: 'Txt me!'\n    },\n    {... link data ...}\n);\n"},{"title":"Enabed Platforms optional","id":"http://dev.branch.io/references/web_sdk/#enabed-platforms-optional","body":"The app banner detects the platform environment as either, desktop, iOS, or Android, and is enabled on all 3 by default. You can easily customize which platforms see the app banner as follows:\njs\nbranch.banner(\n    {\n         // required app info properties\n         icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n         title: 'Branch Demo App',\n         description: 'The Branch demo app!',\n         // Platforms customization\n         showDesktop: false,\n         showiOS: true,\n         showAndroid: true\n    },\n    {... link data ...}\n);\n"},{"title":"Display Preferences optional","id":"http://dev.branch.io/references/web_sdk/#display-preferences-optional","body":"By default, the app banner displays inside of an iFrame (isolates the app banner css from your page), at the top of the page, shows a close button to the user, and will never show again once closed by the user. All of this functionality can be customized.\nThe iframe property defaults to true, and can be set to false if you wish for the banner HTML to display within your page. This allows you to customize the CSS of the banner, past what the Web SDK allows.\nThe disableHide property defaults to false, and when set to true, removes the close button on the banner.\nThe forgetHide property defaults to false, and when set to true, will forget if the user has opened the banner previously, and thus will always show the banner to them even if they have closed it in the past. It can also be set to an integer, in which case, it would forget that the user has previously hid the banner after X days.\nThe position property, defaults to ‘top’, but can also be set to ‘bottom’ if you would prefer to show the app banner from the bottom of the screen.\nThe customCSS property allows you to style the banner, even if it is isolated within an iframe. To assist you with device specific styles, the body element of the banner has one of three classes: branch-banner-android, branch-banner-ios, or branch-banner-desktop.\nThe mobileSticky property defaults to false, but can be set to true if you want the user to continue to see the app banner as they scroll.\nThe desktopSticky property defaults to true, but can be set to false if you want the user to only see the app banner when they are scrolled to the top of the page.\njs\nbranch.banner(\n    {\n         // required app info properties\n         icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n         title: 'Branch Demo App',\n         description: 'The Branch demo app!',\n         // Display preferences\n         iframe: false,\n         disableHide: true,\n         forgetHide: true, // Can also be set to an integer. For example: 10, would forget that the user previously hid the banner after 10 days\n         position: 'bottom',\n         mobileSticky: true,\n         desktopSticky: true,\n         customCSS: '.title { color: #F00; }'\n    },\n    {... link data ...}\n);\n"},{"title":"Link Preferences optional","id":"http://dev.branch.io/references/web_sdk/#link-preferences-optional","body":"By default, tthe app banner will reusue a link that has most recently been created. If this is not desired, and you wish an enitrley new link to be created and overwrite the previous link, you can set make_new_link to true.\njs\nbranch.banner(\n    {\n         // required app info properties\n         icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n         title: 'Branch Demo App',\n         description: 'The Branch demo app!',\n         // Link preferences\n         make_new_link: true\n    },\n    {... link data ...}\n);\n"},{"title":"Playing nicely with other positon fixed “sticky” banners","id":"http://dev.branch.io/references/web_sdk/#playing-nicely-with-other-positon-fixed-sticky-banners","body":"Do you already have a “sticky” element on the top of your website, such as a navigation bar? If so, the Branch app banner will likely interfere with it. Fortunatley, we have a solution!\nWithout any configuration, the Web SDK adds a class called branch-banner-is-active to the body element of your website when the banner opens, and removes it when the banner closes.\nAs an example, let’s say you had an element on your website with a class of header that was position: fixed;. You could then add the following to your stylesheet:\ncss\nbody.branch-banner-is-active .header { top: 76px; }\n\nThis will add exactly the space required to show the app banner above your navigation header!"},{"title":"banner(options, data)","id":"http://dev.branch.io/references/web_sdk/#banneroptions-data","body":"Parametersoptions: Object, required - object of all the options to setup the bannerdata: Object, required - object of all link data, same as Branch.link()Formerly appBanner()Display a smart banner directing the user to your app through a Branch referral link.  The data param is the exact same as in branch.link().\n  \n    \n      iOS Smart Banner\n      Android Smart Banner\n      Desktop Smart Banner\n    \n  \n  \n    \n      \n      \n      \n    \n  \nTHIS METHOD IS ONLY AVAILABLE IN THE WEB SDK NOT IN THE CORDOVA/PHONEGAP PLUGINUsagejs\nbranch.banner(\n    options, // Banner options: See example for all available options\n    data // Data for link, same as Branch.link()\n);\nExamplejs\nbranch.banner({\n    icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n    title: 'Branch Demo App',\n    description: 'The Branch demo app!',\n    openAppButtonText: 'Open',              // Text to show on button if the user has the app installed\n    downloadAppButtonText: 'Download',      // Text to show on button if the user does not have the app installed\n    sendLinkText: 'Send Link',              // Text to show on desktop button to allow users to text themselves the app\n    phonePreviewText: '+44 9999-9999',      // The default phone placeholder is a US format number, localize the placeholder number with a custom placeholder with this option\n    showiOS: true,                          // Should the banner be shown on iOS devices?\n    showAndroid: true,                      // Should the banner be shown on Android devices?\n    showDesktop: true,                      // Should the banner be shown on desktop devices?\n    iframe: true,                           // Show banner in an iframe, recomended to isolate Branch banner CSS\n    disableHide: false,                     // Should the user have the ability to hide the banner? (show's X on left side)\n    forgetHide: false,                      // Should we show the banner after the user closes it? Can be set to true, or an integer to show again after X days\n    position: 'top',                        // Sets the position of the banner, options are: 'top' or 'bottom', and the default is 'top'\n    mobileSticky: false,                    // Determines whether the mobile banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to false *this property only applies when the banner position is 'top'\n    desktopSticky: true,                    // Determines whether the desktop banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to true *this property only applies when the banner position is 'top'\n    customCSS: '.title { color: #F00; }',   // Add your own custom styles to the banner that load last, and are gauranteed to take precedence, even if you leave the banner in an iframe\n    make_new_link: false                    // Should the banner create a new link, even if a link already exists?\n}, {\n    tags: ['tag1', 'tag2'],\n    feature: 'dashboard',\n    stage: 'new user',\n    type: 1,\n    data: {\n        mydata: 'something',\n        foo: 'bar',\n        '$desktop_url': 'http://myappwebsite.com',\n        '$ios_url': 'http://myappwebsite.com/ios',\n        '$ipad_url': 'http://myappwebsite.com/ipad',\n        '$android_url': 'http://myappwebsite.com/android',\n        '$og_app_id': '12345',\n        '$og_title': 'My App',\n        '$og_description': 'My app\\'s description.',\n        '$og_image_url': 'http://myappwebsite.com/image.png'\n    }\n});\n\n___"},{"title":"closeBanner()","id":"http://dev.branch.io/references/web_sdk/#closebanner","body":"Closing the App Banner ProgrammaticallyThe App Banner includes a close button the user can click, but you may want to close the banner with a timeout, or via some\nother user interaction with your web app. In this case, closing the banner is very simple by calling Branch.closeBanner().Usagejs\nbranch.closeBanner();\n"},{"title":"Bugs / Help / Support","id":"http://dev.branch.io/references/web_sdk/#bugs--help--support","body":"Feel free to report any bugs you might encounter in the repo’s issues. Any support inquiries outside of bugs\nplease send to support@branch.io."},{"title":"Introduction","id":"http://dev.branch.io/references/xamarin_sdk/#introduction","body":"The Xamarin SDK is a cross platform SDK you can use to access the Branch APIs from your Xamarin application.  The SDK is a PCL (Portable Class Library) that works with Xamarin Android, Xamarin iOS or Xamarin Forms applications."},{"title":"A Word About Async Methods","id":"http://dev.branch.io/references/xamarin_sdk/#a-word-about-async-methods","body":"Most of the REST API calls in the SDK are submitted to a queue and executed in the background.  These requests, and their subsequent callbacks, occur on a background thread.  Due to the nature of how exceptions are handled by C# in background threads, exceptions that occur in a callback that are not caught, will be output to the console and consumed by the processing loop.Be aware of this when executing UI functions in a callback.  Make sure that the UI functions are being executed inside a BeginInvokeOnMainThread call or it’s platform equivalents."},{"title":"A Word About Building on Android","id":"http://dev.branch.io/references/xamarin_sdk/#a-word-about-building-on-android","body":"There’s a problem with the Newtonsoft JSON package that we’re using to do JSON processing. (It get’s pulled in as a dependency of the NuGet package.) In a release build, it has a linking problem which leads to an exception we are seeing under certain circumstances. This can be fixed by a change to the options for the Android app. It is only an Android problem.Basically, right click on the project and select Options. Go to “Android Build” and select the “Linker” tab. Make sure the Release build configuration is selected. In the “Ignore assemblies” box, add “System.Core”. Rebuild the app. It should now run successfully."},{"title":"Installation","id":"http://dev.branch.io/references/xamarin_sdk/#installation","body":"The Branch Xamarin SDK is now available as a NuGet package.  You will need to add the package to your Android, iOS and Forms (if applicable) projects.\n  Right click on each project and select Add->Add NuGet Package or double click on the Packages folder to bring up the NuGet package dialog in Xamarin Studio.\n  Find the Branch Xamarin Linking SDK and select it.  This will add the required assemblies to your projects.  You need to do this for each project that will use Branch calls.  This include the Android and iOS projects even if this is a Forms based app since an initialization call needs to be added to each of the platform specific projects.  (See the next section.)\nIf you would rather build and reference the assemblies directly:\n  Clone this repository to your local machine\n  Add the BranchXamarinSDK project to your solution and reference it from your Android, iOS and Forms (if applicable) project.\n  Add the BranchXamarinSDK.Droid project to your solution and reference it from your Android project, if any.\n  Add the BranchXamarinSDK.iOS project and reference it from you iOS project, if any.\n"},{"title":"Register your app","id":"http://dev.branch.io/references/xamarin_sdk/#register-your-app","body":"You can sign up for your own Branch Key at https://dashboard.branch.io"},{"title":"Configuration (for tracking)","id":"http://dev.branch.io/references/xamarin_sdk/#configuration-for-tracking","body":"Ideally, you want to use our links any time you have an external link pointing to your app (share, invite, referral, etc) because:\n  Our dashboard can tell you where your installs are coming from\n  Our links are the highest possible converting channel to new downloads and users\n  You can pass that shared data across install to give new users a custom welcome or show them the content they expect to see\nOur linking infrastructure will support anything you want to build. If it doesn’t, we’ll fix it so that it does: just reach out to alex@branch.io with requests."},{"title":"Initialize a session on Xamarin","id":"http://dev.branch.io/references/xamarin_sdk/#initialize-a-session-on-xamarin","body":"Before starting, it’s important to understand that we require a generic Xamarin initialization in addition to the Android and iOS initialization. To make matters worse, it’s different depending on whether you’re using Xamarin Forms or not. Please click one of the following to be linked to the appropriate init path to follow:\n  Click here if you’re using Xamarin Forms\n  Click here if you’re not using Xamarin Forms\n"},{"title":"Xamarin Forms Setup","id":"http://dev.branch.io/references/xamarin_sdk/#xamarin-forms-setup","body":"The SDK needs to be initialized at startup in each platform.  The code below shows how to do the platform specific initialization.  Note that this example shows a Xamarin Forms app.  The same Branch.Init calls need to be made whether Forms is used or not.Android with FormsFor Android add the call to the onCreate of either your Application class or the first Activity you start. This just creates the singleton object on Android with the appropriate Branch key but does not make any server requests.  Note also the addition of OnNewIntent.  This is needed to get the latest link identifier when the app is opened from the background by following a deep link.```csharp\nprotected override void OnCreate (Bundle savedInstanceState)\n{\n\tpublic class MainActivity : global::Xamarin.Forms.Platform.Android.FormsApplicationActivity\n{\n\tprotected override void OnCreate (Bundle savedInstanceState)\n\t{\n\t\tbase.OnCreate (savedInstanceState);\tglobal::Xamarin.Forms.Forms.Init (this, savedInstanceState);\n\n\tBranchAndroid.Init (this, \"your branch key here\", Intent.Data);\n\n\tLoadApplication (new App ());\n}\n\n// Ensure we get the updated link identifier when the app is opened from the\n// background with a new link.\nprotected override void OnNewIntent(Intent intent) {\n\tBranchAndroid.GetInstance().SetNewUrl(intent.Data);\n} } ```\niOS with FormsFor iOS add the code to your AppDelegate. This just creates the singleton object on Android with the appropriate Branch key but does not make any server requests.  Note also the addition of the OpenUrl method.  This is needed to get the latest link identifier when the app is opened from the background by following a deep link.```csharp\n[Register (“AppDelegate”)]\npublic class AppDelegate : global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate\n{\n\tpublic override bool FinishedLaunching (UIApplication uiApplication, NSDictionary launchOptions)\n\t{\n\t\tglobal::Xamarin.Forms.Forms.Init ();\tNSUrl url = null;\n\tif ((launchOptions != null) && launchOptions.ContainsKey(UIApplication.LaunchOptionsUrlKey)) {\n\t\turl = (NSUrl)launchOptions.ValueForKey (UIApplication.LaunchOptionsUrlKey);\n\t}\n\n\tBranchIOS.Init (\"your branch key here\", url);\n\n\tLoadApplication (new App ());\n\treturn base.FinishedLaunching (uiApplication, launchOptions);\n}\n\n// Ensure we get the updated link identifier when the app is opened from the\n// background with a new link.\npublic override bool OpenUrl(UIApplication application,\n\tNSUrl url,\n\tstring sourceApplication,\n\tNSObject annotation)\n{\n\tConsole.WriteLine (\"New URL: \" + url.ToString ());\n\tBranchIOS.getInstance ().SetNewUrl (url);\n\treturn true;\n} } ```\nNote that in both cases the first argument is the Branch key found in your app from the Branch dashboard (see the screenshot below).  The second argument allows the Branch SDK to recognize if the application was launched from a content URI.Here is the location of the Branch keyGeneric init with FormsThe following code will make a request to the Branch servers to initialize a new session, and retrieve any referring link parameters if available. For example, If you created a custom link with your own custom dictionary data, you probably want to know when the user session init finishes, so you can check that data. Think of this callback as your “deep link router”. If your app opens with some data, you want to route the user depending on the data you passed in. Otherwise, send them to a generic install flow.This deep link routing callback is called 100% of the time on init, with your link params or an empty dictionary if none present.```csharp\npublic class App : Application, IBranchSessionInterface\n{\n\tprotected override void OnResume ()\n\t{\n\t\tBranch branch = Branch.GetInstance ();\n\t\tbranch.InitSessionAsync (this);\n\t}protected override async void OnSleep ()\n{\n\tBranch branch = Branch.GetInstance ();\n\t// Await here ensure the thread stays alive long enough to complete the close.\n\tawait branch.CloseSessionAsync ();\n}\n\n#region IBranchSessionInterface implementation\n\npublic void InitSessionComplete (Dictionary<string, object> data)\n{\n\t// Do something with the referring link data...\n}\n\npublic void CloseSessionComplete ()\n{\n\t// Handle any additional cleanup after the session is closed\n}\n\npublic void SessionRequestError (BranchError error)\n{\n\t// Handle the error case here\n}\n\n#endregion } ```\nClose sessionRequired: this call will clear the deep link parameters when the app is closed, so they can be refreshed after a new link is clicked or the app is reopened.In a Forms App CloseSession is done in the OnSleep method of your App class. See the example above."},{"title":"Non-Forms Xamarin Setup","id":"http://dev.branch.io/references/xamarin_sdk/#non-forms-xamarin-setup","body":"The following code will make a request to the Branch servers to initialize a new session, and retrieve any referring link parameters if available. For example, If you created a custom link with your own custom dictionary data, you probably want to know when the user session init finishes, so you can check that data. Think of this callback as your “deep link router”. If your app opens with some data, you want to route the user depending on the data you passed in. Otherwise, send them to a generic install flow.This deep link routing callback is called 100% of the time on init, with your link params or an empty dictionary if none present.iOS without FormsThe iOS device specific code can register notification listeners to handle the init and close of sessions when the app is sent to the background or resumed.  The BranchIOS.Init call takes an optional third parameter that will enable this automatic close session behavior if the parameter is set to true.  If your iOS app is not a Forms app, use the following device specific init.```csharp\n[Register (“AppDelegate”)]\npublic class AppDelegate\n{\n\tpublic override bool FinishedLaunching (UIApplication uiApplication, NSDictionary launchOptions)\n\t{\n\t\tNSUrl url = null;\n\t\tif ((launchOptions != null) && launchOptions.ContainsKey(UIApplication.LaunchOptionsUrlKey)) {\n\t\t\turl = (NSUrl)launchOptions.ValueForKey (UIApplication.LaunchOptionsUrlKey);\n\t\t}\tBranchIOS.Init (\"your branch key here\", url, true);\n\t\n\tBranch branch = Branch.GetInstance ();\n\tbranch.InitSessionAsync (this);\n\n\t// Do your remaining launch stuff here...\n}\n\n// Ensure we get the updated link identifier when the app is opened from the\n// background with a new link.\npublic override bool OpenUrl(UIApplication application,\n\tNSUrl url,\n\tstring sourceApplication,\n\tNSObject annotation)\n{\n\tBranchIOS.getInstance ().SetNewUrl (url);\n\treturn true;\n}\n\n#region IBranchSessionInterface implementation\n\npublic void InitSessionComplete (Dictionary<string, object> data)\n{\n\t// Do something with the referring link data...\n}\n\npublic void CloseSessionComplete ()\n{\n\t// Handle any additional cleanup after the session is closed\n}\n\npublic void SessionRequestError (BranchError error)\n{\n\t// Handle the error case here\n}\n\n#endregion } ```\nAndroid without FormsFor Android add the call to the onCreate of either your Application class or the first Activity you start. This just creates the singleton object on Android with the appropriate Branch key but does not make any server requests```csharp\nprotected override void OnCreate (Bundle savedInstanceState)\n{\n\tpublic class MainActivity : global::Xamarin.Forms.Platform.Android.FormsApplicationActivity\n{\n\tprotected override void OnCreate (Bundle savedInstanceState)\n\t{\n\t\tbase.OnCreate (savedInstanceState);\tglobal::Xamarin.Forms.Forms.Init (this, savedInstanceState);\n\n\tBranchAndroid.Init (this, \"your branch key here\", Intent.Data);\n\n\tBranch branch = Branch.GetInstance ();\n\tbranch.InitSessionAsync (this);\n\n\tLoadApplication (new App ());\n}\n\nprotected override void OnStop (Bundle savedInstanceState)\n{\n\tbase.OnStop (savedInstanceState);\n\n\tBranch branch = Branch.GetInstance ();\n\t// Await here ensure the thread stays alive long enough to complete the close.\n\tawait branch.CloseSessionAsync ();\n}\n\n// Ensure we get the updated link identifier when the app is opened from the\n// background with a new link.\nprotected override void OnNewIntent(Intent intent) {\n\tBranchAndroid.GetInstance().SetNewUrl(intent.Data);\n}\n\n#region IBranchSessionInterface implementation\n\npublic void InitSessionComplete (Dictionary<string, object> data)\n{\n\t// Do something with the referring link data...\n}\n\npublic void CloseSessionComplete ()\n{\n\t// Handle any additional cleanup after the session is closed\n}\n\npublic void SessionRequestError (BranchError error)\n{\n\t// Handle the error case here\n}\n\n#endregion } ``` #### Close session\nRequired: this call will clear the deep link parameters when the app is closed, so they can be refreshed after a new link is clicked or the app is reopened.For Android this should be done in OnStop. See the example above."},{"title":"Forms and non-Forms Functions","id":"http://dev.branch.io/references/xamarin_sdk/#forms-and-non-forms-functions","body":"Retrieve session (install or open) parametersThese session parameters will be available at any point later on with this command. If no params, the dictionary will be empty. This refreshes with every new session (app installs AND app opens)\ncsharp\nBranch branch = Branch.GetInstance ();\nDictionary<string, object> sessionParams = branch.GetLatestReferringParams();\nRetrieve install (install only) parametersIf you ever want to access the original session params (the parameters passed in for the first install event only), you can use this line. This is useful if you only want to reward users who newly installed the app from a referral link or something.\ncsharp\nBranch branch = Branch.GetInstance ();\nDictionary<string, object> installParams = branch.GetFirstReferringParams();\n"},{"title":"Persistent identities","id":"http://dev.branch.io/references/xamarin_sdk/#persistent-identities","body":"Often, you might have your own user IDs, or want referral and event data to persist across platforms or uninstall/reinstall. It’s helpful if you know your users access your service from different devices. This where we introduce the concept of an ‘identity’.To identify a user, just call:\ncsharp\nBranch branch = Branch.GetInstance ();\nbranch.SetIdentityAsync(\"your user id\", this);  // Where this implements IBranchIdentityInterface\nLogoutIf you provide a logout function in your app, be sure to clear the user when the logout completes. This will ensure that all the stored parameters get cleared and all events are properly attributed to the right identity.Warning this call will clear the referral credits and attribution on the device.csharp\nBranch.GetInstance(getApplicationContext()).LogoutAsync(this); // Where this implements IBranchIdentityInterface\n"},{"title":"Register custom events","id":"http://dev.branch.io/references/xamarin_sdk/#register-custom-events","body":"csharp\nBranch branch = Branch.GetInstance ();\nawait branch.UserCompletedActionAsync(\"your_custom_event\");\nOR if you want to store some state with the eventcsharp\nBranch branch = Branch.GetInstance ();\nDictionary<string, object> data = new Dictionary<string, object>();\ndata.Add(\"sku\", \"123456789\");\nawait branch.UserCompletedActionAsync(\"purchase_event\", data);\nSome example events you might want to track:\ncsharp\n\"complete_purchase\"\n\"wrote_message\"\n\"finished_level_ten\"\n"},{"title":"Generate Tracked, Deep Linking URLs (pass data across install and open)","id":"http://dev.branch.io/references/xamarin_sdk/#generate-tracked-deep-linking-urls-pass-data-across-install-and-open","body":""},{"title":"Shortened links","id":"http://dev.branch.io/references/xamarin_sdk/#shortened-links","body":"There are a bunch of options for creating these links. You can tag them for analytics in the dashboard, or you can even pass data to the new installs or opens that come from the link click. How awesome is that? You need to pass a callback for when you link is prepared (which should return very quickly, ~ 50 ms to process).For more details on how to create links, see the Branch link creation guide```csharp\n// associate data with a link\n// you can access this data from any instance that installs or opens the app from this link (amazing…)var data = new Dictionary<string, object>(); \ndata.Add(“user”, “Joe”);\ndata.Add(“profile_pic”, “https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg”);\ndata.Add(“description”, “Joe likes long walks on the beach…”)// associate a url with a set of tags, channel, feature, and stage for better analytics.\n// tags: null or example set of tags could be “version1”, “trial6”, etc\n// channel: null or examples: “facebook”, “twitter”, “text_message”, etc\n// feature: null or examples: Branch.FEATURE_TAG_SHARE, Branch.FEATURE_TAG_REFERRAL, “unlock”, etc\n// stage: null or examples: “past_customer”, “logged_in”, “level_6”List tags = new List();\ntags.Add(\"version1\");\ntags.Add(\"trial6\");// Link ‘type’ can be used for scenarios where you want the link to only deep link the first time. \n// Use null, LINK_TYPE_UNLIMITED_USE or LINK_TYPE_ONE_TIME_USE// Link ‘alias’ can be used to label the endpoint on the link. For example: http://bnc.lt/AUSTIN28. \n// Be careful about aliases: these are immutable objects permanently associated with the data and associated paramters you pass into the link. When you create one in the SDK, it’s tied to that user identity as well (automatically specified by the Branch internals). If you want to retrieve the same link again, you’ll need to call getShortUrl with all of the same parameters from before.Branch branch = Branch.GetInstance ();\nawait branch.GetShortUrlAsync(this, data, “alias”,”channel”,”stage”, tags, “feature”, uriType);// The error method of the callback will be called if the link generation fails (or if the alias specified is aleady taken.)\n```There are other methods which exclude tags and data if you don’t want to pass those. Explore the autocomplete functionality.Note\nYou can customize the Facebook OG tags of each URL if you want to dynamically share content by using the following optional keys in the data dictionary. Please use this Facebook tool to debug your OG tags!\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$og_title”\n      The title you’d like to appear for the link in social media\n    \n    \n      “$og_description”\n      The description you’d like to appear for the link in social media\n    \n    \n      “$og_image_url”\n      The URL for the image you’d like to appear for the link in social media\n    \n    \n      “$og_video”\n      The URL for the video\n    \n    \n      “$og_url”\n      The URL you’d like to appear\n    \n    \n      “$og_app_id”\n      Your OG app ID. Optional and rarely used.\n    \n  \nAlso, you do custom redirection by inserting the following optional keys in the dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$desktop_url”\n      Where to send the user on a desktop or laptop. By default it is the Branch-hosted text-me service\n    \n    \n      “$android_url”\n      The replacement URL for the Play Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ios_url”\n      The replacement URL for the App Store to send the user if they don’t have the app. Only necessary if you want a mobile web splash\n    \n    \n      “$ipad_url”\n      Same as above but for iPad Store\n    \n    \n      “$fire_url”\n      Same as above but for Amazon Fire Store\n    \n    \n      “$blackberry_url”\n      Same as above but for Blackberry Store\n    \n    \n      “$windows_phone_url”\n      Same as above but for Windows Store\n    \n  \nYou have the ability to control the direct deep linking of each link by inserting the following optional keys in the dictionary:\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$deeplink_path”\n      The value of the deep link path that you’d like us to append to your URI. For example, you could specify “$deeplink_path”: “radio/station/456” and we’ll open the app with the URI “yourapp://radio/station/456?link_click_id=branch-identifier”. This is primarily for supporting legacy deep linking infrastructure.\n    \n    \n      “$always_deeplink”\n      true or false. (default is not to deep link first) This key can be specified to have our linking service force try to open the app, even if we’re not sure the user has the app installed. If the app is not installed, we fall back to the respective app store or $platform_url key. By default, we only open the app if we’ve seen a user initiate a session in your app from a Branch link (has been cookied and deep linked by Branch)\n    \n  \n"},{"title":"Referral system rewarding functionality","id":"http://dev.branch.io/references/xamarin_sdk/#referral-system-rewarding-functionality","body":"In a standard referral system, you have 2 parties: the original user and the invitee. Our system is flexible enough to handle rewards for all users. Here are a couple example scenarios:1) Reward the original user for taking action (eg. inviting, purchasing, etc)2) Reward the invitee for installing the app from the original user’s referral link3) Reward the original user when the invitee takes action (eg. give the original user credit when their the invitee buys something)These reward definitions are created on the dashboard, under the ‘Reward Rules’ section in the ‘Referrals’ tab on the dashboard.Warning: For a referral program, you should not use unique awards for custom events and redeem pre-identify call. This can allow users to cheat the system."},{"title":"Get reward balance","id":"http://dev.branch.io/references/xamarin_sdk/#get-reward-balance","body":"Reward balances change randomly on the backend when certain actions are taken (defined by your rules), so you’ll need to make an asynchronous call to retrieve the balance. Here is the syntax:```csharp\nBranch branch = Branch.GetInstance ();\nawait branch.LoadRewardsAsync(this);region IBranchRewardsInterface implementation\tpublic void RewardsLoaded ()\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\tpublic void RewardsRedeemed (string bucket, int count)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\tpublic void CreditHistory (List<CreditHistoryEntry> history)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\tpublic void RewardsRequestError (BranchError error)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\nendregion```"},{"title":"Redeem all or some of the reward balance (store state)","id":"http://dev.branch.io/references/xamarin_sdk/#redeem-all-or-some-of-the-reward-balance-store-state","body":"We will store how many of the rewards have been deployed so that you don’t have to track it on your end. In order to save that you gave the credits to the user, you can call redeem. Redemptions will reduce the balance of outstanding credits permanently.```csharp\nBranch branch = Branch.GetInstance ();\nawait branch.RedeemRewardsAsync(this, amount, bucket);region IBranchRewardsInterface implementation\tpublic void RewardsLoaded ()\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\tpublic void RewardsRedeemed (string bucket, int count)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\tpublic void CreditHistory (List<CreditHistoryEntry> history)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\tpublic void RewardsRequestError (BranchError error)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t // Do something with the data...\n\t\t});\n\t}\n\n\t#endregion\n```"},{"title":"Get credit history","id":"http://dev.branch.io/references/xamarin_sdk/#get-credit-history","body":"This call will retrieve the entire history of credits and redemptions from the individual user.  It also implements the IBranchRewardsInterface(see above). To use this call, implement like so:```csharp\nBranch branch = Branch.GetInstance ();\nawait branch.GetCreditHistoryAsync(this);```\n  The response will return an array that has been parsed from the following JSON:\n  ```json\n  [\n      {\n          “transaction”: {\n                             “date”: “2014-10-14T01:54:40.425Z”,\n                             “id”: “50388077461373184”,\n                             “bucket”: “default”,\n                             “type”: 0,\n                             “amount”: 5\n                         },\n          “referrer”: “12345678”,\n          “referree”: null\n      },\n      {\n          “transaction”: {\n                             “date”: “2014-10-14T01:55:09.474Z”,\n                             “id”: “50388199301710081”,\n                             “bucket”: “default”,\n                             “type”: 2,\n                             “amount”: -3\n                         },\n          “referrer”: null,\n          “referree”: “12345678”\n      }\n  ]\n  ```\n  referrer\n  The id of the referring user for this credit transaction. Returns null if no referrer is involved. Note this id is the user id in developer’s own system that’s previously passed to Branch’s identify user API call.\n  referree\n  The id of the user who was referred for this credit transaction. Returns null if no referree is involved. Note this id is the user id in developer’s own system that’s previously passed to Branch’s identify user API call.\n  type\n  This is the type of credit transaction\n\n  0 - A reward that was added automatically by the user completing an action or referral\n  1 - A reward that was added manually\n  2 - A redemption of credits that occurred through our API or SDKs\n  3 - This is a very unique case where we will subtract credits automatically when we detect fraud\n"},{"title":"Get referral code","id":"http://dev.branch.io/references/xamarin_sdk/#get-referral-code","body":"Retrieve the referral code created by current user```csharp\nBranch branch = Branch.GetInstance ();\nawait branch.GetReferralCodeAsync(this, amount);region IBranchReferralInterface implementation\tpublic void ReferralCodeCreated (string code)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\tpublic void ReferralCodeValidated (string code, bool valid)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\tpublic void ReferralCodeApplied (string code)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\tpublic void ReferralRequestError (BranchError error)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\nendregion```"},{"title":"Create referral code","id":"http://dev.branch.io/references/xamarin_sdk/#create-referral-code","body":"Create a new referral code for the current user, only if this user doesn’t have any existing non-expired referral code.In the simplest form, just specify an amount for the referral code.\nThe returned referral code is a 6 character long unique alpha-numeric string wrapped inside the params dictionary with key @”referral_code”.\n  amount int\n  The amount of credit to redeem when user applies the referral code\n```csharp\n// Create a referral code of 5 creditsBranch branch = Branch.GetInstance();\nawait branch.GetReferralCodeAsync(this, 5);region IBranchReferralInterface implementation\tpublic void ReferralCodeCreated (string code)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => { \n\t\t\t// Do something with the data...\n\t\t});\n\t} ...\nendregion```Alternatively, you can specify a prefix for the referral code.\nThe resulting code will have your prefix, concatenated with a 4 character long unique alpha-numeric string wrapped in the same data structure.\n  prefix String\n  The prefix to the referral code that you desire\n```csharp\nBranch branch = Branch.GetInstance();\nawait branch.GetReferralCodeAsync(this, 5, “BRANCH”);region IBranchReferralInterface implementation\tpublic void ReferralCodeCreated (string code)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => { \n\t\t\t// Do something with the data...\n\t\t});\n\t} ...\nendregion```If you want to specify an expiration date for the referral code, you can add an expiration parameter.\nThe prefix parameter is optional here, i.e. it could be getReferralCode(5, expirationDate, new BranchReferralInitListener()…\n  expiration Date\n  The expiration date of the referral code\n```csharp\nBranch branch = Branch.GetInstance();\nawait branch.GetReferralCodeAsync(this, 5, “BRANCH”, expirationDate);region IBranchReferralInterface implementation\tpublic void ReferralCodeCreated (string code)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => { \n\t\t\t// Do something with the data...\n\t\t});\n\t} ...\nendregion```You can also tune the referral code to the finest granularity, with the following additional parameters:\n  bucket String\n  The name of the bucket to use. If none is specified, defaults to ‘default’\n  calculation_type  int\n  This defines whether the referral code can be applied indefinitely, or only once per user\n\n  REFERRAL_CODE_AWARD_UNLIMITED - referral code can be applied continually\n  REFERRAL_CODE_AWARD_UNIQUE - a user can only apply a specific referral code once\n\n  location int\n  The user to reward for applying the referral code\n\n  REFERRAL_CODE_LOCATION_REFERREE - the user applying the referral code receives credit\n  REFERRAL_CODE_LOCATION_REFERRING_USER - the user who created the referral code receives credit\n  REFERRAL_CODE_LOCATION_BOTH - both the creator and applicant receive credit\n```csharp\nBranch branch = Branch.GetInstance();\nawait branch.GetReferralCodeAsync(this, 5, “BRANCH”, expirationDate, “default”, Constants.REFERRAL_CODE_AWARD_UNLIMITED,Constants.REFERRAL_CODE_LOCATION_REFERRING_USER);region IBranchReferralInterface implementation\tpublic void ReferralCodeCreated (string code)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => { \n\t\t\t// Do something with the data...\n\t\t});\n\t} ...\nendregion```"},{"title":"Validate referral code","id":"http://dev.branch.io/references/xamarin_sdk/#validate-referral-code","body":"Validate if a referral code exists in Branch system and is still valid.\nA code is vaild if:\n  It hasn’t expired.\n  If its calculation type is uniqe, it hasn’t been applied by current user.\nIf valid, returns the referral code JSONObject in the call back.\n  code String\n  The referral code to validate\n```csharp\nBranch branch = Branch.GetInstance();\nawait branch.ValidateReferralCodeAsync(this, “code”);region IBranchReferralInterface implementation\t...\n\n\tpublic void ReferralCodeValidated (string code, bool valid)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t\t// Do something with the data...\n\t\t});\n\t}\n\n\t...\nendregion```"},{"title":"Apply referral code","id":"http://dev.branch.io/references/xamarin_sdk/#apply-referral-code","body":"Apply a referral code if it exists in Branch system and is still valid (see above).\nIf the code is valid, returns the referral code JSONObject in the call back.\n  code String\n  The referral code to apply\n```csharpBranch branch = Branch.GetInstance();\nawait branch.ApplyReferralCodeAsync(this, “code”);region IBranchReferralInterface implementation\t...\n\n\tpublic void ReferralCodeApplied (string code)\n\t{\n\t\tDevice.BeginInvokeOnMainThread (() => {\n\t\t// Do something with the data...\n\t\t});\n\t}\n\n\t...\nendregion```"},{"title":"Welcome to Branch!","id":"http://dev.branch.ioundefined","body":"Branch is a smart link for mobile apps with the following features:\n  Deep linking if the app is present or even for fresh installs\n  Smart redirecting from any platform like Facebook, Twitter, Pinterest, Email, SMS, Whatsapp, Messenger and anything you can imagine\n  Lists content on app search portals like Google App Indexing, Bing search through Facebook AppLinks, Apple Spotlight and more\n  Measures clicks and downloads so that you know how to optimize for growth\nThe links just work. In every situation."},{"title":"Getting started","id":"http://dev.branch.ioundefined","body":"In less than 15 minutes you’ll have your own Branch link with the ability to redirect users to your app, the App/Play Store or your website and get powerful click, install and open metrics by campaign and platform.\n  Your first link – create smart deep link for click analytics\n  Integrate the SDK – basic install tracking and deeplinking through install\n  Link and install attribution – a dashboard introduction\n"},{"title":"What to build next","id":"http://dev.branch.ioundefined","body":"Let users share in-app content. iHeartRadio’s shared links open straight to radio stations, Allthecooks’ shared links open straight to recipes. Did we mention that links work across platforms?\n  \n    Content sharing – deeplink to your app content through install from any device\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    App download banner – cross-platform, customizable web banner\n  \n  \n    Text-me-the-app page – your site, Branch’s free text-me-the-app service\n  \n"},{"title":"Testing and releasing","id":"http://dev.branch.ioundefined","body":"We’re developers too, so we know how fun this is. Test out your Branch integration before releasing by following our helpful hints here.\n  \n    Testing your integration – tips for making sure your Branch links are in tip top shape\n  \n  \n    Submitting apps – small things to make sure all goes smoothly with the App Store\n  \n"},{"title":"Details for advanced users","id":"http://dev.branch.ioundefined","body":"Ready to take your links to the next level? Harness the full power of Branch’s customizable metadata. You can find additional information, code snippets and advanced features in this section. Don’t miss out on:\n  \n    Matching accuracy – learn about accuracy and review the controls available\n  \n  \n    Dynamic link creation – create cross-platform deeplinks on the fly\n  \n  \n    Email campaigns –  effortless email campaign tracking\n  \n  \n    Add custom link data and routing – learn where every user is coming from\n  \n  \n    Reward users for driving installs or even custom events that you define, such as “signup” or “purchase”\n  \n  \n    Dashboard pro tips –  viewing influencers, specifying a custom link domain, and more\n  \n  \n    Webhooks and exporting data – doing more with the Branch event stream\n  \n"},{"title":"Third-party integrations","id":"http://dev.branch.ioundefined","body":"\n  \n    Branch + Adjust – a double-sided custom ad measurement integration\n  \n  \n    Branch + Facebook – give users a custom experience based on the ad that brought them to your app!\n  \n  \n    Branch + Google Analytics – Send Branch data to your Google Analytics dashboard.\n  \n  \n    Branch + Localytics – Send Branch attributions to your Localytics dashboard.\n  \n  \n    Branch + Mixpanel – Recommended methods to send Branch data to Mixpanel\n  \n"},{"title":"Additional resources and references","id":"http://dev.branch.ioundefined","body":""},{"title":"Full Stack, Drop-in Feature SDKs","id":"http://dev.branch.ioundefined","body":"\n  \n    Branchified Overshare Sharing SDK\n  \n  \n    Personalized Invite Feature SDK\n  \n"},{"title":"Example Apps","id":"http://dev.branch.ioundefined","body":"\n  \n    Branchsters iOS - app with sharing and deeplinking\n  \n  \n    Branchsters Android - app with sharing and deeplinking\n  \n  \n    Branchsters Web - app with sharing and deeplinking\n  \n"},{"title":"Core SDK Repositories and Reference Docs","id":"http://dev.branch.ioundefined","body":"\n  \n    Android SDK\n  \n  \n    iOS SDK\n  \n  \n    Public API\n  \n  \n    Web SDK\n  \n  \n    PhoneGap (Cordova)\n  \n  \n    Xamarin SDK\n  \n  \n    Unity SDK\n  \n  \n    Adobe AIR SDK\n  \n"},{"title":"Advanced","id":"http://dev.branch.ioundefined","body":"\n  Branch Preferred Partners - leverage Branch links for your own client apps\n"},{"title":"Creating the links","id":"http://dev.branch.ioundefined","body":"\n        \n      Regardless of how the link gets created, all links behave the same way. Links can be created in the following ways:\n  \n    Mobile SDKs: every time a user clicks to share or invite another user, it is best practice to create a new link for that action.\n  \n  \n    Web SDK: you can create links on the fly on your web page that can persist data through an install of your mobile app.\n  \n  \n    HTTP API: a common use case is to batch-create links customized to each of your users for a specific campaign.\n  \n  \n    String builder: you can just take link and append deep link parameters\n  \n  \n    Dashboard: you can manually create custom links that can be tracked and analyzed. Additionally, we support two forms of white-labeling links:\n    \n      using a custom domain name.\n      customizing the URL path, e.g. http://bnc.lt/fall2014discount.\n    \n  \n"},{"title":"Bundling metadata with the link","id":"http://dev.branch.ioundefined","body":"In order to actually pass data “through” install, you must specify the data you wish to be present after install when creating the link. We allow you to specify a free-form key-value dictionary of data (though certain keys carry special meanings that affect the behavior of the link - read on for more about that).Examples of data often present in the dictionary includes (depending on use case):\n  referring user IDs\n  channel\n  the place in the app where the link was shared\n  the content you want the user taken to\n  amount of credits you want to award them\n"},{"title":"Desktop behavior","id":"http://dev.branch.ioundefined","body":"\n        \n      When a user clicks on a desktop, by default, we present them with a page that allows them to resend themselves the link via SMS. Alternately, you can send desktop users to another web page by specifying a value for the key “$desktop_url” when creating a link. In that case, we will redirect users to the value for that key in the link’s data dictionary.If you want your users to retain the option of sending themselves the link they clicked via SMS, you can still use our app download banner on your web page that shows an app banner with an SMS input, or you can use more advanced Web SDK JavaScript with your own HTML widget. If the user was routed to that Web SDK-enabled site from one of our links, we remember that referring link data and continue the link flow."},{"title":"iOS or Android clicks","id":"http://dev.branch.ioundefined","body":"When a user clicks a Branch link on a mobile device, there are three places they can be redirected to:\n  deeplink into the app\n  deeplink into the app store\n  a custom/web destination (“$ios_url” or “$android_url”)\n\n        \n      "},{"title":"Getting the parameters after install or open","id":"http://dev.branch.ioundefined","body":"Once the user has installed or opened your app, you can use the Branch SDK to retrieve the data dictionary associated with the link the user came from. You can use these parameters to route the user to the appropriate place within the app or for other analytics or messaging."}],"ios":[{"title":"Creating links in your app","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#creating-links-in-your-app","body":"Links are the foundation to everything Branch offers. There are many different aspects to creating links but the most important are:\n  Embed key/value deep link metadata. We’ll make sure this gets delivered to the app with the clicking user\n  Label feature and channel for analytics on the dashboard\nHere’s how to create your own Branch Links.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"foo\": @\"bar\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Attaching Custom Data to Links","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#attaching-custom-data-to-links","body":"Branch links allow you to attach any information you want to links. Custom data can be information about an ad campaign, referring user, promotion, or content being shared. You use it to build a personalized referral system so users never see a generic onboarding screen again. You can take users straight to the content they wanted to see when they clicked the link in the first place.Imagine how URLs are used on the Internet… now you have the same power inside your native mobile apps.This data is stored on our backend and presented again when the user clicks on a link via the deepLinkHandler – it’s not simply appended to the end of the URL.   Tip: Aliasing Links\nBecause we don’t store data in the URL, you can create pretty links, like bnc.lt/bob. For information on custom aliases for links, see the section below, Alias – The Custom Ending.\nStore data about both the sharing user and the content shared in the data dictionary. Attaching information is as simple as including a dictionary at link creation time. If, for example, James is inviting friends to check out your app, you could do the following:\n\n[[Branch getInstance] getShortURLWithParams:@{  @\"referringUsername\": @\"James\",\n                                                @\"referringUserId\": @\"1234\",\n                                                @\"contentId\": @\"0987\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);    \n}];\n\nobjective-cswift   Tip: Identify your users!\nYou should identify your users so that you know who is sharing–and who is effectively driving the most installs and engagement.\n"},{"title":"Customizing and Tagging Links","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#customizing-and-tagging-links","body":""},{"title":"Specifying Channel","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#specifying-channel","body":"If you want a breakdown of your best performing channels–whether you measure best performing by most installs, most actual signups, or any other custom events you want to track–you should specify the channel. This can be done both for marketing links on the dashboard and for links created programmatically.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{ @\"foo\": @\"bar\" }\n                                 andChannel:@\"SMS\"\n                                 andFeature:nil\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswiftYou can safely pass in nil for any options you don’t wish to specify."},{"title":"Adding Tags","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#adding-tags","body":"Are you a tag person? You can add as many simply tags as you want to a link. Note that these are not key-value pairs – those belong in the custom data dictionary.No mysteries here:\n\n[[Branch getInstance] getShortURLWithParams:@{}\n                                    andTags:@[@\"any\", @\"other\", @\"tags\", @\"you\", @\"want\"]\n                                 andChannel:nil\n                                 andFeature:nil\n                                   andStage:nil\n                                   andAlias:nil\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Specifying Feature","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#specifying-feature","body":"The more analytics the better. If you want to track whether personalized invites, content shares or gift offers are driving more installs, you can optionally specify a feature tag.By default we provide some suggestions for filling in feature when creating a link. Those are:\n  share\n  referral\n  invite\n  deal\n  gift\nYou should feel free to specify any other “features” as you see fit.Again, the code is straightforward:\n\n[[Branch getInstance] getShortURLWithParams:@{}\n                                 andChannel:@\"SMS\"\n                                 andFeature:@\"invite\"\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"OG Tags - Looking Good on Social Media","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#og-tags---looking-good-on-social-media","body":"If you want to tailor how a link will appear on social media, you should make use of our support for Open Graph (OG) tags. You can customize the OG tags associated with the link by including key-value pairs in the params dictionary when creating a link. Note that these overwrite any defaults that you previously set on the Branch Dashboard.\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$og_title”\n      The title you’d like to appear for the link in social media\n    \n    \n      “$og_description”\n      The description you’d like to appear for the link in social media\n    \n    \n      “$og_image_url”\n      The URL for the image you’d like to appear for the link in social media\n    \n    \n      “$og_video”\n      The URL for the video\n    \n    \n      “$og_url”\n      The URL you’d like to appear\n    \n    \n      “$og_app_id”\n      Your OG app ID. Optional and rarely used.\n    \n  \n\n\n// Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard\nNSMutableDictionary *params = [NSMutableDictionary dictionary];\nparams[@\"$og_title\"] = @\"MyApp is disrupting apps\";\nparams[@\"og_description\"] = @\"Out of all the apps disrupting apps, MyApp is without a doubt a leader. Check us out.\";\n[[Branch getInstance] getShortURLWithParams:params andCallback:^(NSString *url, NSError *error) {\n   // Now we can do something with the URL...\n   NSLog(@\"url: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Alias - The Custom Ending","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#alias---the-custom-ending","body":"Do you want prettier links – perhaps customized to the user?Utilize the appropriate short/long URL method with the parameter alias to set a custom ending. We have left the other parameters blank intentionally. You may customize them as you see fit.\n\n[[Branch getInstance] getShortURLWithParams:nil\n                                 andChannel:nil\n                                 andFeature:nil\n                                   andStage:nil\n                                   andAlias:@\"custom_ending\"\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Custom Redirects","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#custom-redirects","body":""},{"title":"iOS App Store override - $ios_url","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#ios-app-store-override---iosurl","body":"When a user doesn’t have your app and clicks a link on iOS, by default the user is taken to the App Store or Custom URL that you specified on the Dashboard’s Link Settings page. If you want to specify a different destination on a per-link basis, include a value for the $ios_url.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$ios_url\": @\"http://myawesomesite.com/ios-app-landing-page\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url)\n}];\n\nobjective-cswift\n  "},{"title":"Android Play Store override - $android_url","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#android-play-store-override---androidurl","body":"When a user doesn’t have your app and clicks a link on Android, by default the user is taken to the Play Store or Custom URL that you specified on the Dashboard’s Link Settings page. If you want to specify a different destination on a per-link basis, include a value for the $android_url.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$android_url\": @\"http://myawesomesite.com/android-app-landing-page\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift\n"},{"title":"Desktop override - $desktop_url","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#desktop-override---desktopurl","body":"When a user clicks a Branch link from a desktop, by default the user is taken to a text-me-the-app page or whichever custom page you specify on the Dashboard’s Link Settings page. If you want to specify a different web page on a per-link basis, include a value for $desktop_url.This is especially useful if you want to serve up content on the web for users who don’t have your mobile app.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$desktop_url\": @\"http://myawesomesite.com/content/the-desired-content\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift\n"},{"title":"Always try to open the app - $always_deeplink","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#always-try-to-open-the-app---alwaysdeeplink","body":"In certain cases you may want to override the default Branch behavior, which uses cookies and communication with our backend to determine whether to open an app. Branch knows that a user has the app if that user has clicked a Branch link and opened the app. This means that the first time a user clicks a Branch link, even if the app is installed, we will direct the user to the App Store.To override this behavior, you can either select “Always try to open the app” on the Dashboard, or you can specify “$always_deeplink” : “true” on a per-link basis.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$always_deeplink\": @\"true\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift\n"},{"title":"Specify a custom deeplink path - $deeplink_path","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#specify-a-custom-deeplink-path---deeplinkpath","body":"The value of the deeplink path that you’d like us to append to your URI. For example, you could specify “$deeplink_path”: “radio/station/456” and we’ll open the app with the URI “yourapp://radio/station/456?link_click_id=branch-identifier”. This is primarily for supporting legacy deeplinking infrastructure.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"$deeplink_path\": @\"radio/station/456\"} andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Routing","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#routing","body":"Your app can deliver users a custom experience based on the Branch link they clicked on that directed them to the app.This means that you can:\n  customize the signup/login flow\n  take the user straight to a specific screen in your app\n  congratulate the user on getting credits for signing up via a friend’s link\n  … and so on.\nBranch is able to pass data through install. When the user first opens the app, Branch makes a fast asynchronous call to the server to see whether the user has clicked on a link, and if so, what data is associated with it. This means that you should design routing accordingly."},{"title":"Example Code","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#example-code","body":"Routing to content is highly app-specific, since mobile apps vary widely in how they are structured. That said, we want to give a concrete example of how you can use Branch links to route straight to content within your app.Inside of the deepLinkHandler, you will want to examine the params dictionary to determine whether the user clicked on a link to content. Regardless of whether your app involves pictures, videos, text or whatever novel content your app contains, you likely have an internal system of identifiers.Let’s assume your app revolves around pictures and each one is tagged with a picture Id. When a user shares a picture, simply attach a picture Id to the Branch link being created. If a user clicks a link to a specific picture, this Id will show up in the params dictionary in the deepLinkHandler.- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n  // initialize the session, setup a deep link handler\n  [[Branch getInstance] initSessionWithLaunchOptions:launchOptions\n                          andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n\n    // start setting up the view controller hierarchy\n    UINavigationController *navC = (UINavigationController *)self.window.rootViewController;\n    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];\n    UIViewController *nextVC;\n    // If the key 'pictureId' is present in the deep link dictionary\n    // then load the picture screen with the appropriate picture\n    NSString *pictureId = [params objectForKey:@\"pictureId\"];\n    if (pictureId) {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"PicVC\"];\n      [nextVC setNextPictureId:pictureId];\n    } else {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"MainVC\"];\n    }\n    [navC setViewControllers:@[nextVC] animated:YES];\n  }];\n\n  return YES;\n}For a concrete example of giving users a customized experience via Branch links, check out our Branchster Example."},{"title":"Additional Options","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#additional-options","body":""},{"title":"Adding Stage","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#adding-stage","body":"Stage is one of our lesser used options but is useful nonetheless. Useful for tracking at what stage in your app a link was created. Stage is fully determined by you and is specific to each app. Sample stages include:\n  pre_signup\n  mid_signup\n  post_signup\n  viewing_content\n  on_home_screen\nIf your app is a game, stage could require to the user’s current level.\n\n[[Branch getInstance] getShortURLWithParams:nil andTags:nil andChannel:nil andFeature:nil andStage:@\"4\" andAlias:nil andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Match Duration","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/ios/#match-duration","body":"When we see a link click, we generate a fingerprint for users and store that fingerprint for a limited time – 2 hours by default. That browser fingerprint includes IP address, OS, OS version, etc. Then when that same user who clicked the link opens up an app with the Branch SDK, Branch creates a device fingerprint based on the same parameters and checks with the server to see if a matching browser fingerprint exists.It’s possible, albeit rare, for collisions to occur where two people on the same network have identical hardware, are running identical software, and click a link at the same time (and neithe of them have ever used an app with Branch before). One way to avoid these collisions is to shorten the time window that a browser fingerprint is stored on our servers waiting for a matching device fingerprint.You can adjust how long the browser fingerprint is stored in the browser by setting a duration when you click the link.\n\n[[Branch getInstance] getShortURLWithParams:@{}\n                                 andChannel:@\"SMS\"\n                                 andFeature:nil\n                                   andStage:nil\n                           andMatchDuration:(60*60*2)\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Tracking Events","id":"http://dev.branch.io/recipes/advanced_referral_incentives/ios/#tracking-events","body":"Note: for analytics and custom events to be useful to you the developer, be sure to identify your users. To see how to identify your users, click here."},{"title":"Standard Events","id":"http://dev.branch.io/recipes/advanced_referral_incentives/ios/#standard-events","body":"Branch automatically tracks opens, installs, referred sessions and web session start. You don’t need to write any special code–as soon as you start initializing sessions and clicking on Branch links, these events are recorded.You can easily see these events by navigating the Dashboard’s Export page and clicking on Events.These three events are tied to the initSession and handleOpenURL calls."},{"title":"Custom Events","id":"http://dev.branch.io/recipes/advanced_referral_incentives/ios/#custom-events","body":"You can track any custom user actions you wish. This is useful for analytics. From these events you can construct conversion funnels on the Dashboard’s Summary page at the bottom. You can also be notified via a postback to your server every time that an event happens. Visit the Webhooks page for more information on receiving postbacks.Examples of what you may want to track:\n  sign up (especially if you have multiple steps)\n  purchases\n  content shares\n  referrals sent\n  any other engagement, etc.\nTo track custom events, you can make a simple call to the SDK.\n\n[[Branch getInstance] userCompletedAction:@\"customAction\"];\n\nobjective-cswiftYou can also include other information about the action, which is useful for rewarding user actions or receiving additional information via our webhooks. To include custom information, pass it up via the state dictionary:\n\n[[Branch getInstance] userCompletedAction:@\"purchase\" withState:@{@\"item\":@\"123-AB-456\"}];\n\nobjective-cswift"},{"title":"Rewards","id":"http://dev.branch.io/recipes/advanced_referral_incentives/ios/#rewards","body":""},{"title":"Overview: Credits and Reward Rules","id":"http://dev.branch.io/recipes/advanced_referral_incentives/ios/#overview-credits-and-reward-rules","body":"Branch allows you reward users with credits, track those credits, and redeem them when appropriate. It is a unit-less currency available to your users without you having to build a system from scratch.If you decide to track user credits through the Branch platform, then you must configure reward rules on the dashboard and tie them to events that occur in your app. Think of the system like this, your users are constantly completing a steady stream of actions in your app: install, signup, product_purchased. Using the Branch reward rules, you tie reward events to specific actions. Then, with every event that is saved in Branch, we check automatically if that event is eligible for credits based on the rules that you configured, then deposit the credits if so. It’s very powerful."},{"title":"Reward Rule Basics","id":"http://dev.branch.io/recipes/advanced_referral_incentives/ios/#reward-rule-basics","body":"\n        \n      To award users for credits, you must set up a reward rule tied to a specific events.Reward rules can be based on standard Branch-defined events like install, open and referred session. They can also be based on custom events.To add a rule, go to the Dashboard Referrals page and click the Rules tab. Click the green “+ Add a new rule” button.These allow you to tailor:\n  Who gets a reward\n  How many credits the reward is\n  Which bucket the credits go to\n  Whether the reward occurs the first time or every time\n  Which event triggers the reward\nWhile the following screen is a bit busy, it illustrates where you adjust these five toggles.\n        \n      Let’s say you want to give 10 credits to each new user who signs up through a friend, and 5 credits to the friend who referred him or her. That can be done through a combination of (two rules.Rule 1: Rewarding the Referred User (10 Credits)\n        \n      \n  Who gets a reward: “Referred acting users”\n  How many credits the reward is: 10\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: the first time\n  Which event triggers the reward: install\nBe sure to press “Add rule”!Rule 2: Rewarding the Referring User (5 Credits)\n        \n      \n  Who gets a reward: “Referring users”\n  How many credits the reward is: 5\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: every time\n  Which event triggers the reward: install\nAfter adding this second rule, you should see the following:\n        \n      That’s it!Rewards are flexibleBranch’s credit system:\n  is based on either Branch-provided events (install, open, and referred session) or any custom events you track with a userCompletedAction call.\n  allows you to define as many “virtual wallets” per user as you want. These are called buckets and if no bucket is specified, the default bucket is debited/credited.\n  has built-in functions for rewarding, checking the balance, and redeeming credits.\n  enables you to specify rewards dynamically using Reward Rules on the dashboard.\n  comes with fraud protection built in.\n"},{"title":"Promo Codes","id":"http://dev.branch.io/recipes/advanced_referral_incentives/ios/#promo-codes","body":"\n        \n      At Branch, we are quite opinionated about promo codes: they are an unnecessary hack. Promo codes are never the end goal–rewarding users for sharing and giving proper attribution for installs and signups is the end goal. Our links achieve these goals without requiring users to manually copy, paste and validate promo codes.That said, there are certain situations in which promo codes may be preferable to links, such as printed marketing collateral. (Even then we’d argue for short links–save users from searching through a long list of apps on the App Store / Play Store!) For this case, we provide promo codes. They are used solely to give users credits. They are not a substitute for install attribution, nor do they create the referring-referred relationship needed to trigger reward rules.If you want to share promo codes on printed marketing collateral, you can set them up on the Dashboard under Referrals > Reward Rules > “+ Add new rule” and choose “Promo Code”. Again, these can only be used to give credits to users–they do notYou can also find methods to create promo codes programmatically, but they are limited to one per user (i.e. one per identity). A simple search for the word “code” will locate the appropriate methods.Again, we don’t recommend using promo codes, but they can be useful in certain cases."},{"title":"IsReferrable","id":"http://dev.branch.io/recipes/advanced_referral_incentives/ios/#isreferrable","body":"Branch’s default behavior is to track which users refer other users. Also by default, a “referral” event is only recorded if a user who clicked on a link has never opened the app before. The first time he or she clicks a shared Branch link and opens the app, it counts as a referral.This default behavior can be overridden by modifying the initSessionWithLaunchOptions:andRegisterDeepLinkHandler: method in application:didFinishLaunchingWithOptions:. Replace the method call with the following:\n\n[branch initSessionWithLaunchOptions:launchOptions isReferrable:@YES andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {     // previously initUserSessionWithCallback:withLaunchOptions:\n   if (!error) {\n       // This can now count as a referred session even if this isn't\n       // the first time a user has opened the app (aka an \"Install\").\n       // ... insert custom logic here ...\n   }\n}];\n\nobjective-cswiftYou can set isReferrable to @YES or @NO (Swift: true or false), and the behavior is as follows:\n  \n    @YES (Swift true): Now a connection can be established between a referring user and a referred user during any session, not just the very first time a user opens the app. This means that if a user signs up without clicking on a shared Branch link but later clicks on a link, the referring-referred connection is established. (In the example in part 3 below, if Bob’s friend Amy had already found and opened the app on her own but later came back to it because Bob sent her a link, Bob is the referring user and Amy is the referred user.) There can only be one referring user for any given user (e.g. as soon as Amy clicks a link from Bob, Bob is her referrer and no subsequent shared Branch links will change that). There are specific use cases where you may want this flexibility–feel free to reach out if you have questions.\n  \n  \n    @NO (Swift false): If isReferrable is set to @NO, your app will never track the relationship between referring users and referred users. While we’re not sure why you wouldn’t want such valuable information, it is certainly an option.\n  \nNote that the default behavior when isReferrable is not set is different from both @YES and @NO. It relates the current user to a referring user ONLY for the very first open (aka “Install”)."},{"title":"How It Works","id":"http://dev.branch.io/recipes/analytics_ga/ios/#how-it-works","body":"We use webhooks to set up a relationship where any event data gets sent to Google Analytics Measurement Protocol. In addition to event data, you can tack on any extra data you choose as appropriate based off the listed parameters found on this document.Because you can track events through Branch’s SDK, you can specify all event meta data as part of the event you send to Google Analytics in addition to the standard event data you send for a user ID."},{"title":"Set Up","id":"http://dev.branch.io/recipes/analytics_ga/ios/#set-up","body":"Before we can start sending data to Google Analytics, we need 4 properties found on your account. The following properties are:\n  v - refers to version\n  tid - refers to your tracking or property ID\n  cid - refers to your anonymous client ID\n  t - refers to your hit type\n  ec - refers to your event category\n  ea - refers to your event action\nWith those six parameters in handy, you can begin to track events with the Branch SDK, and have them properly formatted to send to Google Analytics via our Webhook system.   Still need the GA SDK?Yes, it is required that you have a Google Analytics account with a mobile property created. You also need to integrate their SDK.\n"},{"title":"Save Event Inside App","id":"http://dev.branch.io/recipes/analytics_ga/ios/#save-event-inside-app","body":"Before we can tell Google Analytics of an event, we need to save the event to the Branch system, with a minimum of the six details found in the previous step.NSDictionary *state = @{\n    @\"v\":@\"1\",\n    @\"tid\":@\"12345\",\n    @\"cid\":@\"67890\",\n    @\"t\":@\"event\",\n    @\"ec\":@\"commerce\",\n    @\"ea\": @\"purchase\",\n    @\"el\": @\"red_shoes\", /* event label */\n    @\"ea\": 300 /* event value */ };\n\n// event tracking via our SDK\n[[Branch getInstance] userCompletedAction:@\"purchase\" withState:state];\nOnce you have saved these events inside your application, Branch will track the counts of each time the event purchase occurred, with the exact user, and will retain meta data for each user-event.   IdentitiesSince Branch tracks identity, we recommend you keep the property “cid” the same as what you would use if you were calling setIdentity through the Branch SDK.\n"},{"title":"Configure Webhook","id":"http://dev.branch.io/recipes/analytics_ga/ios/#configure-webhook","body":"Now that you’re saving events through Branch’s SDK, it’s time to deliver the data to Google Analytics."},{"title":"Endpoint Set Up","id":"http://dev.branch.io/recipes/analytics_ga/ios/#endpoint-set-up","body":"Since we cannot set the body of the POST message yet, we require you to use a GET when sending data to Google Analytics.The base endpoint url is:\nhttp://www.google-analytics.com/collect\n\n\nGET /collect?payload_data\nYou will append payload data as needed as a query string after collect."},{"title":"Tempalates","id":"http://dev.branch.io/recipes/analytics_ga/ios/#tempalates","body":"Because you will not know the values of the specified keys when inputting the url into the webhook box, you will need to use templates.Our full guide on templates are here, but provided is a sample url needed to send data to Google Analytics:\nhttp://www.google-analytics.com/collect?v=1&tid=12345&cid=/\\{\\{/ event.metadata.cid /\\}\\}/&t=event&ec=/\\{\\{/ event.metadata.ec /\\}\\}/&ea=/\\{\\{/ event.metadata.ea /\\}\\}/&el=/\\{\\{/ event.metadata.el /\\}\\}/&z=42\nYou will also need to remove the forward and backward slashes.   Why the Z parameter?Sometimes, GET requests can be cached. In order to ‘bust’ the cache, Google recommends appending a parameter, labeled Z, with a random number, so that every GET request is fresh. More information\n"},{"title":"Testing","id":"http://dev.branch.io/recipes/analytics_ga/ios/#testing","body":"Finally, when it is all said and done, we recommend you send the requests to postbin first to ensure that every time a Branch event is hit, that the proper values are sent in the GET request. When that is taken care of, you can add the webhook with the proper URL and start sending events to Google Analytics!"},{"title":"Getting Started","id":"http://dev.branch.io/recipes/analytics_mixpanel/ios/#getting-started","body":"In case you leverage Mixpanel to track in-app events, or want to segment users from Branch installs and calculate LTV, or any other unique use case, we can support you through a couple of methodologies.We have two methods to synchronize data between services. The first is using Branch callbacks to make a call to Mixpanel. This is under methodology 1, Track Through SDK. The second is using Templated Webhooks to deliver data to your backend, which can then send that data to Mixpanel. This is under methodology 2, Track Through Webhooks.Methodology 1 is a simpler integration, but provides less flexibility. Methodology 2 is an advanced integration, but provides a bit more flexibility."},{"title":"Track Through SDK","id":"http://dev.branch.io/recipes/analytics_mixpanel/ios/#track-through-sdk","body":"Pre-Reqs:\nSuccessful integration of both the Mixpanel and Branch SDKs\nMethods mapped out inside apps that want to event data sent to Mixpanel\nThe easiest way to send event data that comes in from Branch is to invoke the Mixpanel event tracking function inside any Branch callback.In this example, we’ll take an instance of an install responsible by Branch. We let you know if an install (or referred session if a user already had the app) was caused by Branch, by examining the referred parameter.[branch initSessionWithLaunchOptions:launchOptions andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n    if (!error) {\n    \tif ([params[@\"referred\"]]) {\n        \t// Add call here to let MP know a Branch-driven install occurred\n        \t[Mixpanel track:@\"install\" properties:params];\n        }\n    }\n}];\nMixpanel would then receive the Branch install event, and you would know Branch is responsible because referred would equal true inside the properties argument."},{"title":"Identity And Customer Segments / Profiles","id":"http://dev.branch.io/recipes/analytics_mixpanel/ios/#identity-and-customer-segments--profiles","body":"Let’s say you want to take it a step further and track Branch specific installs and users inside your segments for Mixpanel. We have support for that as well. The way to leverage that would be with the following:\n  After a successful Branch session, set an identity.\n  Set an identity in Mixpanel\n  Track events.\nSince you set identity depending on your user authentication flow, we’d recommend taking care of that first. When that’s done, all you need to do is the following:[[Branch getInstance] userCompletedAction:@\"purchase\" withState:@{@\"item\":@\"123-AB-456\"}];\n[[Mixpanel sharedInstance] track:@\"purchase\" properties:@{@\"item\":@\"123-AB-456\"}];\n"},{"title":"Track Through Webhooks","id":"http://dev.branch.io/recipes/analytics_mixpanel/ios/#track-through-webhooks","body":"Pre-Reqs:\nA server that accepts GET or POST commands\nMixpanel back-end SDK configured to upload data to Mixpanel account\nIn this methodology, you will need to configure the GET or POST with our webhooks. You will specify what parameter is passed through to your server in addition to the data we provide, which is found below:{\n\t\"event\": \"open\",\n\t\"metadata\": {\n\t\t\"ip\": \"73.222.120.96\",\n\t\t\"referred\": false\n\t},\n\t\"session_referring_link_data\": {\n\t\t\"app_id\": \"98444119008870744\",\n\t\t\"tag\": null,\n\t\t\"campaign\": null,\n\t\t\"channel\": null,\n\t\t\"feature\": \"marketing\",\n\t\t\"stage\": null,\n\t\t\"tags\": null,\n\t\"data\": {\n\t\t\"$marketing_title\": \"Testing Mixpanel K/V\",\n\t\t\"extra_data\": \"1234\"\n\t},\n\t\t\"state\": null,\n\t\t\"alias\": null,\n\t\t\"date\": \"2015-04-27T18:25:36.402Z\",\n\t\t\"href\": \"/l/4ix6DwE_4U\",\n\t\t\"branch_id\": \"121303087695532448\"\n\t},\n\t\"os\": \"Android\",\n\t\"os_version\": \"19\"\n}\nThis is the base body that we send over, but you will use [[Branch getInstance] trackEvent:”@exciting_event” withState:state]] to attach any state variables you need (state being a JSON Dictionary)."},{"title":"The Smart Banner","id":"http://dev.branch.io/recipes/app_download_banner/ios/#the-smart-banner","body":"\n        \n         This just works!\nThis short snippet of code below is enough to add a web banner to both your desktop and mobile web pages! Of course, you’ll want to configure it, so check out both the Smart Banner Options and Link Options below.\nAdd the following code somewhere inside the <head> </head> tags on your website. Be sure to replace YOUR-BRANCH-KEY with your Branch Key inside the init() call. You can find your Branch Key on the Dashboard’s Settings page.<script type=\"text/javascript\">\n  (function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.8.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits creditHistory applyCode validateCode getCode redeem banner closeBanner\".split(\" \"),0);\n\n  branch.init('YOUR-BRANCH-KEY');\nbranch.banner({\n    icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n    title: 'Branch Demo App',\n    description: 'The Branch demo app!'\n}, {});\n\n</script>That’s all you need to add the smart banner to your website! The rest of this page covers advanced options.Closing the App Banner ProgrammaticallyThe App Banner includes a close button the user can click, but you may want to close the banner with a timeout, or via some other user interaction with your web app. In this case, closing the banner is very simple by calling Branch.closeBanner().js\nbranch.closeBanner();\nSmart Banner Options, Link OptionsThere are a lot of options here, but don’t be scared. Specifying them is optional, although you’ll probably want to do so to tailor it to your needs.branch.banner({\n    icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n    title: 'Branch Demo App',\n    description: 'The Branch demo app!',\n    openAppButtonText: 'Open',              // Text to show on button if the user has the app installed\n    downloadAppButtonText: 'Download',      // Text to show on button if the user does not have the app installed\n    sendLinkText: 'Send Link',              // Text to show on desktop button to allow users to text themselves the app\n    phonePreviewText: '+44 9999-9999',      // The default phone placeholder is a US format number, localize the placeholder number with a custom placeholder with this option\n    showiOS: true,                          // Should the banner be shown on iOS devices?\n    showAndroid: true,                      // Should the banner be shown on Android devices?\n    showDesktop: true,                      // Should the banner be shown on desktop devices?\n    iframe: true,                           // Show banner in an iframe, recomended to isolate Branch banner CSS\n    disableHide: false,                     // Should the user have the ability to hide the banner? (show's X on left side)\n    forgetHide: false,                      // Should we show the banner after the user closes it? Can be set to true, or an integer to show again after X days\n    position: 'top',                        // Sets the position of the banner, options are: 'top' or 'bottom', and the default is 'top'\n    mobileSticky: false,                    // Determines whether the mobile banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to false *this property only applies when the banner position is 'top'\n    desktopSticky: true,                    // Determines whether the desktop banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to true *this property only applies when the banner position is 'top'\n    customCSS: '.title { color: #F00; }',   // Add your own custom styles to the banner that load last, and are gauranteed to take precedence, even if you leave the banner in an iframe\n    make_new_link: false                    // Should the banner create a new link, even if a link already exists?\n}, {\n    tags: ['tag1', 'tag2'],\n    feature: 'dashboard',\n    stage: 'new user',\n    type: 1,\n    data: {\n        mydata: 'something',\n        foo: 'bar',\n        '$desktop_url': 'http://myappwebsite.com',\n        '$ios_url': 'http://myappwebsite.com/ios',\n        '$ipad_url': 'http://myappwebsite.com/ipad',\n        '$android_url': 'http://myappwebsite.com/android',\n        '$og_app_id': '12345',\n        '$og_title': 'My App',\n        '$og_description': 'My app\\'s description.',\n        '$og_image_url': 'http://myappwebsite.com/image.png'\n    }\n});   Deeplinking through Install\nThis data dictionary containing foo: 'bar' etc is where you put data that you want passed through install. This is discussed in the next section on Routing.\n"},{"title":"(Optional) Routing: passing information from the Banner","id":"http://dev.branch.io/recipes/app_download_banner/ios/#optional-routing-passing-information-from-the-banner","body":"Now that you’ve added routing to your app, you can add information to the Smart Banner. If you’ve used the example Smart Banner code above, you simply need to insert any key-value pairs you’d like into the data dictionary.Using our example of routing above with the PicVC, you’d simply need to change the Web Banner code to the following:branch.banner(options, {\n    phone: '9999999999',\n    type: 1,\n    data: {\n        'pictureId': '12345',\n    }\n});Now when a user clicks on the Smart Banner on a mobile device, when they open your app they will be taken straight to a view controller to see picture with id “12345”. It’s that simple.Deep linking has countless possibilities and we’d be happy to brainstorm use cases for your specific app. Happy building!"},{"title":"Conclusion","id":"http://dev.branch.io/recipes/app_download_banner/ios/#conclusion","body":"You’ve learned how to add a smart banner to your website with minimal configuration and some copying-and-pasting Javascript into your website. Perhaps the allure of passing data through install or deep linking to content caught your eye and you added the SDK to your iOS app. There’s a ton more that Branch can do. For example, you can:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Creating links programmatically to share content","id":"http://dev.branch.io/recipes/content_sharing/ios/#creating-links-programmatically-to-share-content","body":"Links are the foundation to everything Branch offers. There are many different aspects to creating links but the most important are:\n  Embed key/value deep link metadata. We’ll make sure this gets delivered to the app with the clicking user\n  Label feature and channel for analytics on the dashboard\nHere’s how to create your own Branch Links.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"foo\": @\"bar\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift   Data is for Deeplinking\nYou use the data to link directly to content! Instead of “foo”: “bar”, you could pass in “pictureId”: “1234”, then when a user clicks on a link you can open the app straight to picture with Id 1234. Keep reading…\n"},{"title":"Routing to content within your iOS app","id":"http://dev.branch.io/recipes/content_sharing/ios/#routing-to-content-within-your-ios-app","body":"Routing to content is highly app-specific, since mobile apps vary widely in how they are structured. That said, we want to give a concrete example of how you can use Branch links to route straight to content within your app.Inside of the deepLinkHandler, you will want to examine the params dictionary to determine whether the user clicked on a link to content. Regardless of whether your app involves pictures, videos, text or whatever novel content your app contains, you likely have an internal system of identifiers.Let’s assume your app revolves around pictures and each one is tagged with a picture Id. When a user shares a picture, simply attach a picture Id to the Branch link being created. If a user clicks a link to a specific picture, this Id will show up in the params dictionary in the deepLinkHandler.- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n  // initialize the session, setup a deep link handler\n  [[Branch getInstance] initSessionWithLaunchOptions:launchOptions\n                          andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n\n    // start setting up the view controller hierarchy\n    UINavigationController *navC = (UINavigationController *)self.window.rootViewController;\n    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];\n    UIViewController *nextVC;\n    // If the key 'pictureId' is present in the deep link dictionary\n    // then load the picture screen with the appropriate picture\n    NSString *pictureId = [params objectForKey:@\"pictureId\"];\n    if (pictureId) {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"PicVC\"];\n      [nextVC setNextPictureId:pictureId];\n    } else {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"MainVC\"];\n    }\n    [navC setViewControllers:@[nextVC] animated:YES];\n  }];\n\n  return YES;\n}"},{"title":"Sharing Methods (Optional)","id":"http://dev.branch.io/recipes/content_sharing/ios/#sharing-methods-optional","body":""},{"title":"Sharing via SMS","id":"http://dev.branch.io/recipes/content_sharing/ios/#sharing-via-sms","body":"To quickly share via SMS/iMessage, we’ve included some code that you can copy and paste into your own app. This is all the code you need to get users started on inviting other users!First, note that this is making an asynchronous call to Branch’s servers to generate the link and attach the information provided in the params dictionary. We highly recommend showing the user a spinner and disabling your “share” button while the link is being generated. You can either use UIActivityIndicatorView (native) or an external library like MBProgressHUD.At the top of your view controller’s implementation (.m) file, include the following:\n\n#import <MessageUI/MessageUI.h>\n#import <MessageUI/MFMailComposeViewController.h>\n\nobjective-cswiftThen be sure to indicate that your view controller conforms to MFMessageComposeViewControllerDelegate protocol. This is done by modifying the @interface line of your view controller’s implementation (.m) file.\n\n@interface MyAppViewController () <MFMessageComposeViewControllerDelegate>\n\nobjective-cswiftThe following code should go in some method triggered by the user (such as when the user taps on a button).\n\nNSDictionary *params = @{@\"referringUsername\": @\"Bob\",\n                         @\"referringUserId\": @\"1234\"};\n// ... insert code to start the spinner of your choice here ...\n[[Branch getInstance] getShortURLWithParams:params\n                                 andChannel:@\"SMS\"\n                                 andFeature:@\"Referral\"\n                                andCallback:^(NSString *url, NSError *error) {\n    if (!error) {\n        // Check to make sure we can send messages on this device\n        if ([MFMessageComposeViewController canSendText]) {\n            MFMessageComposeViewController *messageComposer =\n                [[MFMessageComposeViewController alloc] init];\n            // Set the contents of the SMS/iMessage -- be sure to include the URL!\n            [messageComposer setBody:[NSString stringWithFormat:\n                @\"Check out MyApp -- use my link to get free  points: %@\", url]];\n            messageComposer.messageComposeDelegate = self;\n            [self presentViewController:messageComposer animated:YES completion:^{\n                // ... insert code to stop the spinner here\n            }];\n        } else {\n            // ... insert code to stop the spinner here\n            [[[UIAlertView alloc] initWithTitle:@\"Sorry\"\n                                        message:@\"Your device cannot send messages.\"\n                                       delegate:nil\n                              cancelButtonTitle:@\"Okay\"\n                              otherButtonTitles:nil] show];\n        }\n    }\n}];\n\nobjective-cswiftLastly, there is a required delegate method for the MessageComposeViewController. We provide an empty implementation, which you are free to customize.\n\n- (void)messageComposeViewController:(MFMessageComposeViewController *)controller\n                 didFinishWithResult:(MessageComposeResult)result {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\nobjective-cswiftThe above code allows you to quickly implement sharing via SMS. See the screenshot below!\n        \n      "},{"title":"Sharing via the Branch UIActivityItemProvider","id":"http://dev.branch.io/recipes/content_sharing/ios/#sharing-via-the-branch-uiactivityitemprovider","body":"\n\n// Adding text\nNSString *shareString = @\"Super amazing thing I want to share!\";\n\n// Adding an image\nUIImage *amazingImage = [UIImage imageNamed:@\"Super-Amazing-Image.png\"];\n\n// Custom data\nNSMutableDictionary *params = [[NSMutableDictionary alloc] init];\n[params setObject:@\"Joe\" forKey:@\"user\"];\n[params setObject:@\"https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg\" forKey:@\"profile_pic\"];\n[params setObject:@\"Joe likes long walks on the beach...\" forKey:@\"description\"];\n[params setObject:@\"Joe's My App Referral\" forKey:@\"$og_title\"];\n[params setObject:@\"https://s3-us-west-1.amazonaws.com/myapp/joes_pic.jpg\" forKey:@\"$og_image_url\"];\n[params setObject:@\"Join Joe in My App - it's awesome\" forKey:@\"$og_description\"];\n[params setObject:@\"http://myapp.com/desktop_splash\" forKey:@\"$desktop_url\"];\n\nNSArray *tags = @[@\"tag1\", @\"tag2\"];\nNSString *feature = @\"invite\";\nNSString *stage = @\"2\";\n\n// Adding a link -- Branch UIActivityItemProvider\nUIActivityItemProvider *itemProvider = [Branch getBranchActivityItemWithParams:params andFeature:feature andStage:stage andTags:tags];\n\n// Pass this in the NSArray of ActivityItems when initializing a UIActivityViewController\nUIActivityViewController *shareViewController = [[UIActivityViewController alloc] initWithActivityItems:@[shareString, amazingImage, itemProvider] applicationActivities:nil];\n\n// Present the share sheet!\n[self.navigationController presentViewController:shareViewController animated:YES completion:nil];\n\nobjective-cswift\n        \n      "},{"title":"Conclusion","id":"http://dev.branch.io/recipes/content_sharing/ios/#conclusion","body":"Now that you’ve completed the basic integration, you can skip steps one (Configuring the Dashboard) and two (Configuring the Client) in the following guides. Next steps:\n  Link and install attribution – learn where every user is coming from\n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    Branch + Facebook – give users a custom experience based on the ad that brought them to your app!  (Skip Steps 1 and 3)\n  \n  Referrals with incentives – reward users based on the installs or engagement they generate\nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"“Always try to open the app”","id":"http://dev.branch.io/recipes/dashboard_pro_tips/ios/#always-try-to-open-the-app","body":"By default, Branch will take users to the App Store if we do not know that the user has your app. So the first time a user clicks a link, we take him or her to the Store (or, on iOS, $ios_url).The reason we do this is to avoid an ugly error message if the URI scheme fires and fails. By tracking users we’ve seen before with a cookie, we can know whether or not they have your app installed.If you want to override the behavior and try the URI scheme first every time (with a fallback to the App Store after .5 seconds), you can turn on the option “Always try to open the app.” You can see it in the screenshot below or on the Link Settings page."},{"title":"Setting a custom link domain","id":"http://dev.branch.io/recipes/dashboard_pro_tips/ios/#setting-a-custom-link-domain","body":"While you may enjoy Branch, it doesn’t mean you need to have bnc.lt as a part of every link you send out. If you want Branch links to use your custom subdomain, you need to follow a few simple steps.\n  You need to choose a subdomain, let get.myapp.co.\n  You need to point the CNAME record for this subdomain at us – bnc.lt is our link service.\n  After you’ve confirmed that the CNAME records have propagated throughout the internet, you need to set your custom subdomain on our Dashboard > Settings > Link Settings > Custom Link Domain. See the screenshot below.\nAfter you set this up, the custom subdomain you specify will be the basis of all Branch links created. As a side note, if a user types in your custom subdomain on its own (e.g. get.myapp.co), we will redirect to your Default URL as specified on the Link Settings page.Lastly, if you want to use your root-level domain (like myapp.com), you will need to make use of a service like CloudFlare. Check out the following two articles:\n  https://blog.cloudflare.com/zone-apex-naked-domain-root-domain-cname-supp/\n  https://support.cloudflare.com/hc/en-us/articles/200169056-CNAME-Flattening-RFC-compliant-support-for-CNAME-at-the-root\n   Changing subdomains is painful\nChanging between custom subdomains (e.g. from get.myapp.com to download.myapp.com) is painful and should be avoided at all costs. Some links will be migrated, others will stop working. We recommend you pick a subdomain you like and stick with it for the long haul!\n"},{"title":"Dashboard Summary","id":"http://dev.branch.io/recipes/dashboard_pro_tips/ios/#dashboard-summary","body":"\n        \n      The Dashboard’s Summary page is quite powerful. You can see:\n  Total installs\n  Time plot and pie chart: Branch-driven installs by feature, campaign, channel and tags over time\n  Clicks, installs and opens by platform (desktop, Android, iOS), as well as by campaign, channel, etc.\n  Conversion funnels\n"},{"title":"Funnels","id":"http://dev.branch.io/recipes/dashboard_pro_tips/ios/#funnels","body":"You can construct conversion funnels of both Branch-defined events and custom events. At the bottom of the Dashboard’s Summary page you can see Conversions.Simply select two or more events to see a conversion funnel. For example, if you track a custom event called purchase, you can track how many referred sessions led to purchases.This is how the funnel looks:\n        \n      "},{"title":"Influencers: Your Best Users","id":"http://dev.branch.io/recipes/dashboard_pro_tips/ios/#influencers-your-best-users","body":"Branch allows you to easily see which users are driving the most actual installs – not just pressing the share button the most.To see this info, follow the required steps for configuring your iOS app, which can be found in our quick-start guide Integrating the SDK. After you have done this and users start to invite other users, you will see the Influencers page, which is part of the Referrals section.Here’s what your results should look like:\n\n        \n         Identify your users!\nYou must identify your users in order for the User ID column to be populated.\nThe Branch ID refers to the internal Branch ID associated with that user. It is set automatically in the SDK."},{"title":"Introduction","id":"http://dev.branch.io/recipes/email_campaigns/ios/#introduction","body":"Branch Links enable deep linking, install attribution, and in-depth analytics. While configuring your apps–whether Android, iOS or web–enables you to be much more powerful, basic links can be set up before writing a line of code.You can do this from the Branch Dashboard. We will first walk you through creating an app, then proceed to link creation."},{"title":"Basic Setup","id":"http://dev.branch.io/recipes/email_campaigns/ios/#basic-setup","body":"Note, if you already completed these steps in the guide Your First Link, then you can skip down to the next section, Creating your Link."},{"title":"App Name","id":"http://dev.branch.io/recipes/email_campaigns/ios/#app-name","body":"To get started, point your browser to https://dashboard.branch.io/"},{"title":"Web URL","id":"http://dev.branch.io/recipes/email_campaigns/ios/#web-url","body":"\n        \n      This is where we will take users who click a Branch link if we don’t know where else to take them. For example, if you don’t have an Android app released yet, Android users will be taken to this link. Don’t forget to Save!To configure the Web URL on an existing app, you will need to navigate to the Settings > Link Settings page on the Dashboard. Scroll down to Default URL and enter your website.   Tip:\nYou can customize this fallback URL on a per-platform or even per-link basis. After completing setup, you may want to check out our section on Custom Redirects.\n"},{"title":"App Store or custom URL","id":"http://dev.branch.io/recipes/email_campaigns/ios/#app-store-or-custom-url","body":"\n        \n      Part of the magic of Branch Links is that you can have different configurations for iOS, Android, Fire… – and it just works! In this section, you need to specify where the user can download your app.When setting up an iOS app, you need to locate your app in the App Store. Start typing the name of your app and it should show up in the box.You may be wondering–what if I can’t find my app, or it isn’t on the App Store yet? Good news: you can specify any location you want. For iOS apps, you can put in the URL provided by Apple on iTunesConnect (if you anticipate going live soon) or you can specify a custom URL to wherever the app is hosted remotely.   Note:\nThis field is required. If you are in the early stages of testing, you can enter a Custom URL (http://google.com works).  Then when you click a Branch link, instead of navigating to the App Store, it will go to this URL. Then you can simulate an install by running the app from Xcode.\nThat’s the end of the required setup for the Dashboard! The dashboard is incredibly powerful, so if you want to dive in deeper, definitely check out Configuring the Dashboard for the full setup."},{"title":"Creating your Link","id":"http://dev.branch.io/recipes/email_campaigns/ios/#creating-your-link","body":""},{"title":"Add a marketing link","id":"http://dev.branch.io/recipes/email_campaigns/ios/#add-a-marketing-link","body":"When you create links on the dashboard, you have a subset of these overall labels available to you. Visit the Dashboard’s Marketing page. Then click + Add link to get started.\n        \n      The following sections will walk through various options and their implications."},{"title":"Analytics: Channel, Campaign, Etc","id":"http://dev.branch.io/recipes/email_campaigns/ios/#analytics-channel-campaign-etc","body":"optionalThe more information you enter, the better you’ll be able to segment data on the Dashboard and in exports. We recommend setting Channel and Campaign. Tags is free form.For information of the form [key]: [value] such as “product”: “shoes”, we recommend adding them below–see Deep Link Data (Optional)."},{"title":"Custom Link Label (Optional – highly recommended)","id":"http://dev.branch.io/recipes/email_campaigns/ios/#custom-link-label-optional----highly-recommended","body":"optionalHere is where you can add a custom alias to the end of the link. For example, you can create links.myexample.com/download."},{"title":"Social Media (OG) Format","id":"http://dev.branch.io/recipes/email_campaigns/ios/#social-media-og-format","body":"optionalYou can customize how the link will look on Twitter, Facebook, Pinterest and any other service with link previews. For more information on the optimal format for the title and description, see Facebook’s Sharing Best Practices."},{"title":"Deep Link Data (Optional)","id":"http://dev.branch.io/recipes/email_campaigns/ios/#deep-link-data-optional","body":"optionalHere is where you can specify the custom parameters to add to a link that will be deep linked into the app. You might want to put a coupon code or a page identifier here to route the user.This powerful link will now track clicks across platforms. Users who have the app (perhaps you beta testers if you’re just launching!) will be linked straight to the app. Users who don’t have the app will be taken to the App Store to download your app. And any users who click this link on Desktop will be given the option to text themselves the app!\n"},{"title":"Conclusion and Advanced Options","id":"http://dev.branch.io/recipes/email_campaigns/ios/#conclusion-and-advanced-options","body":"It’s that simple! You now have a link that will track clicks based on the channel, campaign and any other tags you create. It has a custom ending (as opposed to random characters). It’s properly formatted for social media.The Dashboard’s Summary page, specifically the “Click Flow” chart, now can show you meaningful results! Note all the filters in the screenshot below:\n        \n      To start collecting statistics regarding installs, opens, referred installs – and to add powerful, deferred deep links – check out any of our other guides. These allow you to:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"One time configuration","id":"http://dev.branch.io/recipes/facebook_appinvites/ios/#one-time-configuration","body":"In order for Branch to properly run a Facebook deeplinked ad campaign, you must first send Branch your app token. This is easy to get, and you can find the step by step instructions on how to do so below.\n  Log in to Facebook, navigate to developers.facebook.com/apps and choose your app. You’ll need the App ID and Client Secret.\n\n        \n      \n  On the Branch Dashboard, go to Settings > Link Settings and scroll down to ‘Authenticate for Facebook Install Ads’. Enter your App ID and Client Secret from Facebook.\n\n        \n      \n  Press ‘Authenticate’. That’s it!\n"},{"title":"Insert Branch link into Invite","id":"http://dev.branch.io/recipes/facebook_appinvites/ios/#insert-branch-link-into-invite","body":"Every Branch link automatically comes packed with all of the AppLinks to automatically handle deep linking off of Facebook posts. The Branch link will work for both fresh installs for new users and opens for users who already have the app. You can show a personal welcome for each!\n\n#import \"Branch.h\"\n#import <FBSDKShareKit/FBSDKShareKit.h>\n\n\n[[Branch getInstance] getShortURLWithParams:branchDict\n                                 andChannel:@\"facebook\"\n                                 andFeature:@\"app_invite\"\n                                andCallback:^(NSString *url, NSError* error) {\n    if ([FBSDKAppInviteDialog canShow]) {\n        FBSDKAppInviteContent *content =[[FBSDKAppInviteContent alloc] init];\n        content.appLinkURL = [NSURL URLWithString:url];\n        content.appInvitePreviewImageURL = [NSURL URLWithString:@\"https://s3-us-west-1.amazonaws.com/host/zackspic.png\"];\n                                        \n        [FBSDKAppInviteDialog showWithContent:content\n                                     delegate:self];\n    }\n}];\n\n\n// add these methods in if you extend your sharing view controller with <FBSDKAppInviteDialogDelegate>\n- (void)appInviteDialog:(FBSDKAppInviteDialog *)appInviteDialog\n didCompleteWithResults:(NSDictionary *)results {\n    [[Branch getInstance] userCompletedAction:@\"completed_share\"];\n    NSLog(@\"app invite dialog did complete\");\n}\n\n- (void)appInviteDialog:(FBSDKAppInviteDialog *)appInviteDialog\n       didFailWithError:(NSError *)error {\n    [[Branch getInstance] userCompletedAction:@\"cancelled_share\"];\n    NSLog(@\"app invite dialog did fail\");\n}\n\nobjective-cswift"},{"title":"Show Custom Welcome","id":"http://dev.branch.io/recipes/facebook_appinvites/ios/#show-custom-welcome","body":"Since you dropped a Branch link into the URL for the AppInvite, you can use Branch to determine if a new user came from an existing app user. Below, you can see an example that our partner Gogobot built using the Branch deep link callback. The screen below is what a user sees if they came from a referring Branch link, compared to the generic onboarding which just shows a fancy picture. It drove a  78% lift in conversion to register.\n        \n      Here’s how to build it:\n\n#import \"Branch.h\"\n#import <FBSDKCoreKit/FBSDKCoreKit.h>\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    [[Branch getInstance] initSessionWithLaunchOptions:launchOptions\n                            andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n        if ([[params objectForKey:@\"+clicked_branch_link\"] boolValue]) {\n            // show personal welcome\n        }\n    }];\n    \n    return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                    didFinishLaunchingWithOptions:launchOptions];\n}\n\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n    // NOTE: Branch must come first\n    BOOL wasHandled = [[Branch getInstance] handleDeepLink:url];\n    if (!wasHandled)\n        [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                       openURL:url\n                                             sourceApplication:sourceApplication\n                                                    annotation:annotation];\n    return wasHandled;\n}\n\nobjective-cswift"},{"title":"Troubleshooting","id":"http://dev.branch.io/recipes/facebook_appinvites/ios/#troubleshooting","body":"\n        \n      If Facebook is having trouble reading the AppLinks from the Branch link, you might see this message while trying to test out the flow. This means that there is something corrupted in the OG tags causing Facebook to not parse it. You can test the OG tags using the following tool provided by Facebook:OG tag testerIf your OG tags look fine and you’re still getting this error, please reach out to support@branch.io immediately."},{"title":"Common issues with Facebook Authentication","id":"http://dev.branch.io/recipes/facebook_appinvites/ios/#common-issues-with-facebook-authentication","body":"If you are having trouble authenticating with Facebook, please check the following:Be sure you have the correct App ID and Client SecretBe sure you have the correct App ID and Client Secret. This is the number one source of issues.Client Secret embedded?If you have entered the correct App ID and Secret but are still getting issues, it may be related to how you are using your Secret. Visit the Settings > Advanced page and check that you don’t have the toggle enabled for “Is your App Secret embedded?” You will only have this option if you have enabled “Native or desktop app?” on this page.So if you have enabled “Native or desktop app”, then your advanced options should appear like the following:\n        \n      "},{"title":"Welcome to your dashboard","id":"http://dev.branch.io/recipes/measuring_installs/ios/#welcome-to-your-dashboard","body":"You’ve created a link and integrated the SDK - now it’s time to dive into your data with the Branch Dashboard.On your dashboard you can see how many installs are being driven by word of mouth versus ad campaigns, and how well Facebook does compared to Twitter and SMS. You can do analysis comparing your marketing links to individualized links shared by your users.One screenshot is worth a million… dollars on spent on poorly performing ads and expensive tools to track those ads:\n        \n      "},{"title":"Install versus Open","id":"http://dev.branch.io/recipes/measuring_installs/ios/#install-versus-open","body":"We measure installs and opens separately:\n  An install is the very first time a user launches the app.\n  An open is any other time the user opens the app after the very first launch.\nWhen you look at how your Branch links are performing, you can see how many are installs and opens they are driving. Don’t be confused by the terminology: install is the first time the user accesses your app; every subsequent time the user enters your app is an open in our system."},{"title":"Dashboard tips","id":"http://dev.branch.io/recipes/measuring_installs/ios/#dashboard-tips","body":"Here’s some handy advice for getting the most out of your dashboard:\n  \n    Segment your data using the filters offered to drill down into specific sources\n  \n  \n    Use a Branch link for every download you want to drive (looking at you app download banner) so you have context for every source\n  \n  \n    Set up custom events to create conversion funnels\n  \n  \n    See who your power users are by implementing referral links then viewing data about your top users\n  \n  \n    Remember you can embed any parameters you want into Branch links, you’ll just need to export them if they aren’t one of the parameters we show by default in the dashboard\n  \n"},{"title":"What’s next?","id":"http://dev.branch.io/recipes/measuring_installs/ios/#whats-next","body":"You’ve got deeplinking (that works through install) and you’re tracking link clicks, installs and opens. Let’s supercharge your app by implementing more sharing features to help organic and paid growth. Also keep in mind that Branch links are highly customizable since you can embed arbitrary metadata in the links, so there’s really no limit to what you can build:\n  \n    Content sharing – deeplink to your app content through install from any device\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    App download banner – cross-platform, customizable web banner\n  \n  \n    Text-me-the-app page – your site, Branch’s free text-me-the-app service\n  \n"},{"title":"Generating Links","id":"http://dev.branch.io/recipes/personalized_welcome/ios/#generating-links","body":""},{"title":"Creating links in your app","id":"http://dev.branch.io/recipes/personalized_welcome/ios/#creating-links-in-your-app","body":"Links are the foundation to everything Branch offers. Branch’s links offer the ability to deep link directly to content, to pass data through the install process, and to understand where users are coming from. In the case of a personalized referral system, you can attach information about the user who is sharing the link. Then this information about this user–here “John” with id “1234”–is present anytime John’s friends install the app after clicking his link.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"referringUsername\":@\"John\", @\"referringUserId\":@\"1234\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift"},{"title":"Sharing Branch Links","id":"http://dev.branch.io/recipes/personalized_welcome/ios/#sharing-branch-links","body":"These links can be shared anywhere – via SMS, email, social media – you name it. If you have existing sharing functionality in place, all you need to do is insert a Branch link.If you don’t have sharing in place and want to get up and running quickly, check out the Sharing Methods section of our Content Sharing guide. We give you step-by-step instructions for sharing via SMS, email or social media."},{"title":"The Personal Touch: A Welcome Screen","id":"http://dev.branch.io/recipes/personalized_welcome/ios/#the-personal-touch-a-welcome-screen","body":"Routing to content is highly app-specific, since mobile apps vary widely in how they are structured. That said, we want to give a concrete example of how you can use Branch links to route straight to content within your app.Inside of the deepLinkHandler, you will want to examine the params dictionary to determine whether the user clicked on a link to content. Regardless of whether your app involves pictures, videos, text or whatever novel content your app contains, you likely have an internal system of identifiers.Let’s assume your app revolves around pictures and each one is tagged with a picture Id. When a user shares a picture, simply attach a picture Id to the Branch link being created. If a user clicks a link to a specific picture, this Id will show up in the params dictionary in the deepLinkHandler.- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n  // initialize the session, setup a deep link handler\n  [[Branch getInstance] initSessionWithLaunchOptions:launchOptions\n                          andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n\n    // start setting up the view controller hierarchy\n    UINavigationController *navC = (UINavigationController *)self.window.rootViewController;\n    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];\n    UIViewController *nextVC;\n    // If the key 'userId' is present in the deep link dictionary\n    // then load the picture screen with the appropriate picture\n    NSString *userId = [params objectForKey:@\"userId\"];\n    if (userId) {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"userId\"];\n      [nextVC setNextUserId:userId];\n    } else {\n      nextVC = [storyboard instantiateViewControllerWithIdentifier:@\"MainVC\"];\n    }\n    [navC setViewControllers:@[nextVC] animated:YES];\n  }];\n\n  return YES;\n}"},{"title":"Conclusion: There’s So Much More","id":"http://dev.branch.io/recipes/personalized_welcome/ios/#conclusion-theres-so-much-more","body":"Adding a personalized invite system is as simple as creating Branch links, sharing them and then examining the custom params dictionary that is present when a new user opens the app.There’s so much more though! With Branch, you can:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Configuring the links","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#configuring-the-links","body":"First, please visit the Branch link configuration tool to setup all the redirection logic."},{"title":"Configuring your iOS app","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#configuring-your-ios-app","body":""},{"title":"Installing the SDK files","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#installing-the-sdk-files","body":"For iOS, the easiest way to install the SDK is via Cocoapods. Add pod \"Branch\" to your podfile and run pod install from the command line.However, if you don’t currently use Cocoapods, you can easily download and install our SDK.\n  To download an open-source copy, grab the zip here or clone our repo here.\n  You will need to drag and drop the Branch.framework file that you downloaded into your project. Be sure that “Copy items if needed” is selected.\n  Please import CoreTelephony.framework and AdSupport.framework\n"},{"title":"PList configuration","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#plist-configuration","body":"Add your Branch keyYour app key can be retrieved on the Settings page of the dashboard. Now you need to add it to YourProject-Info.plist (Info.plist for Swift).\n  In plist file, mouse hover “Information Property List” which is the root item under the Key column.\n  After about half a second, you will see a “+” sign appear. Click it.\n  In the newly added row, fill in “branch_key” for its key, leave type as String, and enter your app key obtained in above steps in its value column.\n  Save the plist file.\nConfigure for deep linkingTo set up your URI Scheme, you’ll need to open your project in XCode and complete the following.\n  Click on YourProject-Info.plist on the left (or in Swift, Info.plist).\n  Find URL Types and click the right arrow. (If it doesn’t exist, right click anywhere and choose Add Row. Scroll down and choose URL Types)\n  Add myapp, where myapp is a unique string for your app, as an item in URL Schemes as below:\n\n        \n      "},{"title":"Starting a Branch Session","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#starting-a-branch-session","body":"The Branch session starts every single time your app opens up, and checks if the user came from a link. You register a callback method here that will return any deep link parameters upon link click. Please note that the callback function is called 100% of the time, even when the network is out.We also bundle in a bunch of other stuff that you might find useful.There are a few pieces of code that must be in place. First, open your project’s AppDelegate.m (or AppDelegate.swift) file.\n  Add #import \"Branch.h\" at the top of the file (Objective-C only)\n  Find the line which reads:\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:\n\nobjective-cswiftand paste the following right below it:\n\nBranch *branch = [Branch getInstance];\n[branch initSessionWithLaunchOptions:launchOptions andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) {\n    if (!error) {\n        // params are the deep linked params associated with the link that the user clicked -> was re-directed to this app\n        // params will be empty if no data found\n        // ... insert custom logic here ...\n        NSLog(@\"params: %@\", params.description)\n    }\n}];\n\nobjective-cswiftNOTE If you are seeing a “Branch.h file not found” error but you’ve imported the SDK, or it’s breaking during compiling–and you’re using Xcode 6.3 or newer–click here."},{"title":"Handle Deep Link","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#handle-deep-link","body":"This method is necessary to receive a Branch parameter when the URI scheme is called and the app open immediately. It will automatically call the Deep Link Handler registered above. application:openURL:sourceApplication:annotation::\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {\n    // pass the url to the handle deep link call\n    if (![[Branch getInstance] handleDeepLink:url]) {\n        // do other deep link routing for the Facebook SDK, Pinterest SDK, etc\n    }\n    return YES;\n}\n\nobjective-cswift"},{"title":"Creating links","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#creating-links","body":"Links are the foundation to everything Branch offers. There are many different aspects to creating links but the most important are:\n  Embed key/value deep link metadata. We’ll make sure this gets delivered to the app with the clicking user\n  Label feature and channel for analytics on the dashboard\nHere’s how to create your own Branch Links.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"foo\": @\"bar\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswift   Data is for Deeplinking\nYou can also use the data to link directly to content! Instead of “foo”: “bar”, you could pass in “pictureId”: “1234”, then when a user clicks on a link you can open the app straight to picture with Id 1234. Keep reading…\n"},{"title":"Conclusion","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#conclusion","body":"Congratulations! You’re now up and running with Branch. To finish up, we’ll walk you through the data you’re seeing in your dashboard in Link and Install Attribution.Questions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Advanced","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#advanced","body":"Branch-provided data parameters in callbackPreviously, Branch did not return any information to the app if initSession was called but the user hadn’t clicked on a link. Now Branch returns explicit parameters every time. Here is a list, and a description of what each represents.\n  ~ denotes analytics\n  + denotes information added by Branch\n  (for the curious, $ denotes reserved keywords used for controlling how the Branch service behaves)\n\n  \n    \n      Parameter\n      Meaning\n    \n    \n      ~channel\n      The channel on which the link was shared, specified at link creation time\n    \n    \n      ~feature\n      The feature, such as invite or share, specified at link creation time\n    \n    \n      ~tags\n      Any tags, specified at link creation time\n    \n    \n      ~campaign\n      The campaign the link is associated with, specified at link creation time\n    \n    \n      ~stage\n      The stage, specified at link creation time\n    \n    \n      ~creation_source\n      Where the link was created (‘API’, ‘Dashboard’, ‘SDK’, ‘iOS SDK’, ‘Android SDK’, or ‘Web SDK’)\n    \n    \n      +referrer\n      The referrer for the link click, if a link was clicked\n    \n    \n      +phone_number\n      The phone number of the user, if the user texted himself/herself the app\n    \n    \n      +is_first_session\n      Denotes whether this is the first session (install) or any other session (open)\n    \n    \n      +clicked_branch_link\n      Denotes whether or not the user clicked a Branch link that triggered this session\n    \n  \n"},{"title":"Identifying Your Users","id":"http://dev.branch.io/recipes/quickstart_guide/ios/#identifying-your-users","body":"Branch automatically tracks unique devices. However, to make full use of our powerful API, you should also identify users with whichever form of unique identification your app uses. Add these two lines of code.Add a setIdentity: call wherever you create or login a user.\n\n// your app's userId, 127 chars or less\n[[Branch getInstance] setIdentity:@\"1234\"];\n\nobjective-cswiftAdd a logout call anywhere you allow the user to logout.\n\n[[Branch getInstance] logout];\n\nobjective-cswift   Note:\nLogout should only be called when the user logs out. Calling it at other times could lead to hard-to-discover errors. Failing to call logout can likewise lead to bugs if multiple users log in on the same device.\n"},{"title":"Generating Links","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#generating-links","body":""},{"title":"Creating links in your app","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#creating-links-in-your-app","body":"Links are the foundation to everything Branch offers. Branch’s links offer the ability to deep link directly to content, to pass data through the install process, and to tell where users are coming from. In the case of a incentivized referral program, you don’t need to attach any information. You simply need to make sure that you generate links for the user who will be sharing the link. Also, be sure that you make a setIdentity call as described above.That said, you can attach information about the user who is sharing the link. Then this information about this user–here “John” with id “1234”–is present anytime John’s friends install the app after clicking his link.On iOS, it’s a rather simple method call.\n\n[[Branch getInstance] getShortURLWithParams:@{@\"referringUsername\":@\"John\", @\"referringUserId\":@\"1234\"} andChannel:@\"sms\" andFeature:BRANCH_FEATURE_TAG_SHARE andCallback:^(NSString *url, NSError *error) {\n    if (!error) NSLog(@\"got my Branch link to share: %@\", url);\n}];\n\nobjective-cswiftAgain, it’s not imperative that you attach any information to the link. As long as you made a setIdentity call, anytime this link is shared we will know whose link it is and when to attribute an install to him."},{"title":"Sharing Branch Links","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#sharing-branch-links","body":"These links can be shared anywhere – via SMS, email, social media – you name it. If you have existing sharing functionality in place, all you need to do is insert a Branch link.If you don’t have sharing in place and want to get up and running quickly, check out the Sharing Methods section of our Content Sharing guide. We give you step-by-step instructions for sharing via SMS, email or social media."},{"title":"Rewards","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#rewards","body":"Branch allows you reward users with credits, track those credits, and redeem them when appropriate. It is a unit-less currency available to your users without you having to build a system from scratch.If you decide to track user credits through the Branch platform, then you must configure reward rules on the dashboard and tie them to events that occur in your app. Think of the system like this, your users are constantly completing a steady stream of actions in your app: install, signup, product_purchased. Using the Branch reward rules, you tie reward events to specific actions. Then, with every event that is saved in Branch, we check automatically if that event is eligible for credits based on the rules that you configured, then deposit the credits if so. It’s very powerful.Branch automatically tracks opens, installs, referred sessions and web session start. You don’t need to write any special code–as soon as you start initializing sessions and clicking on Branch links, these events are recorded.You can easily see these events by navigating the Dashboard’s Export page and clicking on Events.These three events are tied to the initSession and handleOpenURL calls."},{"title":"Rewarding Users","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#rewarding-users","body":"\n        \n      To award users for credits, you must set up a reward rule tied to a specific events.Reward rules can be based on standard Branch-defined events like install, open and referred session. They can also be based on custom events.To add a rule, go to the Dashboard Referrals page and click the Rules tab. Click the green “+ Add a new rule” button.Let’s say you want to give 10 credits to each new user who signs up through a friend, and 5 credits to the friend who referred him or her. That can be done through a combination of (two rules.Rule 1: Rewarding the Referred User (10 Credits)\n        \n      \n  Who gets a reward: “Referred acting users”\n  How many credits the reward is: 10\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: the first time\n  Which event triggers the reward: install\nBe sure to press “Add rule”!Rule 2: Rewarding the Referring User (5 Credits)\n        \n      \n  Who gets a reward: “Referring users”\n  How many credits the reward is: 5\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: every time\n  Which event triggers the reward: install\nAfter adding this second rule, you should see the following:\n        \n      That’s it!   Referral attribution after install\nBy default, users only get attribution for installs if the users they refer download the app for the first time. If a user sends a link to a second user who already has the app, it doesn’t “count” as a referral. To override this behavior, check out the setting isReferrable here.\n   Testing Rewards and Reward Rules\nBecause we have rules in place to ensure Rewards can’t be gamified, we have some tips for testing considerations.\nRewards are flexibleBranch’s credit system:\n  is based on either Branch-provided events (install, open, and referred session) or any custom events you track with a userCompletedAction call.\n  allows you to define as many “virtual wallets” per user as you want. These are called buckets and if no bucket is specified, the default bucket is debited/credited.\n  has built-in functions for rewarding, checking the balance, and redeeming credits.\n  enables you to specify rewards dynamically using Reward Rules on the dashboard.\n  comes with fraud protection built in.\n"},{"title":"Viewing Credits","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#viewing-credits","body":"Once users have credits, they should be able to redeem them.Checking the balance involves loading the most recent balance from the server and then checking the balance. These can be two separate steps but for the sake of simplicity we have combined them into one example:[[Branch getInstance] loadRewardsWithCallback:^(BOOL changed, NSError *err) {\n    if (!err) {\n        NSLog(@\"credit: %lu\", [[Branch getInstance] getCredits]);\n    }\n}];"},{"title":"Showing Referrals","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#showing-referrals","body":"If you’re using the Branch Invite SDK, displaying referrals, earned credits, and credit transactions to your users is super easy. It handles all the logic of determining which transactions are referrals for you as well, so there is no confusing logic. If desired, you can provide a customized view that will have the data fed into it.For the most basic integration, using the default Branch styled view, you can add the following controller, which can be shown modally or within a tab / navigation controller. Note that the delegate requires you to provide a User ID that can be used to determine transactions where the current user was the referring user.BranchReferralController *referralController = [BranchReferralController branchReferralControllerWithDelegate:self];This will appear as follows\nIf the basic styling doesn’t fit the needs of your app, you can provide an entirely custom view with just as little effort. The view should conform to the BranchReferralView protocol so that the controller can set the data items on it.BranchReferralController *referralController = [BranchReferralController branchReferralControllerWithView:myCustomView delegate:self];"},{"title":"Redeeming Credits","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#redeeming-credits","body":"When users spend credits, you can make a simple call to redeem their credits. On your dashboard, this will fall under the default bucket.[[Branch getInstance] redeemRewards:5 callback:^(BOOL success, NSError *error) {\n    if (success) {\n        NSLog(@\"Redeemed 5 credits!\");\n    }\n    else {\n        NSLog(@\"Failed to redeem credits: %@\", error);\n    }\n}];"},{"title":"Redeeming Flow","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#redeeming-flow","body":"Building out a credit redemption flow is super easy and painless, but there are a few important factors to keep in mind in terms of UX.\n  Users should know their total balance before commiting to a redemption.\n  Users should be aware of how many points they are agreeing to spend.\n  Since this is a one way, non-reversable transaction, confirmation is appropriate.\n  Users should see a progress indicator so they’re aware the transaction is taking place.\n  Users should not be able to resubmit while the redemption is occuring (progress indicator can handle this).\n  Upon completion, users should receive confirmation of success, and see their updated balance.\nFortunately, this is all fairly simple to accomplish with Branch. You really only need to take four steps:\n  Ensure Credits are loaded.\n  Show a confirmation dialog before redeeming credits.\n  Call the redeemRewards method and show a progress dialog.\n  Show a completion dialog and reflect updates in balance.\n- (IBAction)redeemCredits:(id)sender {\n    [[Branch getInstance] loadRewardsWithCallback:^(BOOL changed, NSError *error) {\n        if (!error) {\n            [[[UIAlertView alloc] initWithTitle:@\"Redeem 5 credits?\" message:nil delegate:self cancelButtonTitle:@\"Cancel\" otherButtonTitles:@\"OK\", nil] show];\n        }\n    }];\n}\n\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {\n    if (buttonIndex) {\n        [self showLoadingMask]; // impl not shown\n\n        [[Branch getInstance] redeemRewards:5 callback:^(BOOL success, NSError *error) {\n            [self hideLoadingMask]; // impl not shown\n\n            if (!err) {\n                NSInteger newBalance = [[Branch getInstance] getCredits];\n                NSString *successMsg = [NSString stringWithFormat:@\"You redeemed 5 credits! You have %ld remaining.\", (long)newBalance];\n                [[[UIAlertView alloc] initWithTitle:@\"Success\" message:successMsg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n\n                self.creditCountLabel.text = [NSString stringWithFormat:@\"%ld credits available\", (long)newBalance]; // impl not shown\n            }\n        }];\n    }\n}Here’s a super simple example:\n"},{"title":"Fraud Protection","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#fraud-protection","body":"While a bulletproof referral program is impossible, we do our best with a number of different mechanisms to stop high level fraud.\n  We track the hardware ID and IDFA of the device and tie our concept of a user identity to that identifier, preventing the cases of the same user triggering an event multiple times, and subtracting rewards when we detect fraud (multiple attempts to claim a reward from the same device).\n  Further, we merge identities so that if a user signs in on their iPhone and then their iPad using the same Facebook ID, when you let Branch know that this is the same user (via a setIdentity call), we’ll make sure any duplicate reward is removed.\nThis means that while testing you may run into issues if you test repeatedly with the same devices. When testing referral programs and reward rules, you should consider using setDebug – more on that on our “Testing your integration” page.Lastly, if you’re concerned about users gaming your system via the simulator, you can use our method isSimulator to determine whether to record an event or give a reward. It’s internal to our open-source SDK."},{"title":"Conclusion: So Much More","id":"http://dev.branch.io/recipes/referral_links_with_incentives/ios/#conclusion-so-much-more","body":"You now have an incentivized referral program. Like many popular promo-code systems, you can reward both the user who shares a link and the user who clicks the link and installs the app. With Branch links, the magic is built in, so there’s no need for a promo code. Because we want to empower developers, we also offer the ability to reward users with credits, track those credits and redeem them–all with a few lines of code.This guide covered the basics. The following may be of interest to you, if you want to:\n  \n    Reward users for driving installs or even custom events that you define, such as “signup” or “purchase”\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Submitting to the App Store","id":"http://dev.branch.io/recipes/submitting_apps/ios/#submitting-to-the-app-store","body":"When submitting to the App Store, you may need to let Apple know that you use the IDFA. You should do so if:\n  You use the Branch cocoapod – this automatically imports AdSupport.framework\n  You have manually imported AdSupport.framework\nWhen submitting, you will need to indicate that you do use the Advertising Identifier. Please also check the latter two checkboxes:\n        \n      This is all you need to follow the proper protocol with IDFA.We highly suggest including the AdSupport framework, as it will allow us to do better matching. If we’ve seen a device across our network of apps (a wide network indeed), then we can do matching with 100% accuracy, even if your app was just installed and opened for the first time on that device. It’s powerful (and private)."},{"title":"Use the Test App on the Branch Dashboard","id":"http://dev.branch.io/recipes/testing_your_integration/ios/#use-the-test-app-on-the-branch-dashboard","body":"At the top right of the dashboard, for any given app you see “Live” and “Test”. Use the “Test” app and be sure that the Link Settings are properly configured. Use this so as to not pollute your production app’s Branch data.To use this app, grab the Branch Key from the test version of your app. Include this Branch Key in your .plist file, labeled branch_key. Be sure to switch to your live key for production!Make sure that you do not use this in the version of your app that you push to the App Store!"},{"title":"Debugging an individual link","id":"http://dev.branch.io/recipes/testing_your_integration/ios/#debugging-an-individual-link","body":"At any time after link creation, you can see all the information about the link with a simple trick. Make sure you are logged into the dashboard and are on the app associated with that link (be sure you choose Live or Test as appropriate). Then enter the link into your browser and append ?debug=1.You’ll see the following screen as a result. It’s quite helpful for double-checking your links!\n        \n      "},{"title":"A Word About Fraud Protection","id":"http://dev.branch.io/recipes/testing_your_integration/ios/#a-word-about-fraud-protection","body":"While a bulletproof referral program is impossible, we do our best with a number of different mechanisms to stop high level fraud.\n  We track the hardware ID and IDFA of the device and tie our concept of a user identity to that identifier, preventing the cases of the same user triggering an event multiple times, and subtracting rewards when we detect fraud (multiple attempts to claim a reward from the same device).\n  Further, we merge identities so that if a user signs in on their iPhone and then their iPad using the same Facebook ID, when you let Branch know that this is the same user (via a setIdentity call), we’ll make sure any duplicate reward is removed.\nThis means that while testing you may run into issues if you test repeatedly with the same devices. When testing referral programs and reward rules, you should consider using setDebug – more on that in the next section.Lastly, if you’re concerned about users gaming your system via the simulator, you can use our method isSimulator to determine whether to record an event or give a reward. It’s internal to our open-source SDK."},{"title":"Use setDebug To Simulate Fresh Installs","id":"http://dev.branch.io/recipes/testing_your_integration/ios/#use-setdebug-to-simulate-fresh-installs","body":"One challenge aspect testing Branch’s service is simulating a fresh install. We intentionally add a lot of restrictions to prevent ‘install’ events from being triggered on app updates or uninstall/reinstall.To simulate a brand new user being referred from our perspective:\n  use the setDebug call before you call initSession in the AppDelegate (see below):\n  Uninstall your test app\n  Clear your browser cookies\n  Click a link in the browser\n  Run your test app:\n\n\n[Branch setDebug];\nBranch *branch = [Branch getInstance];\n[branch initSession.....\n\nobjective-cswift"},{"title":"Use different user Ids","id":"http://dev.branch.io/recipes/testing_your_integration/ios/#use-different-user-ids","body":"This is especially relevant if you are trying to test rewards. Another challenge is that we do a lot of magic (identity merging, etc) to ensure that a single user doesn’t get unique rewards multiple times. You should beware that if you’re calling setIdentity with a user id that had previously been rewarded a unique reward, you will not see his credit balance increment.Make sure to use a different user id with the setIdentity call if you want to be sure credits will be properly rewarded."},{"title":"Debugging with the Dashboard","id":"http://dev.branch.io/recipes/testing_your_integration/ios/#debugging-with-the-dashboard","body":"For debugging while still in a test environment, the Dashboard’s Debug page offers a transparent look at what is happening behind the scenes. It includes data about:\n  the user’s identity\n  the current session\n  the device’s digital fingerprint\n  the user’s credits\n\n        \n      To make use of this feature, make sure you include the setDebug call. Then open the Debug page and follow the directions to connect your phone."},{"title":"Adjusting to poor connectivity and downtime","id":"http://dev.branch.io/recipes/testing_your_integration/ios/#adjusting-to-poor-connectivity-and-downtime","body":"At Branch, we live and breath uptime & performance. We’ve developed mechanisms internal to the SDK to deal with network issues. We always call the callbacks with the error parameter describing the issue. If the phone is in airplane mode and the connection is not available, the callbacks are called immediately. If there is a server latency, we timeout after 3 seconds and will retry 4 more times with a 3 second pause in between each. These timeouts are adjustable on the singleton instance by calling:\n  setNetworkTimeout (ms)\n  setMaxRetries\n  setRetryInterval (ms)\n"},{"title":"Web Setup","id":"http://dev.branch.io/recipes/text_me_the_app_page/ios/#web-setup","body":"TL;DR – You can skip to the code snippet below to implement this feature immediately.Add the following code somewhere inside the <head> </head> tags on your website. Be sure to replace YOUR-BRANCH-KEY with your Branch Key inside the init() call. You can find your Branch Key on the Dashboard’s Settings page.<script type=\"text/javascript\">\n  (function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.8.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits creditHistory applyCode validateCode getCode redeem banner closeBanner\".split(\" \"),0);\n\n  branch.init('YOUR-BRANCH-KEY');\n  function sendSMS(form) {\n    branch.sendSMS(\n      phone: form.phone.text,\n      {\n        channel: 'Website',\n        feature: 'Text-Me-The-App',\n        data: {\n          foo: 'bar'\n        }\n      },\n      { make_new_link: false }, // Default: false. If set to true, sendSMS will generate a new link even if one already exists.\n      function(err) { console.log(err); }\n    }\n  });\n\n</script>"},{"title":"SendSMS() parameters.","id":"http://dev.branch.io/recipes/text_me_the_app_page/ios/#sendsms-parameters","body":"branch.sendSMS(\n    phone,\n    linkData,\n    options,\n    callback (err, data)\n);You can read more about the SendSMS() method here.The example below includes all the code you need to add to your website in one snippet."},{"title":"SendSMS() Example","id":"http://dev.branch.io/recipes/text_me_the_app_page/ios/#sendsms-example","body":"Here is a fully-functional web page that you can use as a template for your text-me-the-app page.<!DOCTYPE HTML>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <script type=\"text/javascript\">\n            (function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.8.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits redeem banner closeBanner\".split(\" \"),0);\n\n            branch.init('YOUR-BRANCH-KEY');\n            function sendSMS(form) {\n                var phone = form.phone.value;\n                var linkData = {\n                    tags: [],\n                    channel: 'Website',\n                    feature: 'TextMeTheApp',\n                    data: {\n                        \"foo\": \"bar\"\n                    }\n                };\n                var options = {};\n                var callback = function(err, result) {\n                    if (err) {\n                        alert(\"Sorry, something went wrong.\");\n                    }\n                    else {\n                        alert(\"SMS sent!\");\n                    }\n                };\n                branch.sendSMS(phone, linkData, options, callback);\n                form.phone.value = \"\";\n            }\n        </script>\n    </head>\n    <body>\n    \tSend SMS\n        <form onsubmit=\"sendSMS(this); return false;\">\n        \t<input id=\"phone\" name=\"phone\" type=\"tel\" placeholder=\"(650) 123-4567\" />\n        \t<br/>\n        \t<input type=\"submit\"/>\n        </form>\n    </body>\n</html>This is all you need to create a branded text-me-the-app page. Customize to your heart’s content."},{"title":"Using your own SMS service (Advanced)","id":"http://dev.branch.io/recipes/text_me_the_app_page/ios/#using-your-own-sms-service-advanced","body":"While we provide your users the ability to text themselves the app for free – we use Twilio – you can use your own SMS service.With the sendSMS() method, we send users a link that points back to the original link they clicked that brought them to your text-me-the-app page. You can now access an equivalent link that also points back to the same link. This is provided as part of the Web SDK’s init callback and is called referring_link. See the code below:branch.init('YOUR-BRANCH-KEY', function(err, data) {\n\tconsole.log(\"data.referring_link:\", data.referring_link);\n});This referring_link will be null if the user came to the page without clicking on a Branch link. Otherwise it will be of the form bnc.lt/c/XXX – the /c/ indicates that this is not the original link but rather points back to the original link.So, to roll your own SMS service, your logic should be as follows:\n  Does referring_link exist, a.k.a. did the user end up on this text-me-the-app page because of a Branch link? If so, use this link when sending the SMS.\n  If referring_link is null, generate a new Branch link by making a call to the Web SDK’s link() method. Use this link when sending the SMS.\n   referring_link passes along your data!\nIt is essential that you use referring_link if you decide not to use our sendSMS() method to text users the app from desktop. If you generate a new link, the data from whatever link they clicked that took them to your text-me-the-app page will not be passed through to the client app upon opening.\n"},{"title":"Customizing SMS Messages","id":"http://dev.branch.io/recipes/text_me_the_app_page/ios/#customizing-sms-messages","body":"Branch has several options for the customization of SMS messages from the Text Me the App page.The following are the three different types of messages that can be sent:1. Link Specific MessagesYou can define a special SMS message one the individual link scale. Whether you want to switch the language of a message for a different region or include device specific date, you can specify the message in the Deep Link Data section at the bottom of the link editing screen.\n\nUse the key of $custom_sms_text and then enter your custom message in the value section. (Make sure to include the  tag in your custom message!)Example:\nThe developer of FlowerPower wants to customize the SMS messages for their app based on the country of the recipient. For each Branch link, they would specify in the deeplink data a different custom message.For ads in France:\nCliquez pour télécharger FlowerPower ici For ads in Spain:\nHaz click aquí para descargar FlowerPower For ads in Germany:\nKlicken Sie auf das FlowerPower hier herunterladen 2. Custom Default for All MessagesYou can create your own custom default message that will be sent if the specific link someone clicks doesn’t have a customized message itself. To customize the default message, edit the form under the Text me the app page tab in the general settings\t.\nExample:\nA developer wants all their links that don’t have individual customizations to have the default message of\nWoah! Look at this cool new way to learn the different  \nspecies of flowers! Download FlowerPower @ 3. Branch DefaultIf a developer doesn’t specify a link specific message or a custom default, SMS messages will default to the format of\n\"Click here to download [App Name] \"Reference:\n  The tag {{ link }} is replaced with your Branch link when sent\n  The key $custom_sms_text is used for creating link specific custom SMSs\nAdvanced: Other Liquid TagsIn both the link specific custom messages and the custom default message, there is support for other liquid tags like   {{ link.channel }} or {{ link.campaign }}. The customization options are only limited to your imagination.Make sure to format the liquid tag with the link.data prefix before your key value.E.g. {{ link.data.title }}Example:\nDmitri is creating Branch links to deeplink to each of the different flowers in his app FlowerPower. He creates each link with a key/value pair of the key flower and the flower name.E.g. Flower : Rose, Flower : TulipHe wants to customize his SMS messages based on name of the flower so he sets his custom link messages as:{{ link.data.flower }}s on the mind? Click here to buy some for your home on FlowerPower! {{ link }}\nAdvanced: Default Replacements for Liquid TagsIf a specific tag isn’t always going to be filled, you can use a | character to specify a default to fallback on if the tag is missing from your link dictionary.E.g. {{ link.data.author | default:”Alex” }}If the link.data.author information isn’t found, the tag will just be replaced with Alex instead of being replaced by an empty string."},{"title":"Link configuration","id":"http://dev.branch.io/recipes/your_first_marketing_link/ios/#link-configuration","body":"First, please visit the Branch link configuration tool to setup all the redirection."},{"title":"Creating Your Branch Link","id":"http://dev.branch.io/recipes/your_first_marketing_link/ios/#creating-your-branch-link","body":"When you create links on the dashboard, you have a subset of these overall labels available to you. Visit the Dashboard’s Marketing page. Then click + Add link to get started.\n        \n      The following sections will walk through various options and their implications."},{"title":"Analytics: Channel, Campaign, Etc","id":"http://dev.branch.io/recipes/your_first_marketing_link/ios/#analytics-channel-campaign-etc","body":"optionalThe more information you enter, the better you’ll be able to segment data on the Dashboard and in exports. We recommend setting Channel and Campaign. Tags is free form."},{"title":"Custom Link Label","id":"http://dev.branch.io/recipes/your_first_marketing_link/ios/#custom-link-label","body":"optionalHere is where you can add a custom alias to the end of the link. For example, you can create links.myexample.com/download."},{"title":"Social Media (OG) Format","id":"http://dev.branch.io/recipes/your_first_marketing_link/ios/#social-media-og-format","body":"optionalYou can customize how the link will look on Twitter, Facebook, Pinterest and any other service with link previews. For more information on the optimal format for the title and description, see Facebook’s Sharing Best Practices."},{"title":"Deep Link Data","id":"http://dev.branch.io/recipes/your_first_marketing_link/ios/#deep-link-data","body":"optionalHere is where you can specify the custom parameters to add to a link that will be deep linked into the app. You might want to put a coupon code or a page identifier here to route the user."},{"title":"Conclusion And Next Steps","id":"http://dev.branch.io/recipes/your_first_marketing_link/ios/#conclusion-and-next-steps","body":"The Dashboard’s Summary page, specifically the “Click Flow” chart, can now show you meaningful click results! To track downloads and deep link through the install, the next step is integrating the SDK.\n        \n      "}],"android":[{"title":"Creating links in your app","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#creating-links-in-your-app","body":"Links are the foundation to everything Branch offers. There are many different aspects to creating links but the most important are:\n  Embed key/value deep link metadata. We’ll make sure this gets delivered to the app with the clicking user\n  Label feature and channel for analytics on the dashboard\nHere’s how to create your own Branch Links.JSONObject obj = new JSONObject(); obj.putString(\"foo\", \"bar\");\nbranch.getShortUrl(obj, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t\tLog.i(TAG, \"Ready to share my link = \" + url);\n\t}\n});"},{"title":"Attaching Custom Data to Links","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#attaching-custom-data-to-links","body":"Branch links allow you to attach any information you want to links. Custom data can be information about an ad campaign, referring user, promotion, or content being shared. You use it to build a personalized referral system so users never see a generic onboarding screen again. You can take users straight to the content they wanted to see when they clicked the link in the first place.Imagine how URLs are used on the Internet… now you have the same power inside your native mobile apps.This data is stored on our backend and presented again when the user clicks on a link via the deepLinkHandler – it’s not simply appended to the end of the URL.   Tip: Aliasing Links\nBecause we don’t store data in the URL, you can create pretty links, like bnc.lt/bob. For information on custom aliases for links, see the section below, Alias – The Custom Ending.\nStore data about both the sharing user and the content shared in the data dictionary. Attaching information is as simple as including a dictionary at link creation time. If, for example, James is inviting friends to check out your app, you could do the following:Branch.getInstance(getApplicationContext()).getShortUrl(obj, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t    Log.i(\"Branch\", \"Got a link with custom data!\");\n\t}\n});   Tip: Identify your users!\nYou should identify your users so that you know who is sharing–and who is effectively driving the most installs and engagement.\n"},{"title":"Customizing and Tagging Links","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#customizing-and-tagging-links","body":""},{"title":"Specifying Channel","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#specifying-channel","body":"If you want a breakdown of your best performing channels–whether you measure best performing by most installs, most actual signups, or any other custom events you want to track–you should specify the channel. This can be done both for marketing links on the dashboard and for links created programmatically.In Android, you will need to use a method call that accepts a String channel type parameter, for all URL generation calls.Branch.getInstance(getApplicationContext()).getContentUrl(\"sms\",  null, new BranchLinkCreateListener() {\n    @Override\n    public void onLinkCreate(String url, BranchError error) {\n    }\n});"},{"title":"Adding Tags","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#adding-tags","body":"Are you a tag person? You can add as many simply tags as you want to a link. Note that these are not key-value pairs – those belong in the custom data dictionary.You’ll want to use any of the getShortUrl methods that accept the paramter of type Collection<String> for tags. Check the following example:ArrayList<String> tags = new ArrayList<String>();\ntags.add(\"tag1\");\ntags.add(\"tag2\");\nBranch.getInstance(getApplicationContext()).getShortUrl(tags, \"channel1\", null /*params dictionary */, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t\tif (error == null) {\n\t\t    Log.d(\"MyTag\", \"Url = \" + url);\n\t\t}\n\t}\n});"},{"title":"Specifying Feature","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#specifying-feature","body":"The more analytics the better. If you want to track whether personalized invites, content shares or gift offers are driving more installs, you can optionally specify a feature tag.By default we provide some suggestions for filling in feature when creating a link. Those are:\n  share\n  referral\n  invite\n  deal\n  gift\nYou should feel free to specify any other “features” as you see fit.Branch.getInstance(getApplicationContext()).getShortUrl(\"sms\", \"invite_feature\", \"\", null, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t\tif (error == null) {\n\t\t\tLog.i(\"Branch\", \"\"have a link with feature!\");\n\t\t}\n\t}\n})"},{"title":"OG Tags - Looking Good on Social Media","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#og-tags---looking-good-on-social-media","body":"If you want to tailor how a link will appear on social media, you should make use of our support for Open Graph (OG) tags. You can customize the OG tags associated with the link by including key-value pairs in the params dictionary when creating a link. Note that these overwrite any defaults that you previously set on the Branch Dashboard.\n  \n    \n      Key\n      Value\n    \n  \n  \n    \n      “$og_title”\n      The title you’d like to appear for the link in social media\n    \n    \n      “$og_description”\n      The description you’d like to appear for the link in social media\n    \n    \n      “$og_image_url”\n      The URL for the image you’d like to appear for the link in social media\n    \n    \n      “$og_video”\n      The URL for the video\n    \n    \n      “$og_url”\n      The URL you’d like to appear\n    \n    \n      “$og_app_id”\n      Your OG app ID. Optional and rarely used.\n    \n  \n// This will OVERWRITE any defaults you have set on the Branch Dashboard\nJSONObject params = new JSONObject();\ntry {\n    params.put(\"referringUsername\", \"Mario\");\n    params.put(\"referringUserId\", \"1234\");\n    params.put(\"pictureId\", \"987666\");\n    params.put(\"pictureURL\", \"http://yoursite.com/pics/987666\");\n    params.put(\"pictureCaption\", \"The princess and the plumber\");\n\n    // customize the display of the Branch link\n    params.put(\"$og_image_url\", \"http://yoursite.com/pics/987666\");\n    params.put(\"$og_title\", \"Mario's Recent Picture\");\n    params.put(\"$og_description\", \"The princess and the plumber\");\n} catch (JSONException ex) { }\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.getShortUrl(\"Facebook\", \"share\", null, params, new BranchLinkCreateListener() {\n    @Override\n    public void onLinkCreate(String url, Branch.BranchError error) {\n        if (error == null) {\n            // show the link to the user or share it immediately\n        } else {\n            Log.i(\"MyApp\", error.getMessage());\n        }\n    }\n});"},{"title":"Alias - The Custom Ending","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#alias---the-custom-ending","body":"Do you want prettier links – perhaps customized to the user?Utilize the appropriate short/long URL method with the parameter alias to set a custom ending. We have left the other parameters blank intentionally. You may customize them as you see fit.branch.getInstance(getApplicationContext()).getShortUrlSync(\"exciting_path\", \"\", \"\", \"\", null)"},{"title":"Custom Redirects","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#custom-redirects","body":""},{"title":"iOS App Store override - $ios_url","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#ios-app-store-override---iosurl","body":"When a user doesn’t have your app and clicks a link on iOS, by default the user is taken to the App Store or Custom URL that you specified on the Dashboard’s Link Settings page. If you want to specify a different destination on a per-link basis, include a value for the $ios_url.JSONObject params = new JSONObject();\ntry {\n    params.put(\"$ios_url\", \"http://myawesomesite.com/ios-app-landing-page\");\n} catch (JSONException ex) { }\nBranch.getInstance(getApplicationContext()).getShortUrl(params, new BranchLinkCreateListener() {\n    @Override\n    public void onLinkCreate(String url, BranchError error) {\n        if (error == null) {\n            Log.i(\"Branch\", \"created a URL with a custom $ios_url\");\n        }\n    }\n})\n  "},{"title":"Android Play Store override - $android_url","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#android-play-store-override---androidurl","body":"When a user doesn’t have your app and clicks a link on Android, by default the user is taken to the Play Store or Custom URL that you specified on the Dashboard’s Link Settings page. If you want to specify a different destination on a per-link basis, include a value for the $android_url.JSONObject params = new JSONObject();\ntry {\n    params.put(\"$android_url\", \"http://myawesomesite.com/android-app-landing-page\");\n} catch (JSONException ex) { }\nBranch.getInstance(getApplicationContext()).getShortUrl(params, new BranchLinkCreateListener() {\n    @Override\n    public void onLinkCreate(String url, BranchError error) {\n        if (error == null) {\n            Log.i(\"Branch\", \"created a URL with a custom $android_url\");\n        }\n    }\n})\n"},{"title":"Desktop override - $desktop_url","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#desktop-override---desktopurl","body":"When a user clicks a Branch link from a desktop, by default the user is taken to a text-me-the-app page or whichever custom page you specify on the Dashboard’s Link Settings page. If you want to specify a different web page on a per-link basis, include a value for $desktop_url.This is especially useful if you want to serve up content on the web for users who don’t have your mobile app.JSONObject params = new JSONObject();\ntry {\n    params.put(\"$desktop_url\", \"http://myawesomesite.com/the-desired-content\");\n} catch (JSONException ex) { }\nBranch.getInstance(getApplicationContext()).getShortUrl(params, new BranchLinkCreateListener() {\n    @Override\n    public void onLinkCreate(String url, BranchError error) {\n        if (error == null) {\n            Log.i(\"Branch\", \"created a URL with custom $desktop_url\");\n        }\n    }\n})\n"},{"title":"Always try to open the app - $always_deeplink","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#always-try-to-open-the-app---alwaysdeeplink","body":"In certain cases you may want to override the default Branch behavior, which uses cookies and communication with our backend to determine whether to open an app. Branch knows that a user has the app if that user has clicked a Branch link and opened the app. This means that the first time a user clicks a Branch link, even if the app is installed, we will direct the user to the App Store.To override this behavior, you can either select “Always try to open the app” on the Dashboard, or you can specify “$always_deeplink” : “true” on a per-link basis.JSONObject params = new JSONObject();\ntry {\n    params.put(\"$always_deeplink\", true);\n} catch (JSONException ex) { }\nBranch.getInstance(getApplicationContext()).getShortUrl(params, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t\tif (error == null) {\n\t\t\tLog.i(\"Branch\", \"created a URL with $always_deeplink set to true\");\n\t\t}\n\t}\n})\n"},{"title":"Specify a custom deeplink path - $deeplink_path","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#specify-a-custom-deeplink-path---deeplinkpath","body":"The value of the deeplink path that you’d like us to append to your URI. For example, you could specify “$deeplink_path”: “radio/station/456” and we’ll open the app with the URI “yourapp://radio/station/456?link_click_id=branch-identifier”. This is primarily for supporting legacy deeplinking infrastructure.JSONObject params = new JSONObject();\ntry {\n    params.put(\"$deeplink_path\", \"radio/station/456\");\n} catch (JSONException ex) { }\nBranch.getInstance(getApplicationContext()).getShortUrl(params, new BranchLinkCreateListener() {\n    @Override\n    public void onLinkCreate(String url, BranchError error) {\n        if (error == null) {\n            Log.i(\"Branch\", \"created a URL with a custom $deeplink_path\");\n        }\n    }\n})"},{"title":"Routing","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#routing","body":"Your app can deliver users a custom experience based on the Branch link they clicked on that directed them to the app.This means that you can:\n  customize the signup/login flow\n  take the user straight to a specific screen in your app\n  congratulate the user on getting credits for signing up via a friend’s link\n  … and so on.\nBranch is able to pass data through install. When the user first opens the app, Branch makes a fast asynchronous call to the server to see whether the user has clicked on a link, and if so, what data is associated with it. This means that you should design routing accordingly."},{"title":"Example Code","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#example-code","body":"Routing to content is highly app-specific, since mobile apps vary widely in how they are structured. That said, we want to give a concrete example of how you can use Branch links to route straight to content within your app.Inside onStart, when Branch is initialized, you will want to examine the dictionary we pass to you from our callback. This will allow you to know whether or not a link click with context was made. You’ll likely have many entry points based off different parameters.Let’s assume your app revolves around pictures, and each picture has an ID. When user A decides to share a picture, attach that ID to the shortUrl or LongURL being created. When User B downloads (or opens the app if they already have it), the call to initSession will inform you of the parameters user A sent. Unpack em, and route away to the right view!@Override\npublic void onStart() {\n    super.onStart();\n\n    Branch branch = Branch.getInstance(getApplicationContext());\n    branch.initSession(new BranchReferralInitListener(){\n        @Override\n        public void onInitFinished(JSONObject referringParams, Branch.BranchError error) {\n            if (error == null) {\n                // params are the deep linked params associated with the link that the user clicked before showing up\n                // params will be empty if no data found\n                String pictureID = referringParams.optString(\"picture_id\", \"\");\n                if (pictureID.equals(\"\")) {\n                    startActivity(new Intent(this, HomeActivity.class));\n                }\n                else {\n                    Intent i = new Intent(this, ViewerActivity.class);\n                    i.putExtra(\"picture_id\", pictureID);\n                    startActivity(i);\n                }\n            } else {\n                Log.e(\"MyApp\", error.getMessage());\n            }\n        }\n    }, this.getIntent().getData(), this);\n    // if you want to specify isReferrable, then comment out the above line and uncomment this line:\n    // }, true, this.getIntent().getData(), this);\n}For a concrete example of giving users a customized experience via Branch links, check out our Branchster Example."},{"title":"Additional Options","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#additional-options","body":""},{"title":"Adding Stage","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#adding-stage","body":"Stage is one of our lesser used options but is useful nonetheless. Useful for tracking at what stage in your app a link was created. Stage is fully determined by you and is specific to each app. Sample stages include:\n  pre_signup\n  mid_signup\n  post_signup\n  viewing_content\n  on_home_screen\nIf your app is a game, stage could require to the user’s current level.Branch.getInstance(getApplicationContext()).getShortUrl(\"\", \"\", \"stage_four\", null, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t\tif (error == null) {\n\t\t\tLog.i(\"Branch\", \"\"have a link with stage!\");\n\t\t}\n\t}\n})"},{"title":"Match Duration","id":"http://dev.branch.io/recipes/add_custom_link_data_and_routing/android/#match-duration","body":"When we see a link click, we generate a fingerprint for users and store that fingerprint for a limited time – 2 hours by default. That browser fingerprint includes IP address, OS, OS version, etc. Then when that same user who clicked the link opens up an app with the Branch SDK, Branch creates a device fingerprint based on the same parameters and checks with the server to see if a matching browser fingerprint exists.It’s possible, albeit rare, for collisions to occur where two people on the same network have identical hardware, are running identical software, and click a link at the same time (and neithe of them have ever used an app with Branch before). One way to avoid these collisions is to shorten the time window that a browser fingerprint is stored on our servers waiting for a matching device fingerprint.You can adjust how long the browser fingerprint is stored in the browser by setting a duration when you click the link.int duration = 60*60*2;\nBranch.getInstance(getApplicationContext()).(\"\", \"\", \"\", \"\", duration, new BranchLinkCreateListener() {\n\n    @Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t    Log.i(\"Branch\", \"Link created!\");\n\t}\n\n});"},{"title":"Tracking Events","id":"http://dev.branch.io/recipes/advanced_referral_incentives/android/#tracking-events","body":"Note: for analytics and custom events to be useful to you the developer, be sure to identify your users. To see how to identify your users, click here."},{"title":"Standard Events","id":"http://dev.branch.io/recipes/advanced_referral_incentives/android/#standard-events","body":"Branch automatically tracks opens, installs, referred sessions and web session start. You don’t need to write any special code–as soon as you start initializing sessions and clicking on Branch links, these events are recorded.You can easily see these events by navigating the Dashboard’s Export page and clicking on Events.These three events are tied to the initSession and handleOpenURL calls."},{"title":"Custom Events","id":"http://dev.branch.io/recipes/advanced_referral_incentives/android/#custom-events","body":"You can track any custom user actions you wish. This is useful for analytics. From these events you can construct conversion funnels on the Dashboard’s Summary page at the bottom. You can also be notified via a postback to your server every time that an event happens. Visit the Webhooks page for more information on receiving postbacks.Examples of what you may want to track:\n  sign up (especially if you have multiple steps)\n  purchases\n  content shares\n  referrals sent\n  any other engagement, etc.\nTo track custom events, you can make a simple call to the SDK.Branch.getInstance(getApplicationContext()).userCompletedAction(“custom_action_1”);You can also include other information about the action, which is useful for rewarding user actions or receiving additional information via our webhooks. To include custom information, pass it up via the state dictionary:JSONObject metaData = new JSONObject();\nmetaData.put(“key”, “value”);\nBranch.getInstance().userCompletedAction(“custom_action_with_data”, metaData);"},{"title":"Rewards","id":"http://dev.branch.io/recipes/advanced_referral_incentives/android/#rewards","body":""},{"title":"Overview: Credits and Reward Rules","id":"http://dev.branch.io/recipes/advanced_referral_incentives/android/#overview-credits-and-reward-rules","body":"Branch allows you reward users with credits, track those credits, and redeem them when appropriate. It is a unit-less currency available to your users without you having to build a system from scratch.If you decide to track user credits through the Branch platform, then you must configure reward rules on the dashboard and tie them to events that occur in your app. Think of the system like this, your users are constantly completing a steady stream of actions in your app: install, signup, product_purchased. Using the Branch reward rules, you tie reward events to specific actions. Then, with every event that is saved in Branch, we check automatically if that event is eligible for credits based on the rules that you configured, then deposit the credits if so. It’s very powerful."},{"title":"Reward Rule Basics","id":"http://dev.branch.io/recipes/advanced_referral_incentives/android/#reward-rule-basics","body":"\n        \n      To award users for credits, you must set up a reward rule tied to a specific events.Reward rules can be based on standard Branch-defined events like install, open and referred session. They can also be based on custom events.To add a rule, go to the Dashboard Referrals page and click the Rules tab. Click the green “+ Add a new rule” button.These allow you to tailor:\n  Who gets a reward\n  How many credits the reward is\n  Which bucket the credits go to\n  Whether the reward occurs the first time or every time\n  Which event triggers the reward\nWhile the following screen is a bit busy, it illustrates where you adjust these five toggles.\n        \n      Let’s say you want to give 10 credits to each new user who signs up through a friend, and 5 credits to the friend who referred him or her. That can be done through a combination of (two rules.Rule 1: Rewarding the Referred User (10 Credits)\n        \n      \n  Who gets a reward: “Referred acting users”\n  How many credits the reward is: 10\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: the first time\n  Which event triggers the reward: install\nBe sure to press “Add rule”!Rule 2: Rewarding the Referring User (5 Credits)\n        \n      \n  Who gets a reward: “Referring users”\n  How many credits the reward is: 5\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: every time\n  Which event triggers the reward: install\nAfter adding this second rule, you should see the following:\n        \n      That’s it!Rewards are flexibleBranch’s credit system:\n  is based on either Branch-provided events (install, open, and referred session) or any custom events you track with a userCompletedAction call.\n  allows you to define as many “virtual wallets” per user as you want. These are called buckets and if no bucket is specified, the default bucket is debited/credited.\n  has built-in functions for rewarding, checking the balance, and redeeming credits.\n  enables you to specify rewards dynamically using Reward Rules on the dashboard.\n  comes with fraud protection built in.\n"},{"title":"Promo Codes","id":"http://dev.branch.io/recipes/advanced_referral_incentives/android/#promo-codes","body":"\n        \n      At Branch, we are quite opinionated about promo codes: they are an unnecessary hack. Promo codes are never the end goal–rewarding users for sharing and giving proper attribution for installs and signups is the end goal. Our links achieve these goals without requiring users to manually copy, paste and validate promo codes.That said, there are certain situations in which promo codes may be preferable to links, such as printed marketing collateral. (Even then we’d argue for short links–save users from searching through a long list of apps on the App Store / Play Store!) For this case, we provide promo codes. They are used solely to give users credits. They are not a substitute for install attribution, nor do they create the referring-referred relationship needed to trigger reward rules.If you want to share promo codes on printed marketing collateral, you can set them up on the Dashboard under Referrals > Reward Rules > “+ Add new rule” and choose “Promo Code”. Again, these can only be used to give credits to users–they do notYou can also find methods to create promo codes programmatically, but they are limited to one per user (i.e. one per identity). A simple search for the word “code” will locate the appropriate methods.Again, we don’t recommend using promo codes, but they can be useful in certain cases."},{"title":"IsReferrable","id":"http://dev.branch.io/recipes/advanced_referral_incentives/android/#isreferrable","body":"Branch’s default behavior is to track which users refer other users. Also by default, a “referral” event is only recorded if a user who clicked on a link has never opened the app before. The first time he or she clicks a shared Branch link and opens the app, it counts as a referral.This default behavior can be overridden by modifying the initSession method inside your activities onStart. Replace the method call with the following:@Override\npublic void onStart() {\n\n    Branch branch = Branch.getInstance(getApplicationContext());\n    branch.initSession(new BranchReferralInitListener(){\n        @Override\n        public void onInitFinished(JSONObject referringParams, Branch.BranchError error) {\n            // init and routing code\n        }\n    }, true, this.getIntent().getData(), this);\n}You can set the isReferrable argument to true or false, and the behavior is as follows:\n  \n    true Now a connection can be established between a referring user and a referred user during any session, not just the very first time a user opens the app. This means that if a user signs up without clicking on a shared Branch link but later clicks on a link, the referring-referred connection is established. (In the example in part 3 below, if Bob’s friend Amy had already found and opened the app on her own but later came back to it because Bob sent her a link, Bob is the referring user and Amy is the referred user.) There can only be one referring user for any given user (e.g. as soon as Amy clicks a link from Bob, Bob is her referrer and no subsequent shared Branch links will change that). There are specific use cases where you may want this flexibility–feel free to reach out if you have questions.\n  \n  \n    false: If isReferrable is set to false, your app will never track the relationship between referring users and referred users. While we’re not sure why you wouldn’t want such valuable information, it is certainly an option.\n  \nNote that the default behavior when isReferrable is not set is different from both @YES and @NO. It relates the current user to a referring user ONLY for the very first open (aka “Install”)."},{"title":"How It Works","id":"http://dev.branch.io/recipes/analytics_ga/android/#how-it-works","body":"We use webhooks to set up a relationship where any event data gets sent to Google Analytics Measurement Protocol. In addition to event data, you can tack on any extra data you choose as appropriate based off the listed parameters found on this document.Because you can track events through Branch’s SDK, you can specify all event meta data as part of the event you send to Google Analytics in addition to the standard event data you send for a user ID."},{"title":"Set Up","id":"http://dev.branch.io/recipes/analytics_ga/android/#set-up","body":"Before we can start sending data to Google Analytics, we need 4 properties found on your account. The following properties are:\n  v - refers to version\n  tid - refers to your tracking or property ID\n  cid - refers to your anonymous client ID\n  t - refers to your hit type\n  ec - refers to your event category\n  ea - refers to your event action\nWith those six parameters in handy, you can begin to track events with the Branch SDK, and have them properly formatted to send to Google Analytics via our Webhook system.   Still need the GA SDK?Yes, it is required that you have a Google Analytics account with a mobile property created. You also need to integrate their SDK.\n"},{"title":"Save Event Inside App","id":"http://dev.branch.io/recipes/analytics_ga/android/#save-event-inside-app","body":"Before we can tell Google Analytics of an event, we need to save the event to the Branch system, with a minimum of the six details found in the previous step.JSONObject data = new JSONObject();\ndata.put(\"v\", \"1\");\ndata.put(\"tid\", \"12345\");\ndata.put(\"cid\", \"67890\");\ndata.put(\"t\", \"event\");\ndata.put(\"ec\", \"commerce\");\ndata.put(\"ea\", \"purchase\");\ndata.put(\"el\", \"red_shoes\"); // event label\ndata.put(\"ea\", \"300\"); // event value\n\nBranch.getInstance().userCompletedAction(“purchase”, data);\nOnce you have saved these events inside your application, Branch will track the counts of each time the event purchase occurred, with the exact user, and will retain meta data for each user-event.   IdentitiesSince Branch tracks identity, we recommend you keep the property “cid” the same as what you would use if you were calling setIdentity through the Branch SDK.\n"},{"title":"Configure Webhook","id":"http://dev.branch.io/recipes/analytics_ga/android/#configure-webhook","body":"Now that you’re saving events through Branch’s SDK, it’s time to deliver the data to Google Analytics."},{"title":"Endpoint Set Up","id":"http://dev.branch.io/recipes/analytics_ga/android/#endpoint-set-up","body":"Since we cannot set the body of the POST message yet, we require you to use a GET when sending data to Google Analytics.The base endpoint url is:\nhttp://www.google-analytics.com/collect\n\n\nGET /collect?payload_data\nYou will append payload data as needed as a query string after collect."},{"title":"Tempalates","id":"http://dev.branch.io/recipes/analytics_ga/android/#tempalates","body":"Because you will not know the values of the specified keys when inputting the url into the webhook box, you will need to use templates.Our full guide on templates are here, but provided is a sample url needed to send data to Google Analytics:\nhttp://www.google-analytics.com/collect?v=1&tid=12345&cid=/\\{\\{/ event.metadata.cid /\\}\\}/&t=event&ec=/\\{\\{/ event.metadata.ec /\\}\\}/&ea=/\\{\\{/ event.metadata.ea /\\}\\}/&el=/\\{\\{/ event.metadata.el /\\}\\}/&z=42\nYou will also need to remove the forward and backward slashes.   Why the Z parameter?Sometimes, GET requests can be cached. In order to ‘bust’ the cache, Google recommends appending a parameter, labeled Z, with a random number, so that every GET request is fresh. More information\n"},{"title":"Testing","id":"http://dev.branch.io/recipes/analytics_ga/android/#testing","body":"Finally, when it is all said and done, we recommend you send the requests to postbin first to ensure that every time a Branch event is hit, that the proper values are sent in the GET request. When that is taken care of, you can add the webhook with the proper URL and start sending events to Google Analytics!"},{"title":"Getting Started","id":"http://dev.branch.io/recipes/analytics_mixpanel/android/#getting-started","body":"In case you leverage Mixpanel to track in-app events, or want to segment users from Branch installs and calculate LTV, or any other unique use case, we can support you through a couple of methodologies.We have two methods to synchronize data between services. The first is using Branch callbacks to make a call to Mixpanel. This is under methodology 1, Track Through SDK. The second is using Templated Webhooks to deliver data to your backend, which can then send that data to Mixpanel. This is under methodology 2, Track Through Webhooks.Methodology 1 is a simpler integration, but provides less flexibility. Methodology 2 is an advanced integration, but provides a bit more flexibility."},{"title":"Track Through SDK","id":"http://dev.branch.io/recipes/analytics_mixpanel/android/#track-through-sdk","body":"Pre-Reqs:\nSuccessful integration of both the Mixpanel and Branch SDKs\nMethods mapped out inside apps that want to event data sent to Mixpanel\nThe easiest way to send event data that comes in from Branch is to invoke the Mixpanel event tracking function inside any Branch callback.In this example, we’ll take an instance of an install responsible by Branch. We let you know if an install (or referred session if a user already had the app) was caused by Branch, by examining the referred parameter.String projectToken = YOUR-PROJECT-TOKEN // given via Mixpanel.\n\nBranch.getInstance().initSession(new BranchReferralInitListener(){\n    @Override\n    public void onInitFinished(JSONObject referringParams, Branch.BranchError error) {\n        if (error == null) {\n            MixpanelAPI mp = MixpanelAPI.getInstance(getContext(), projectToken);\n            if (params.optBoolean(\"referred\")) {\n                mp.track(\"install\", referringParams);\n            }\n        }\n    }\nMixpanel would then receive the Branch install event, and you would know Branch is responsible because referred would equal true inside the properties argument."},{"title":"Identity And Customer Segments / Profiles","id":"http://dev.branch.io/recipes/analytics_mixpanel/android/#identity-and-customer-segments--profiles","body":"Let’s say you want to take it a step further and track Branch specific installs and users inside your segments for Mixpanel. We have support for that as well. The way to leverage that would be with the following:\n  After a successful Branch session, set an identity.\n  Set an identity in Mixpanel\n  Track events.\nSince you set identity depending on your user authentication flow, we’d recommend taking care of that first. When that’s done, all you need to do is the following:JSONObject data = new JSONObject();\ndata.put(\"item\", \"123-AB-456\");\n\nBranch.getInstance().userCompletedAction(“purchase”, data);\nMixpanel.getInstance().track(\"purchase\", data);\n"},{"title":"Track Through Webhooks","id":"http://dev.branch.io/recipes/analytics_mixpanel/android/#track-through-webhooks","body":"Pre-Reqs:\nA server that accepts GET or POST commands\nMixpanel back-end SDK configured to upload data to Mixpanel account\nIn this methodology, you will need to configure the GET or POST with our webhooks. You will specify what parameter is passed through to your server in addition to the data we provide, which is found below:{\n\t\"event\": \"open\",\n\t\"metadata\": {\n\t\t\"ip\": \"73.222.120.96\",\n\t\t\"referred\": false\n\t},\n\t\"session_referring_link_data\": {\n\t\t\"app_id\": \"98444119008870744\",\n\t\t\"tag\": null,\n\t\t\"campaign\": null,\n\t\t\"channel\": null,\n\t\t\"feature\": \"marketing\",\n\t\t\"stage\": null,\n\t\t\"tags\": null,\n\t\"data\": {\n\t\t\"$marketing_title\": \"Testing Mixpanel K/V\",\n\t\t\"extra_data\": \"1234\"\n\t},\n\t\t\"state\": null,\n\t\t\"alias\": null,\n\t\t\"date\": \"2015-04-27T18:25:36.402Z\",\n\t\t\"href\": \"/l/4ix6DwE_4U\",\n\t\t\"branch_id\": \"121303087695532448\"\n\t},\n\t\"os\": \"Android\",\n\t\"os_version\": \"19\"\n}\nThis is the base body that we send over, but you will use [[Branch getInstance] trackEvent:”@exciting_event” withState:state]] to attach any state variables you need (state being a JSON Dictionary)."},{"title":"The Smart Banner","id":"http://dev.branch.io/recipes/app_download_banner/android/#the-smart-banner","body":"\n        \n         This just works!\nThis short snippet of code below is enough to add a web banner to both your desktop and mobile web pages! Of course, you’ll want to configure it, so check out both the Smart Banner Options and Link Options below.\nAdd the following code somewhere inside the <head> </head> tags on your website. Be sure to replace YOUR-BRANCH-KEY with your Branch Key inside the init() call. You can find your Branch Key on the Dashboard’s Settings page.<script type=\"text/javascript\">\n  (function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.8.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits creditHistory applyCode validateCode getCode redeem banner closeBanner\".split(\" \"),0);\n\n  branch.init('YOUR-BRANCH-KEY');\nbranch.banner({\n    icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n    title: 'Branch Demo App',\n    description: 'The Branch demo app!'\n}, {});\n\n</script>That’s all you need to add the smart banner to your website! The rest of this page covers advanced options.Closing the App Banner ProgrammaticallyThe App Banner includes a close button the user can click, but you may want to close the banner with a timeout, or via some other user interaction with your web app. In this case, closing the banner is very simple by calling Branch.closeBanner().js\nbranch.closeBanner();\nSmart Banner Options, Link OptionsThere are a lot of options here, but don’t be scared. Specifying them is optional, although you’ll probably want to do so to tailor it to your needs.branch.banner({\n    icon: 'http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png',\n    title: 'Branch Demo App',\n    description: 'The Branch demo app!',\n    openAppButtonText: 'Open',              // Text to show on button if the user has the app installed\n    downloadAppButtonText: 'Download',      // Text to show on button if the user does not have the app installed\n    sendLinkText: 'Send Link',              // Text to show on desktop button to allow users to text themselves the app\n    phonePreviewText: '+44 9999-9999',      // The default phone placeholder is a US format number, localize the placeholder number with a custom placeholder with this option\n    showiOS: true,                          // Should the banner be shown on iOS devices?\n    showAndroid: true,                      // Should the banner be shown on Android devices?\n    showDesktop: true,                      // Should the banner be shown on desktop devices?\n    iframe: true,                           // Show banner in an iframe, recomended to isolate Branch banner CSS\n    disableHide: false,                     // Should the user have the ability to hide the banner? (show's X on left side)\n    forgetHide: false,                      // Should we show the banner after the user closes it? Can be set to true, or an integer to show again after X days\n    position: 'top',                        // Sets the position of the banner, options are: 'top' or 'bottom', and the default is 'top'\n    mobileSticky: false,                    // Determines whether the mobile banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to false *this property only applies when the banner position is 'top'\n    desktopSticky: true,                    // Determines whether the desktop banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to true *this property only applies when the banner position is 'top'\n    customCSS: '.title { color: #F00; }',   // Add your own custom styles to the banner that load last, and are gauranteed to take precedence, even if you leave the banner in an iframe\n    make_new_link: false                    // Should the banner create a new link, even if a link already exists?\n}, {\n    tags: ['tag1', 'tag2'],\n    feature: 'dashboard',\n    stage: 'new user',\n    type: 1,\n    data: {\n        mydata: 'something',\n        foo: 'bar',\n        '$desktop_url': 'http://myappwebsite.com',\n        '$ios_url': 'http://myappwebsite.com/ios',\n        '$ipad_url': 'http://myappwebsite.com/ipad',\n        '$android_url': 'http://myappwebsite.com/android',\n        '$og_app_id': '12345',\n        '$og_title': 'My App',\n        '$og_description': 'My app\\'s description.',\n        '$og_image_url': 'http://myappwebsite.com/image.png'\n    }\n});   Deeplinking through Install\nThis data dictionary containing foo: 'bar' etc is where you put data that you want passed through install. This is discussed in the next section on Routing.\n"},{"title":"(Optional) Routing: passing information from the Banner","id":"http://dev.branch.io/recipes/app_download_banner/android/#optional-routing-passing-information-from-the-banner","body":"Now that you’ve added routing to your app, you can add information to the Smart Banner. If you’ve used the example Smart Banner code above, you simply need to insert any key-value pairs you’d like into the data dictionary.Using our example of routing above with the PicVC, you’d simply need to change the Web Banner code to the following:branch.banner(options, {\n    phone: '9999999999',\n    type: 1,\n    data: {\n        'pictureId': '12345',\n    }\n});Now when a user clicks on the Smart Banner on a mobile device, when they open your app they will be taken straight to a view controller to see picture with id “12345”. It’s that simple.Deep linking has countless possibilities and we’d be happy to brainstorm use cases for your specific app. Happy building!"},{"title":"Conclusion","id":"http://dev.branch.io/recipes/app_download_banner/android/#conclusion","body":"You’ve learned how to add a smart banner to your website with minimal configuration and some copying-and-pasting Javascript into your website. Perhaps the allure of passing data through install or deep linking to content caught your eye and you added the SDK to your Android app. There’s a ton more that Branch can do. For example, you can:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Creating links programmatically to share content","id":"http://dev.branch.io/recipes/content_sharing/android/#creating-links-programmatically-to-share-content","body":"Links are the foundation to everything Branch offers. There are many different aspects to creating links but the most important are:\n  Embed key/value deep link metadata. We’ll make sure this gets delivered to the app with the clicking user\n  Label feature and channel for analytics on the dashboard\nHere’s how to create your own Branch Links.JSONObject obj = new JSONObject(); obj.putString(\"foo\", \"bar\");\nbranch.getShortUrl(obj, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t\tLog.i(TAG, \"Ready to share my link = \" + url);\n\t}\n});   Data is for Deeplinking\nYou use the data to link directly to content! Instead of “foo”: “bar”, you could pass in “picture_id”: “1234”, then when a user clicks on a link you can open the app straight to picture with Id 1234. Keep reading…\n"},{"title":"Routing to content within your Android app","id":"http://dev.branch.io/recipes/content_sharing/android/#routing-to-content-within-your-android-app","body":"Routing to content is highly app-specific, since mobile apps vary widely in how they are structured. That said, we want to give a concrete example of how you can use Branch links to route straight to content within your app.Inside onStart, when Branch is initialized, you will want to examine the dictionary we pass to you from our callback. This will allow you to know whether or not a link click with context was made. You’ll likely have many entry points based off different parameters.Let’s assume your app revolves around pictures, and each picture has an ID. When user A decides to share a picture, attach that ID to the shortUrl or LongURL being created. When User B downloads (or opens the app if they already have it), the call to initSession will inform you of the parameters user A sent. Unpack em, and route away to the right view!@Override\npublic void onStart() {\n    super.onStart();\n\n    Branch branch = Branch.getInstance(getApplicationContext());\n    branch.initSession(new BranchReferralInitListener(){\n        @Override\n        public void onInitFinished(JSONObject referringParams, Branch.BranchError error) {\n            if (error == null) {\n                // params are the deep linked params associated with the link that the user clicked before showing up\n                // params will be empty if no data found\n                String pictureID = referringParams.optString(\"picture_id\", \"\");\n                if (pictureID.equals(\"\")) {\n                    startActivity(new Intent(this, HomeActivity.class));\n                }\n                else {\n                    Intent i = new Intent(this, ViewerActivity.class);\n                    i.putExtra(\"picture_id\", pictureID);\n                    startActivity(i);\n                }\n            } else {\n                Log.e(\"MyApp\", error.getMessage());\n            }\n        }\n    }, this.getIntent().getData(), this);\n    // if you want to specify isReferrable, then comment out the above line and uncomment this line:\n    // }, true, this.getIntent().getData(), this);\n}"},{"title":"Conclusion","id":"http://dev.branch.io/recipes/content_sharing/android/#conclusion","body":"Now that you’ve completed the basic integration, you can skip steps one (Configuring the Dashboard) and two (Configuring the Client) in the following guides. Next steps:\n  Link and install attribution – learn where every user is coming from\n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    Branch + Facebook – give users a custom experience based on the ad that brought them to your app!  (Skip Steps 1 and 3)\n  \n  Referrals with incentives – reward users based on the installs or engagement they generate\nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"“Always try to open the app”","id":"http://dev.branch.io/recipes/dashboard_pro_tips/android/#always-try-to-open-the-app","body":"By default, Branch will take users to the Play Store if we do not know that the user has your app. So the first time a user clicks a link, we take him or her to the Store (or, on Android, $android_url).The reason we do this is to avoid an ugly error message if the URI scheme fires and fails. By tracking users we’ve seen before with a cookie, we can know whether or not they have your app installed.If you want to override the behavior and try the URI scheme first every time (with a fallback to the Play Store after .5 seconds), you can turn on the option “Always try to open the app.” You can see it in the screenshot below or on the Link Settings page."},{"title":"Setting a custom link domain","id":"http://dev.branch.io/recipes/dashboard_pro_tips/android/#setting-a-custom-link-domain","body":"While you may enjoy Branch, it doesn’t mean you need to have bnc.lt as a part of every link you send out. If you want Branch links to use your custom subdomain, you need to follow a few simple steps.\n  You need to choose a subdomain, let get.myapp.co.\n  You need to point the CNAME record for this subdomain at us – bnc.lt is our link service.\n  After you’ve confirmed that the CNAME records have propagated throughout the internet, you need to set your custom subdomain on our Dashboard > Settings > Link Settings > Custom Link Domain. See the screenshot below.\nAfter you set this up, the custom subdomain you specify will be the basis of all Branch links created. As a side note, if a user types in your custom subdomain on its own (e.g. get.myapp.co), we will redirect to your Default URL as specified on the Link Settings page.Lastly, if you want to use your root-level domain (like myapp.com), you will need to make use of a service like CloudFlare. Check out the following two articles:\n  https://blog.cloudflare.com/zone-apex-naked-domain-root-domain-cname-supp/\n  https://support.cloudflare.com/hc/en-us/articles/200169056-CNAME-Flattening-RFC-compliant-support-for-CNAME-at-the-root\n   Changing subdomains is painful\nChanging between custom subdomains (e.g. from get.myapp.com to download.myapp.com) is painful and should be avoided at all costs. Some links will be migrated, others will stop working. We recommend you pick a subdomain you like and stick with it for the long haul!\n"},{"title":"Dashboard Summary","id":"http://dev.branch.io/recipes/dashboard_pro_tips/android/#dashboard-summary","body":"\n        \n      The Dashboard’s Summary page is quite powerful. You can see:\n  Total installs\n  Time plot and pie chart: Branch-driven installs by feature, campaign, channel and tags over time\n  Clicks, installs and opens by platform (desktop, Android, iOS), as well as by campaign, channel, etc.\n  Conversion funnels\n"},{"title":"Funnels","id":"http://dev.branch.io/recipes/dashboard_pro_tips/android/#funnels","body":"You can construct conversion funnels of both Branch-defined events and custom events. At the bottom of the Dashboard’s Summary page you can see Conversions.Simply select two or more events to see a conversion funnel. For example, if you track a custom event called purchase, you can track how many referred sessions led to purchases.This is how the funnel looks:\n        \n      "},{"title":"Influencers: Your Best Users","id":"http://dev.branch.io/recipes/dashboard_pro_tips/android/#influencers-your-best-users","body":"Branch allows you to easily see which users are driving the most actual installs – not just pressing the share button the most.To see this info, follow the required steps for configuring your Android app, which can be found in our quick-start guide Integrating the SDK. After you have done this and users start to invite other users, you will see the Influencers page, which is part of the Referrals section.Here’s what your results should look like:\n\n        \n         Identify your users!\nYou must identify your users in order for the User ID column to be populated.\nThe Branch ID refers to the internal Branch ID associated with that user. It is set automatically in the SDK."},{"title":"Introduction","id":"http://dev.branch.io/recipes/email_campaigns/android/#introduction","body":"Branch Links enable deep linking, install attribution, and in-depth analytics. While configuring your apps–whether Android, iOS or web–enables you to be much more powerful, basic links can be set up before writing a line of code.You can do this from the Branch Dashboard. We will first walk you through creating an app, then proceed to link creation."},{"title":"Basic Setup","id":"http://dev.branch.io/recipes/email_campaigns/android/#basic-setup","body":"Note, if you already completed these steps in the guide Your First Link, then you can skip down to the next section, Creating your Link."},{"title":"App Name","id":"http://dev.branch.io/recipes/email_campaigns/android/#app-name","body":"To get started, point your browser to https://dashboard.branch.io/"},{"title":"Web URL","id":"http://dev.branch.io/recipes/email_campaigns/android/#web-url","body":"\n        \n      This is where we will take users who click a Branch link if we don’t know where else to take them. For example, if you don’t have an Android app released yet, Android users will be taken to this link. Don’t forget to Save!To configure the Web URL on an existing app, you will need to navigate to the Settings > Link Settings page on the Dashboard. Scroll down to Default URL and enter your website.   Tip:\nYou can customize this fallback URL on a per-platform or even per-link basis. After completing setup, you may want to check out our section on Custom Redirects.\n"},{"title":"Play Store or custom URL","id":"http://dev.branch.io/recipes/email_campaigns/android/#play-store-or-custom-url","body":"\n        \n      Part of the magic of Branch Links is that you can have different configurations for iOS, Android, Fire… – and it just works! In this section, you need to specify where the user can download your app.When setting up an Android app, you need to locate your app in the Play Store. Start typing the name of your app and it should show up in the box.You may be wondering–what if I can’t find my app, or it isn’t on the Play Store yet? Good news: you can specify any location you want. For Android Apps, you can specify the URL of your APK file. Hosting on Dropbox or crashlytics works fine, just as long as it’s the .apk itself you’re linking to. For Android, we require the package name appended to this custom URL as we set the intent accordingly and allow a deeplink simulation whether it’s the first download or any consequent deeplink to a non play-store URL.   Note:\nThis field is required. If you are in the early stages of testing, you can enter a Custom URL (http://google.com works). Please be sure to enter your package name as well! Then when you click a Branch link, instead of navigating to the Play Store, it will go to this URL. Then you can simulate an install by running the app from Eclipse or Android Studio.\nThat’s the end of the required setup for the Dashboard! The dashboard is incredibly powerful, so if you want to dive in deeper, definitely check out Configuring the Dashboard for the full setup."},{"title":"Creating your Link","id":"http://dev.branch.io/recipes/email_campaigns/android/#creating-your-link","body":""},{"title":"Add a marketing link","id":"http://dev.branch.io/recipes/email_campaigns/android/#add-a-marketing-link","body":"When you create links on the dashboard, you have a subset of these overall labels available to you. Visit the Dashboard’s Marketing page. Then click + Add link to get started.\n        \n      The following sections will walk through various options and their implications."},{"title":"Analytics: Channel, Campaign, Etc","id":"http://dev.branch.io/recipes/email_campaigns/android/#analytics-channel-campaign-etc","body":"optionalThe more information you enter, the better you’ll be able to segment data on the Dashboard and in exports. We recommend setting Channel and Campaign. Tags is free form.For information of the form [key]: [value] such as “product”: “shoes”, we recommend adding them below–see Deep Link Data (Optional)."},{"title":"Custom Link Label (Optional – highly recommended)","id":"http://dev.branch.io/recipes/email_campaigns/android/#custom-link-label-optional----highly-recommended","body":"optionalHere is where you can add a custom alias to the end of the link. For example, you can create links.myexample.com/download."},{"title":"Social Media (OG) Format","id":"http://dev.branch.io/recipes/email_campaigns/android/#social-media-og-format","body":"optionalYou can customize how the link will look on Twitter, Facebook, Pinterest and any other service with link previews. For more information on the optimal format for the title and description, see Facebook’s Sharing Best Practices."},{"title":"Deep Link Data (Optional)","id":"http://dev.branch.io/recipes/email_campaigns/android/#deep-link-data-optional","body":"optionalHere is where you can specify the custom parameters to add to a link that will be deep linked into the app. You might want to put a coupon code or a page identifier here to route the user.This powerful link will now track clicks across platforms. Users who have the app (perhaps you beta testers if you’re just launching!) will be linked straight to the app. Users who don’t have the app will be taken to the Play Store to download your app. And any users who click this link on Desktop will be given the option to text themselves the app!\n"},{"title":"Conclusion and Advanced Options","id":"http://dev.branch.io/recipes/email_campaigns/android/#conclusion-and-advanced-options","body":"It’s that simple! You now have a link that will track clicks based on the channel, campaign and any other tags you create. It has a custom ending (as opposed to random characters). It’s properly formatted for social media.The Dashboard’s Summary page, specifically the “Click Flow” chart, now can show you meaningful results! Note all the filters in the screenshot below:\n        \n      To start collecting statistics regarding installs, opens, referred installs – and to add powerful, deferred deep links – check out any of our other guides. These allow you to:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"One time configuration","id":"http://dev.branch.io/recipes/facebook_appinvites/android/#one-time-configuration","body":"In order for Branch to properly run a Facebook deeplinked ad campaign, you must first send Branch your app token. This is easy to get, and you can find the step by step instructions on how to do so below.\n  Log in to Facebook, navigate to developers.facebook.com/apps and choose your app. You’ll need the App ID and Client Secret.\n\n        \n      \n  On the Branch Dashboard, go to Settings > Link Settings and scroll down to ‘Authenticate for Facebook Install Ads’. Enter your App ID and Client Secret from Facebook.\n\n        \n      \n  Press ‘Authenticate’. That’s it!\n"},{"title":"Insert Branch link into Invite","id":"http://dev.branch.io/recipes/facebook_appinvites/android/#insert-branch-link-into-invite","body":"Every Branch link automatically comes packed with all of the AppLinks to automatically handle deep linking off of Facebook posts. The Branch link will work for both fresh installs for new users and opens for users who already have the app. You can show a personal welcome for each!JSONObject params = new JSONObject();\ntry {\n    params.put(\"referring_user_id\", \"1234\");\n    params.put(\"referring_user_name\", \"Zack Zuckerberg\");\n} catch (JSONException ex) { }\nBranch branch = Branch.getInstance(getApplicationContext());\nbranch.getShortUrl(\"facebook\", \"app_invite\", null, params, new BranchLinkCreateListener() {\n    @Override\n    public void onLinkCreate(String url, Branch.BranchError error) {\n\t\tif (AppInviteDialog.canShow()) {\n\t\t\tAppInviteContent content = new AppInviteContent.Builder()\n\t\t                .setApplinkUrl(url)\n\t\t                .setPreviewImageUrl(\"https://s3-us-west-1.amazonaws.com/host/zackspic.png\")\n\t\t                .build();\n\t\t\tAppInviteDialog.show(this, content);\n\t\t}\n    }\n});"},{"title":"Show Custom Welcome","id":"http://dev.branch.io/recipes/facebook_appinvites/android/#show-custom-welcome","body":"Since you dropped a Branch link into the URL for the AppInvite, you can use Branch to determine if a new user came from an existing app user. Below, you can see an example that our partner Gogobot built using the Branch deep link callback. The screen below is what a user sees if they came from a referring Branch link, compared to the generic onboarding which just shows a fancy picture. It drove a  78% lift in conversion to register.\n        \n      Here’s how to build it:import io.branch.referral.Branch;\nimport com.facebook.FacebookSdk;@Override\nprotected void onStart() {\n    super.onStart();\n    Branch branch = Branch.getInstance(getApplicationContext());\n    branch.initSession(new BranchReferralInitListener(){\n        @Override\n        public void onInitFinished(JSONObject referringParams, BranchError error) {\n            if (referringParams.getBoolean(\"+clicked_branch_link\")) {\n            \tLog.i(\"MyApp\", \"new session was referred by \" + referringParams.getString(\"referring_user_name\"));\n\t    \t\t// show personal welcome view controller\n        \t}\n        }\n    }, this.getIntent().getData(), this);\n}Next, you’ll need to hook into the onNewIntent method specified inside the Activity lifecycle and set the intent. This is required for conformity with Facebook’s AppLinks. Verify that the activity you’re implementing has launchMode set to singleTask inside the Manifest declaration. Once that’d done, go to said activity and do something like the folllowing:@Override\npublic void onNewIntent(Intent intent) {\n    this.setIntent(intent);\n}Side note: This is a requirement because of the new Facebook AppLinks change. Facebook doesn’t open up the browser anymore and just calls the URI to open the app directly. This prevented Branch clicks from being registered. To support it, we pass that link click id through the URI scheme to Branch, and send that back to the app, creating a ‘click’ without actually seeing a click. Android does a very poor job of clearing out intents that were previously called, so this helps ensure that once a URI scheme is called and consumed, it won’t trigger deep linking anymore.On Android, you also need to be sure to properly close the session inside onStop with a branch.closeSession(). This helps us manage a session across activities.@Override\nprotected void onStop() {\n    super.onStop();\n    branch.closeSession();\n}"},{"title":"Troubleshooting","id":"http://dev.branch.io/recipes/facebook_appinvites/android/#troubleshooting","body":"\n        \n      If Facebook is having trouble reading the AppLinks from the Branch link, you might see this message while trying to test out the flow. This means that there is something corrupted in the OG tags causing Facebook to not parse it. You can test the OG tags using the following tool provided by Facebook:OG tag testerIf your OG tags look fine and you’re still getting this error, please reach out to support@branch.io immediately."},{"title":"Common issues with Facebook Authentication","id":"http://dev.branch.io/recipes/facebook_appinvites/android/#common-issues-with-facebook-authentication","body":"If you are having trouble authenticating with Facebook, please check the following:Be sure you have the correct App ID and Client SecretBe sure you have the correct App ID and Client Secret. This is the number one source of issues.Client Secret embedded?If you have entered the correct App ID and Secret but are still getting issues, it may be related to how you are using your Secret. Visit the Settings > Advanced page and check that you don’t have the toggle enabled for “Is your App Secret embedded?” You will only have this option if you have enabled “Native or desktop app?” on this page.So if you have enabled “Native or desktop app”, then your advanced options should appear like the following:\n        \n      "},{"title":"Welcome to your dashboard","id":"http://dev.branch.io/recipes/measuring_installs/android/#welcome-to-your-dashboard","body":"You’ve created a link and integrated the SDK - now it’s time to dive into your data with the Branch Dashboard.On your dashboard you can see how many installs are being driven by word of mouth versus ad campaigns, and how well Facebook does compared to Twitter and SMS. You can do analysis comparing your marketing links to individualized links shared by your users.One screenshot is worth a million… dollars on spent on poorly performing ads and expensive tools to track those ads:\n        \n      "},{"title":"Install versus Open","id":"http://dev.branch.io/recipes/measuring_installs/android/#install-versus-open","body":"We measure installs and opens separately:\n  An install is the very first time a user launches the app.\n  An open is any other time the user opens the app after the very first launch.\nWhen you look at how your Branch links are performing, you can see how many are installs and opens they are driving. Don’t be confused by the terminology: install is the first time the user accesses your app; every subsequent time the user enters your app is an open in our system."},{"title":"Dashboard tips","id":"http://dev.branch.io/recipes/measuring_installs/android/#dashboard-tips","body":"Here’s some handy advice for getting the most out of your dashboard:\n  \n    Segment your data using the filters offered to drill down into specific sources\n  \n  \n    Use a Branch link for every download you want to drive (looking at you app download banner) so you have context for every source\n  \n  \n    Set up custom events to create conversion funnels\n  \n  \n    See who your power users are by implementing referral links then viewing data about your top users\n  \n  \n    Remember you can embed any parameters you want into Branch links, you’ll just need to export them if they aren’t one of the parameters we show by default in the dashboard\n  \n"},{"title":"What’s next?","id":"http://dev.branch.io/recipes/measuring_installs/android/#whats-next","body":"You’ve got deeplinking (that works through install) and you’re tracking link clicks, installs and opens. Let’s supercharge your app by implementing more sharing features to help organic and paid growth. Also keep in mind that Branch links are highly customizable since you can embed arbitrary metadata in the links, so there’s really no limit to what you can build:\n  \n    Content sharing – deeplink to your app content through install from any device\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    App download banner – cross-platform, customizable web banner\n  \n  \n    Text-me-the-app page – your site, Branch’s free text-me-the-app service\n  \n"},{"title":"Generating Links","id":"http://dev.branch.io/recipes/personalized_welcome/android/#generating-links","body":""},{"title":"Creating links in your app","id":"http://dev.branch.io/recipes/personalized_welcome/android/#creating-links-in-your-app","body":"Links are the foundation to everything Branch offers. Branch’s links offer the ability to deep link directly to content, to pass data through the install process, and to understand where users are coming from. In the case of a personalized referral system, you can attach information about the user who is sharing the link. Then this information about this user–here “John” with id “1234”–is present anytime John’s friends install the app after clicking his link.@{@\"referringUsername\":@\"John\", @\"referringUserId\":@\"1234\"}\nbranch.getShortUrl(obj, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t\tLog.i(TAG, \"Ready to share my link = \" + url);\n\t}\n});"},{"title":"Sharing Branch Links","id":"http://dev.branch.io/recipes/personalized_welcome/android/#sharing-branch-links","body":"These links can be shared anywhere – via SMS, email, social media – you name it. If you have existing sharing functionality in place, all you need to do is insert a Branch link."},{"title":"The Personal Touch: A Welcome Screen","id":"http://dev.branch.io/recipes/personalized_welcome/android/#the-personal-touch-a-welcome-screen","body":"Routing to content is highly app-specific, since mobile apps vary widely in how they are structured. That said, we want to give a concrete example of how you can use Branch links to route straight to content within your app.Inside onStart, when Branch is initialized, you will want to examine the dictionary we pass to you from our callback. This will allow you to know whether or not a link click with context was made. You’ll likely have many entry points based off different parameters.Let’s assume your app revolves around pictures, and each picture has an ID. When user A decides to share a picture, attach that ID to the shortUrl or LongURL being created. When User B downloads (or opens the app if they already have it), the call to initSession will inform you of the parameters user A sent. Unpack em, and route away to the right view!@Override\npublic void onStart() {\n    super.onStart();\n\n    Branch branch = Branch.getInstance(getApplicationContext());\n    branch.initSession(new BranchReferralInitListener(){\n        @Override\n        public void onInitFinished(JSONObject referringParams, Branch.BranchError error) {\n            if (error == null) {\n                // params are the deep linked params associated with the link that the user clicked before showing up\n                // params will be empty if no data found\n                String pictureID = referringParams.optString(\"picture_id\", \"\");\n                if (pictureID.equals(\"\")) {\n                    startActivity(new Intent(this, HomeActivity.class));\n                }\n                else {\n                    Intent i = new Intent(this, ViewerActivity.class);\n                    i.putExtra(\"picture_id\", pictureID);\n                    startActivity(i);\n                }\n            } else {\n                Log.e(\"MyApp\", error.getMessage());\n            }\n        }\n    }, this.getIntent().getData(), this);\n    // if you want to specify isReferrable, then comment out the above line and uncomment this line:\n    // }, true, this.getIntent().getData(), this);\n}"},{"title":"Conclusion: There’s So Much More","id":"http://dev.branch.io/recipes/personalized_welcome/android/#conclusion-theres-so-much-more","body":"Adding a personalized invite system is as simple as creating Branch links, sharing them and then examining the custom params dictionary that is present when a new user opens the app.There’s so much more though! With Branch, you can:\n  \n    Referrals with incentives – reward users based on the installs or engagement they generate\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Configuring the links","id":"http://dev.branch.io/recipes/quickstart_guide/android/#configuring-the-links","body":"First, please visit the Branch link configuration tool to setup all the redirection logic."},{"title":"Configuring your Android app","id":"http://dev.branch.io/recipes/quickstart_guide/android/#configuring-your-android-app","body":""},{"title":"Installing the SDK files","id":"http://dev.branch.io/recipes/quickstart_guide/android/#installing-the-sdk-files","body":"For Android, the easiest way to add the SDK to your project is by adding the Branch SDK inside your project structure as a library dependency. Here are the steps:\n  Right click on the main module within your project (this is called ‘app’ by default).\n  Select Open Module Settings.\n  Within the Dependencies tab, click the + button at the bottom of the window and select Library Dependency.\n  Type branch, and hit the enter key to search Maven Central for the Branch SDK Library.\n  Select the latest io.branch.sdk.android:library item listed.\nIn case you’d like to use our .jar instead, here’s a link that always points to our latest.Finally, you can always clone our Android SDK project and import it into your workspace for maximum visibility."},{"title":"Manifest configuration","id":"http://dev.branch.io/recipes/quickstart_guide/android/#manifest-configuration","body":"Add your Branch keyYour app key can be retrieved on the Settings page of the dashboard. Now you need to add it to your project workspace.\n  Navigate to to res/values/strings.xml\n  Navigate to AndroidManifest.xml and add the following <meta-data tag:\n<application>\n    <!-- Other existing entries -->\n\n    <meta-data android:name=\"io.branch.sdk.BranchKey\" android:value=\"key_live_jbgnjxvlhSb6PGH23BhO4hiflcp3y8kx\" />\n    <meta-data android:name=\"io.branch.sdk.BranchKey.test\" android:value=\"key_test_jkptOCZtmtxhOMZ11ynbXecdDCd93cbr\" />\n</application>Configure for deep linkingFind the Activity you want to open up when a link is clicked (normally your splash Activity) and do the following:\n  Copy in the intent filter as seen below with VIEW/DEFAULT/BROWSABLE in it.\n  Change yourapp to a URI scheme representative of your app\n<activity\n\tandroid:name=\"com.yourapp.SplashActivity\"\n\tandroid:label=\"@string/app_name\" >\n\t<intent-filter>\n\t\t<action android:name=\"android.intent.action.MAIN\" />\n\t\t<category android:name=\"android.intent.category.LAUNCHER\" />\n\t</intent-filter>\n\n\t<!-- Add this intent filter below, and change yourapp to your app name -->\n\t<intent-filter>\n\t\t<data android:scheme=\"yourapp\" android:host=\"open\" />\n\t\t<action android:name=\"android.intent.action.VIEW\" />\n\t\t<category android:name=\"android.intent.category.DEFAULT\" />\n\t\t<category android:name=\"android.intent.category.BROWSABLE\" />\n\t</intent-filter>\n</activity>Subclass the Branch activityBranch can automatically track the Android app lifecycle on API level 14 and above, so make sure that your minSdkVersion is 14. If you need to support pre-14, please see section about session management below.<application\n    android:name=\"io.branch.referral.BranchApp\">If you already use an Application class or don’t want to subclass your Application, you can choose from the alternatives listed here."},{"title":"Starting a Branch Session","id":"http://dev.branch.io/recipes/quickstart_guide/android/#starting-a-branch-session","body":"The Branch session starts every single time your app opens up, and checks if the user came from a link. You register a callback method here that will return any deep link parameters upon link click. Please note that the callback function is called 100% of the time, even when the network is out.We also bundle in a bunch of other stuff that you might find useful.Open up your splash activity (or the activity you registered the intent for above), then add the onStart lifecycle method:@Override\npublic void onStart() {Initialize the session and register your deep link router:Branch branch = Branch.getInstance(getApplicationContext());\nbranch.initSession(new BranchReferralInitListener(){\n    @Override\n    public void onInitFinished(JSONObject referringParams, BranchError error) {\n        if (error == null) {\n            // params are the deep linked params associated with the link that the user clicked -> was re-directed to this app\n            // params will be empty if no data found\n            // ... insert custom logic here ...\n        } else {\n            Log.i(\"MyApp\", error.getMessage());\n        }\n    }\n}, this.getIntent().getData(), this);NOTE if you’re calling this inside a fragment, please use getActivity() instead of passing in this. Also, this.getIntent().getData() refers to the data associated with an incoming intent.Next, you’ll need to hook into the onNewIntent method specified inside the Activity lifecycle and set the intent. This is required for conformity with Facebook’s AppLinks.@Override\npublic void onNewIntent(Intent intent) {\n    this.setIntent(intent);\n}"},{"title":"Creating links","id":"http://dev.branch.io/recipes/quickstart_guide/android/#creating-links","body":"Links are the foundation to everything Branch offers. There are many different aspects to creating links but the most important are:\n  Embed key/value deep link metadata. We’ll make sure this gets delivered to the app with the clicking user\n  Label feature and channel for analytics on the dashboard\nHere’s how to create your own Branch Links.JSONObject obj = new JSONObject(); obj.putString(\"foo\", \"bar\");\nbranch.getShortUrl(obj, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t\tLog.i(TAG, \"Ready to share my link = \" + url);\n\t}\n});   Data is for Deeplinking\nYou can also use the data to link directly to content! Instead of “foo”: “bar”, you could pass in “picture_id”: “1234”, then when a user clicks on a link you can open the app straight to picture with Id 1234. Keep reading…\n"},{"title":"Conclusion","id":"http://dev.branch.io/recipes/quickstart_guide/android/#conclusion","body":"Congratulations! You’re now up and running with Branch. To finish up, we’ll walk you through the data you’re seeing in your dashboard in Link and Install Attribution.Questions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Advanced","id":"http://dev.branch.io/recipes/quickstart_guide/android/#advanced","body":"Branch-provided data parameters in callbackPreviously, Branch did not return any information to the app if initSession was called but the user hadn’t clicked on a link. Now Branch returns explicit parameters every time. Here is a list, and a description of what each represents.\n  ~ denotes analytics\n  + denotes information added by Branch\n  (for the curious, $ denotes reserved keywords used for controlling how the Branch service behaves)\n\n  \n    \n      Parameter\n      Meaning\n    \n    \n      ~channel\n      The channel on which the link was shared, specified at link creation time\n    \n    \n      ~feature\n      The feature, such as invite or share, specified at link creation time\n    \n    \n      ~tags\n      Any tags, specified at link creation time\n    \n    \n      ~campaign\n      The campaign the link is associated with, specified at link creation time\n    \n    \n      ~stage\n      The stage, specified at link creation time\n    \n    \n      ~creation_source\n      Where the link was created (‘API’, ‘Dashboard’, ‘SDK’, ‘iOS SDK’, ‘Android SDK’, or ‘Web SDK’)\n    \n    \n      +referrer\n      The referrer for the link click, if a link was clicked\n    \n    \n      +phone_number\n      The phone number of the user, if the user texted himself/herself the app\n    \n    \n      +is_first_session\n      Denotes whether this is the first session (install) or any other session (open)\n    \n    \n      +clicked_branch_link\n      Denotes whether or not the user clicked a Branch link that triggered this session\n    \n  \n"},{"title":"Identifying Your Users","id":"http://dev.branch.io/recipes/quickstart_guide/android/#identifying-your-users","body":"Branch automatically tracks unique devices. However, to make full use of our powerful API, you should also identify users with whichever form of unique identification your app uses. Add these two lines of code.Invoke the setIdentity call whenever you create or login a user.Branch.getInstance(getApplicationContext()).setIdentity(\"your user identity\");Add a logout call anywhere you allow the user to logout.// your app's userId, 127 chars or less\nBranch.getInstance(getApplicationContext()).logout();   Note:\nLogout should only be called when the user logs out. Calling it at other times could lead to hard-to-discover errors. Failing to call logout can likewise lead to bugs if multiple users log in on the same device.\nAlternatives to Application subclassStarting from Branch SDK version 1.5.7, there is no need for initialising and closing session with the new automatic session management. Automatic session management can work only with API level 14 and above, so make sure that your minSdkVersion is 14 or above.<uses-sdk android:minSdkVersion=\"14\"/>Once you do any of the below, there is no need to close or init sessions in your Activities. Branch SDK will do all that for you. You can get your Branch instance at any time as follows.Branch SDK can do session management for you if you do one of the following:\nIf you are not creating or using an Application class throughout your project, all you need to do is declare BranchApp as your application class in your manifest.\n\n\n<application\n    android:name=\"io.branch.referral.BranchApp\">\n\ncommonrareuncommonInitialization to support Android pre-14If you want to support pre-14 this method, you should include Branch SDK methods in both onStart() and onStop(). If you don’t close the Branch session, you’ll see strange behaviors like deep link parameters not showing up after clicking a link the second time. Branch must know when the app opens or closes to properly handle the deep link parameters retrieval.Init SessionPlease add this for every Activity for pre-14 support.@Override\nprotected void onStart() {\n    super.onStart();\n    Branch.getInstance(getApplicationContext()).initSession();\n}Close sessionPlease add this for every Activity for pre-14 support.@Override\nprotected void onStop() {\n    super.onStop();\n    branch.closeSession();\n}"},{"title":"Generating Links","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#generating-links","body":""},{"title":"Creating links in your app","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#creating-links-in-your-app","body":"Links are the foundation to everything Branch offers. Branch’s links offer the ability to deep link directly to content, to pass data through the install process, and to tell where users are coming from. In the case of a incentivized referral program, you don’t need to attach any information. You simply need to make sure that you generate links for the user who will be sharing the link. Also, be sure that you make a setIdentity call as described above.That said, you can attach information about the user who is sharing the link. Then this information about this user–here “John” with id “1234”–is present anytime John’s friends install the app after clicking his link.JSONObject obj = new JSONObject();\nobj.putString(\"referringUserName\", \"John\");\nobj.putString(\"referringUserId\", \"1234\"));\nbranch.getShortUrl(obj, new BranchLinkCreateListener() {\n\t@Override\n\tpublic void onLinkCreate(String url, BranchError error) {\n\t\tLog.i(TAG, \"Ready to share my link = \" + url);\n\t}\n});Again, it’s not imperative that you attach any information to the link. As long as you made a setIdentity call, anytime this link is shared we will know whose link it is and when to attribute an install to him."},{"title":"Sharing Branch Links","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#sharing-branch-links","body":"These links can be shared anywhere – via SMS, email, social media – you name it. If you have existing sharing functionality in place, all you need to do is insert a Branch link."},{"title":"Rewards","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#rewards","body":"Branch allows you reward users with credits, track those credits, and redeem them when appropriate. It is a unit-less currency available to your users without you having to build a system from scratch.If you decide to track user credits through the Branch platform, then you must configure reward rules on the dashboard and tie them to events that occur in your app. Think of the system like this, your users are constantly completing a steady stream of actions in your app: install, signup, product_purchased. Using the Branch reward rules, you tie reward events to specific actions. Then, with every event that is saved in Branch, we check automatically if that event is eligible for credits based on the rules that you configured, then deposit the credits if so. It’s very powerful.Branch automatically tracks opens, installs, referred sessions and web session start. You don’t need to write any special code–as soon as you start initializing sessions and clicking on Branch links, these events are recorded.You can easily see these events by navigating the Dashboard’s Export page and clicking on Events.These three events are tied to the initSession and handleOpenURL calls."},{"title":"Rewarding Users","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#rewarding-users","body":"\n        \n      To award users for credits, you must set up a reward rule tied to a specific events.Reward rules can be based on standard Branch-defined events like install, open and referred session. They can also be based on custom events.To add a rule, go to the Dashboard Referrals page and click the Rules tab. Click the green “+ Add a new rule” button.Let’s say you want to give 10 credits to each new user who signs up through a friend, and 5 credits to the friend who referred him or her. That can be done through a combination of (two rules.Rule 1: Rewarding the Referred User (10 Credits)\n        \n      \n  Who gets a reward: “Referred acting users”\n  How many credits the reward is: 10\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: the first time\n  Which event triggers the reward: install\nBe sure to press “Add rule”!Rule 2: Rewarding the Referring User (5 Credits)\n        \n      \n  Who gets a reward: “Referring users”\n  How many credits the reward is: 5\n  Which bucket the credits go to: default\n  Whether the reward occurs the first time or every time: every time\n  Which event triggers the reward: install\nAfter adding this second rule, you should see the following:\n        \n      That’s it!   Referral attribution after install\nBy default, users only get attribution for installs if the users they refer download the app for the first time. If a user sends a link to a second user who already has the app, it doesn’t “count” as a referral. To override this behavior, check out the setting isReferrable here.\n   Testing Rewards and Reward Rules\nBecause we have rules in place to ensure Rewards can’t be gamified, we have some tips for testing considerations.\nRewards are flexibleBranch’s credit system:\n  is based on either Branch-provided events (install, open, and referred session) or any custom events you track with a userCompletedAction call.\n  allows you to define as many “virtual wallets” per user as you want. These are called buckets and if no bucket is specified, the default bucket is debited/credited.\n  has built-in functions for rewarding, checking the balance, and redeeming credits.\n  enables you to specify rewards dynamically using Reward Rules on the dashboard.\n  comes with fraud protection built in.\n"},{"title":"Viewing Credits","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#viewing-credits","body":"Once users have credits, they should be able to redeem them.Checking the balance involves loading the most recent balance from the server and then checking the balance. These can be two separate steps but for the sake of simplicity we have combined them into one example:Branch.getInstance(getApplicationContext()).loadRewards(new BranchReferralStateChangedListener() {\n\t@Override\n\tpublic void onStateChanged(boolean changed, Branch.BranchError error) {\n\t\t// changed boolean will indicate if the balance changed from what is currently in memory\n\n\t\t// will return the balance of the current user's credits\n\t\tint credits = branch.getCredits();\n\t}\n});"},{"title":"Showing Referrals","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#showing-referrals","body":""},{"title":"Redeeming Credits","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#redeeming-credits","body":"When users spend credits, you can make a simple call to redeem their credits. On your dashboard, this will fall under the default bucket.Branch.getInstance(getApplicationContext()).redeemRewards(5);"},{"title":"Redeeming Flow","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#redeeming-flow","body":"Building out a credit redemption flow is super easy and painless, but there are a few important factors to keep in mind in terms of UX.\n  Users should know their total balance before commiting to a redemption.\n  Users should be aware of how many points they are agreeing to spend.\n  Since this is a one way, non-reversable transaction, confirmation is appropriate.\n  Users should see a progress indicator so they’re aware the transaction is taking place.\n  Users should not be able to resubmit while the redemption is occuring (progress indicator can handle this).\n  Upon completion, users should receive confirmation of success, and see their updated balance.\nFortunately, this is all fairly simple to accomplish with Branch. You really only need to take four steps:\n  Ensure Credits are loaded.\n  Show a confirmation dialog before redeeming credits.\n  Call the redeemRewards method and show a progress dialog.\n  Show a completion dialog and reflect updates in balance.\nBranch.getInstance(getApplicationContext()).redeemRewards(5);"},{"title":"Fraud Protection","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#fraud-protection","body":"While a bulletproof referral program is impossible, we do our best with a number of different mechanisms to stop high level fraud.\n  We track the hardware ID and IDFA of the device and tie our concept of a user identity to that identifier, preventing the cases of the same user triggering an event multiple times, and subtracting rewards when we detect fraud (multiple attempts to claim a reward from the same device).\n  Further, we merge identities so that if a user signs in on their iPhone and then their iPad using the same Facebook ID, when you let Branch know that this is the same user (via a setIdentity call), we’ll make sure any duplicate reward is removed.\nThis means that while testing you may run into issues if you test repeatedly with the same devices. When testing referral programs and reward rules, you should consider using setDebug – more on that on our “Testing your integration” page.Lastly, if you’re concerned about users gaming your system via the simulator, you can use our method isSimulator to determine whether to record an event or give a reward. It’s internal to our open-source SDK."},{"title":"Conclusion: So Much More","id":"http://dev.branch.io/recipes/referral_links_with_incentives/android/#conclusion-so-much-more","body":"You now have an incentivized referral program. Like many popular promo-code systems, you can reward both the user who shares a link and the user who clicks the link and installs the app. With Branch links, the magic is built in, so there’s no need for a promo code. Because we want to empower developers, we also offer the ability to reward users with credits, track those credits and redeem them–all with a few lines of code.This guide covered the basics. The following may be of interest to you, if you want to:\n  \n    Reward users for driving installs or even custom events that you define, such as “signup” or “purchase”\n  \n  \n    Personalized welcome – tailor onboarding for your users\n  \n  \n    See a list of your top influencers whose shared links are driving the most installs\n  \n  \n    Specify the channel (Facebook, Email, etc.) or tag content as it is being shared – then you can see a breakdown of installs by tag on the Dashboard\n  \nQuestions, comments and love letters are always welcome at support@branchmetrics.io."},{"title":"Submitting to the Play Store","id":"http://dev.branch.io/recipes/submitting_apps/android/#submitting-to-the-play-store","body":"By default, Branch only collects the Android hardware id. If you’d like Branch to collect Google Advertising ID for advertising or tracking purposes, you must do a little extra work. Basically, you need to add Google Play Services to your app prior to release.Google has provided an instructional section on their site, which is a little obtuse, so we’ve tried to simplify it for you."},{"title":"Steps to collect Google AID","id":"http://dev.branch.io/recipes/submitting_apps/android/#steps-to-collect-google-aid","body":"\n  \n    Make sure you have downloaded Google Play Services from the Android SDK Manager. This is usually at the very bottom listed as “Google Play services”.\n  \n  \n    Add in the Google Play service libproject or jar to your app project. You can find it in yoursdkfolder/sdk/extras/google/google_play_services/\n  \n  \n    Branch will handle the rest!\n  \n"},{"title":"Use the Test App on the Branch Dashboard","id":"http://dev.branch.io/recipes/testing_your_integration/android/#use-the-test-app-on-the-branch-dashboard","body":"At the top right of the dashboard, for any given app you see “Live” and “Test”. Use the “Test” app and be sure that the Link Settings are properly configured. Use this so as to not pollute your production app’s Branch data.To use this app, grab the Branch Key from the test version of your app. You should swap this test key in place of your live key – it will start with key_test_. Be sure to switch to your live key for production!Make sure that you do not use this in the version of your app that you push to the Play Store!"},{"title":"Debugging an individual link","id":"http://dev.branch.io/recipes/testing_your_integration/android/#debugging-an-individual-link","body":"At any time after link creation, you can see all the information about the link with a simple trick. Make sure you are logged into the dashboard and are on the app associated with that link (be sure you choose Live or Test as appropriate). Then enter the link into your browser and append ?debug=1.You’ll see the following screen as a result. It’s quite helpful for double-checking your links!\n        \n      "},{"title":"A Word About Fraud Protection","id":"http://dev.branch.io/recipes/testing_your_integration/android/#a-word-about-fraud-protection","body":"While a bulletproof referral program is impossible, we do our best with a number of different mechanisms to stop high level fraud.\n  We track the hardware ID and IDFA of the device and tie our concept of a user identity to that identifier, preventing the cases of the same user triggering an event multiple times, and subtracting rewards when we detect fraud (multiple attempts to claim a reward from the same device).\n  Further, we merge identities so that if a user signs in on their iPhone and then their iPad using the same Facebook ID, when you let Branch know that this is the same user (via a setIdentity call), we’ll make sure any duplicate reward is removed.\nThis means that while testing you may run into issues if you test repeatedly with the same devices. When testing referral programs and reward rules, you should consider using setDebug – more on that in the next section.Lastly, if you’re concerned about users gaming your system via the simulator, you can use our method isSimulator to determine whether to record an event or give a reward. It’s internal to our open-source SDK."},{"title":"Use setDebug To Simulate Fresh Installs","id":"http://dev.branch.io/recipes/testing_your_integration/android/#use-setdebug-to-simulate-fresh-installs","body":"One challenge aspect testing Branch’s service is simulating a fresh install. We intentionally add a lot of restrictions to prevent ‘install’ events from being triggered on app updates or uninstall/reinstall.To simulate a brand new user being referred from our perspective:\n  use the setDebug call before you call initSession in the AppDelegate (see below):\n  Uninstall your test app\n  Clear your browser cookies\n  Click a link in the browser\n  Run your test app:\nBranch.getInstance(getApplicationContext()).setDebug();"},{"title":"Use different user Ids","id":"http://dev.branch.io/recipes/testing_your_integration/android/#use-different-user-ids","body":"This is especially relevant if you are trying to test rewards. Another challenge is that we do a lot of magic (identity merging, etc) to ensure that a single user doesn’t get unique rewards multiple times. You should beware that if you’re calling setIdentity with a user id that had previously been rewarded a unique reward, you will not see his credit balance increment.Make sure to use a different user id with the setIdentity call if you want to be sure credits will be properly rewarded."},{"title":"Debugging with the Dashboard","id":"http://dev.branch.io/recipes/testing_your_integration/android/#debugging-with-the-dashboard","body":"For debugging while still in a test environment, the Dashboard’s Debug page offers a transparent look at what is happening behind the scenes. It includes data about:\n  the user’s identity\n  the current session\n  the device’s digital fingerprint\n  the user’s credits\n\n        \n      To make use of this feature, make sure you include the setDebug call. Then open the Debug page and follow the directions to connect your phone."},{"title":"Adjusting to poor connectivity and downtime","id":"http://dev.branch.io/recipes/testing_your_integration/android/#adjusting-to-poor-connectivity-and-downtime","body":"At Branch, we live and breath uptime & performance. We’ve developed mechanisms internal to the SDK to deal with network issues. We always call the callbacks with the error parameter describing the issue. If the phone is in airplane mode and the connection is not available, the callbacks are called immediately. If there is a server latency, we timeout after 3 seconds and will retry 4 more times with a 3 second pause in between each. These timeouts are adjustable on the singleton instance by calling:\n  setNetworkTimeout (ms)\n  setRetryCount\n  setRetryInterval (ms)\n"},{"title":"Web Setup","id":"http://dev.branch.io/recipes/text_me_the_app_page/android/#web-setup","body":"TL;DR – You can skip to the code snippet below to implement this feature immediately.Add the following code somewhere inside the <head> </head> tags on your website. Be sure to replace YOUR-BRANCH-KEY with your Branch Key inside the init() call. You can find your Branch Key on the Dashboard’s Settings page.<script type=\"text/javascript\">\n  (function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.8.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits creditHistory applyCode validateCode getCode redeem banner closeBanner\".split(\" \"),0);\n\n  branch.init('YOUR-BRANCH-KEY');\n  function sendSMS(form) {\n    branch.sendSMS(\n      phone: form.phone.text,\n      {\n        channel: 'Website',\n        feature: 'Text-Me-The-App',\n        data: {\n          foo: 'bar'\n        }\n      },\n      { make_new_link: false }, // Default: false. If set to true, sendSMS will generate a new link even if one already exists.\n      function(err) { console.log(err); }\n    }\n  });\n\n</script>"},{"title":"SendSMS() parameters.","id":"http://dev.branch.io/recipes/text_me_the_app_page/android/#sendsms-parameters","body":"branch.sendSMS(\n    phone,\n    linkData,\n    options,\n    callback (err, data)\n);You can read more about the SendSMS() method here.The example below includes all the code you need to add to your website in one snippet."},{"title":"SendSMS() Example","id":"http://dev.branch.io/recipes/text_me_the_app_page/android/#sendsms-example","body":"Here is a fully-functional web page that you can use as a template for your text-me-the-app page.<!DOCTYPE HTML>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <script type=\"text/javascript\">\n            (function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src=\"https://cdn.branch.io/branch-v1.5.8.min.js\";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\"script\",\"branch\",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\"init data setIdentity logout track link sendSMS referrals credits redeem banner closeBanner\".split(\" \"),0);\n\n            branch.init('YOUR-BRANCH-KEY');\n            function sendSMS(form) {\n                var phone = form.phone.value;\n                var linkData = {\n                    tags: [],\n                    channel: 'Website',\n                    feature: 'TextMeTheApp',\n                    data: {\n                        \"foo\": \"bar\"\n                    }\n                };\n                var options = {};\n                var callback = function(err, result) {\n                    if (err) {\n                        alert(\"Sorry, something went wrong.\");\n                    }\n                    else {\n                        alert(\"SMS sent!\");\n                    }\n                };\n                branch.sendSMS(phone, linkData, options, callback);\n                form.phone.value = \"\";\n            }\n        </script>\n    </head>\n    <body>\n    \tSend SMS\n        <form onsubmit=\"sendSMS(this); return false;\">\n        \t<input id=\"phone\" name=\"phone\" type=\"tel\" placeholder=\"(650) 123-4567\" />\n        \t<br/>\n        \t<input type=\"submit\"/>\n        </form>\n    </body>\n</html>This is all you need to create a branded text-me-the-app page. Customize to your heart’s content."},{"title":"Using your own SMS service (Advanced)","id":"http://dev.branch.io/recipes/text_me_the_app_page/android/#using-your-own-sms-service-advanced","body":"While we provide your users the ability to text themselves the app for free – we use Twilio – you can use your own SMS service.With the sendSMS() method, we send users a link that points back to the original link they clicked that brought them to your text-me-the-app page. You can now access an equivalent link that also points back to the same link. This is provided as part of the Web SDK’s init callback and is called referring_link. See the code below:branch.init('YOUR-BRANCH-KEY', function(err, data) {\n\tconsole.log(\"data.referring_link:\", data.referring_link);\n});This referring_link will be null if the user came to the page without clicking on a Branch link. Otherwise it will be of the form bnc.lt/c/XXX – the /c/ indicates that this is not the original link but rather points back to the original link.So, to roll your own SMS service, your logic should be as follows:\n  Does referring_link exist, a.k.a. did the user end up on this text-me-the-app page because of a Branch link? If so, use this link when sending the SMS.\n  If referring_link is null, generate a new Branch link by making a call to the Web SDK’s link() method. Use this link when sending the SMS.\n   referring_link passes along your data!\nIt is essential that you use referring_link if you decide not to use our sendSMS() method to text users the app from desktop. If you generate a new link, the data from whatever link they clicked that took them to your text-me-the-app page will not be passed through to the client app upon opening.\n"},{"title":"Customizing SMS Messages","id":"http://dev.branch.io/recipes/text_me_the_app_page/android/#customizing-sms-messages","body":"Branch has several options for the customization of SMS messages from the Text Me the App page.The following are the three different types of messages that can be sent:1. Link Specific MessagesYou can define a special SMS message one the individual link scale. Whether you want to switch the language of a message for a different region or include device specific date, you can specify the message in the Deep Link Data section at the bottom of the link editing screen.\n\nUse the key of $custom_sms_text and then enter your custom message in the value section. (Make sure to include the  tag in your custom message!)Example:\nThe developer of FlowerPower wants to customize the SMS messages for their app based on the country of the recipient. For each Branch link, they would specify in the deeplink data a different custom message.For ads in France:\nCliquez pour télécharger FlowerPower ici For ads in Spain:\nHaz click aquí para descargar FlowerPower For ads in Germany:\nKlicken Sie auf das FlowerPower hier herunterladen 2. Custom Default for All MessagesYou can create your own custom default message that will be sent if the specific link someone clicks doesn’t have a customized message itself. To customize the default message, edit the form under the Text me the app page tab in the general settings\t.\nExample:\nA developer wants all their links that don’t have individual customizations to have the default message of\nWoah! Look at this cool new way to learn the different  \nspecies of flowers! Download FlowerPower @ 3. Branch DefaultIf a developer doesn’t specify a link specific message or a custom default, SMS messages will default to the format of\n\"Click here to download [App Name] \"Reference:\n  The tag {{ link }} is replaced with your Branch link when sent\n  The key $custom_sms_text is used for creating link specific custom SMSs\nAdvanced: Other Liquid TagsIn both the link specific custom messages and the custom default message, there is support for other liquid tags like   {{ link.channel }} or {{ link.campaign }}. The customization options are only limited to your imagination.Make sure to format the liquid tag with the link.data prefix before your key value.E.g. {{ link.data.title }}Example:\nDmitri is creating Branch links to deeplink to each of the different flowers in his app FlowerPower. He creates each link with a key/value pair of the key flower and the flower name.E.g. Flower : Rose, Flower : TulipHe wants to customize his SMS messages based on name of the flower so he sets his custom link messages as:{{ link.data.flower }}s on the mind? Click here to buy some for your home on FlowerPower! {{ link }}\nAdvanced: Default Replacements for Liquid TagsIf a specific tag isn’t always going to be filled, you can use a | character to specify a default to fallback on if the tag is missing from your link dictionary.E.g. {{ link.data.author | default:”Alex” }}If the link.data.author information isn’t found, the tag will just be replaced with Alex instead of being replaced by an empty string."},{"title":"Link configuration","id":"http://dev.branch.io/recipes/your_first_marketing_link/android/#link-configuration","body":"First, please visit the Branch link configuration tool to setup all the redirection."},{"title":"Creating Your Branch Link","id":"http://dev.branch.io/recipes/your_first_marketing_link/android/#creating-your-branch-link","body":"When you create links on the dashboard, you have a subset of these overall labels available to you. Visit the Dashboard’s Marketing page. Then click + Add link to get started.\n        \n      The following sections will walk through various options and their implications."},{"title":"Analytics: Channel, Campaign, Etc","id":"http://dev.branch.io/recipes/your_first_marketing_link/android/#analytics-channel-campaign-etc","body":"optionalThe more information you enter, the better you’ll be able to segment data on the Dashboard and in exports. We recommend setting Channel and Campaign. Tags is free form."},{"title":"Custom Link Label","id":"http://dev.branch.io/recipes/your_first_marketing_link/android/#custom-link-label","body":"optionalHere is where you can add a custom alias to the end of the link. For example, you can create links.myexample.com/download."},{"title":"Social Media (OG) Format","id":"http://dev.branch.io/recipes/your_first_marketing_link/android/#social-media-og-format","body":"optionalYou can customize how the link will look on Twitter, Facebook, Pinterest and any other service with link previews. For more information on the optimal format for the title and description, see Facebook’s Sharing Best Practices."},{"title":"Deep Link Data","id":"http://dev.branch.io/recipes/your_first_marketing_link/android/#deep-link-data","body":"optionalHere is where you can specify the custom parameters to add to a link that will be deep linked into the app. You might want to put a coupon code or a page identifier here to route the user."},{"title":"Conclusion And Next Steps","id":"http://dev.branch.io/recipes/your_first_marketing_link/android/#conclusion-and-next-steps","body":"The Dashboard’s Summary page, specifically the “Click Flow” chart, can now show you meaningful click results! To track downloads and deep link through the install, the next step is integrating the SDK.\n        \n      "}]}